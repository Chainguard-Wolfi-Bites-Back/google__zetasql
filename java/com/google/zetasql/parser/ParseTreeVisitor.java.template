/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// ParseTreeVisitor.java GENERATED FROM ParseTreeVisitor.java.template
package com.google.zetasql.parser;

import com.google.common.collect.ImmutableList;
import javax.annotation.Generated;

/**
 * A visitor that ASTNodes accept. The default implementation of each
 * method is to descend into the parse and redispatch to each child node.
 * Clients are expected to override {@code visit} methods corresponding
 * to the types they are interested in.
 */
@Generated("//java/com/google/zetasql/parser:gen_parse_tree_visitor")
public abstract class ParseTreeVisitor {
{{blank_line}}
  public ParseTreeVisitor() {}
{{blank_line}}
  protected void defaultVisit(ASTNode node) {
    node.acceptChildren(this);
  }
{{blank_line}}
  public void visit(ASTNode node) {
    defaultVisit(node);
  }
{{blank_line}}
  protected void descend(ASTNode child) {
    if (child != null) {
      child.accept(this);
    }
  }
{{blank_line}}
  protected void descend(ImmutableList<? extends ASTNode> children) {
    children.stream().forEach(child -> child.accept(this));
  }
{{blank_line}}
# for node in nodes|sort_by_tag_id
 # if not node.is_abstract
  public void visit(ASTNodes.{{node.name}} node) {
    defaultVisit(node);
  }
  {{ blank_line }}
 # endif
# endfor
}
