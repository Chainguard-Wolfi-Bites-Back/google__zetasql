[prepare_database]
CREATE TABLE TestTableWithUid OPTIONS (userid_column=uid) AS
SELECT cast(1 as int64) as uid,
       cast(null as int64) as int64_val,
       cast(null as double) as double_val UNION ALL
  SELECT 2,  2,    1.5  UNION ALL
  SELECT 3,  1,    1.5  UNION ALL
  SELECT 4,  null, 2.5  UNION ALL
  SELECT 5,  1,    3.5  UNION ALL
  SELECT 6,  2,    null UNION ALL
  SELECT 7,  1,    -0.5 UNION ALL
  SELECT 8,  4,    -1.5 UNION ALL
  SELECT 9,  2,    1.5  UNION ALL
  SELECT 10, 3,    2.5
--
ARRAY<STRUCT<uid INT64, int64_val INT64, double_val DOUBLE>>[
  {1, NULL, NULL},
  {2, 2, 1.5},
  {3, 1, 1.5},
  {4, NULL, 2.5},
  {5, 1, 3.5},
  {6, 2, NULL},
  {7, 1, -0.5},
  {8, 4, -1.5},
  {9, 2, 1.5},
  {10, 3, 2.5}
]
==

# Epsilon values should be finite and greater than 0.
#
# Epsilon is very large.
#
# TODO: The privacy libraries are being updated and may make this
# test start to fail, as very large epsilons will start to cause overflow in
# some calculations.
[default required_features=DIFFERENTIAL_PRIVACY,NAMED_ARGUMENTS]
[name=epsilon_too_large]
[labels=differential_privacy]
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS(epsilon=1e308, delta=1)
  SUM(double_val)
FROM TestTableWithUid;
--
ARRAY<STRUCT<DOUBLE>>[{11}]
==

# Epsilon values should be finite and greater than 0.
#
# Epsilon is very large.
[name=epsilon_too_large_with_delta]
[labels=differential_privacy]
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS(epsilon=1e308, delta=0.0001)
  SUM(double_val)
FROM TestTableWithUid;
--
ARRAY<STRUCT<DOUBLE>>[{11}]
==

# Epsilon is negative. Because this error is reported by the differential
# privacy library, it should reflect that epsilon is split across the explicit
# SUM function and the generated thresholding function.
[name=epsilon_is_negative]
[labels=differential_privacy]
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS(epsilon=-1, delta=1)
  SUM(double_val)
FROM TestTableWithUid;
--
ERROR: generic::invalid_argument: Epsilon must be finite and positive, but is -1
==

# Epsilon is 0.
[name=epsilon_is_zero]
[labels=differential_privacy]
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS(epsilon=0, delta=1)
  SUM(double_val)
FROM TestTableWithUid;
--
ERROR: generic::invalid_argument: Epsilon must be finite and positive, but is 0
==

# Epsilon is +infinity.
[name=epsilon_is_pos_inf]
[labels=differential_privacy]
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS(epsilon=cast('+inf' as double), delta=1)
  SUM(double_val)
FROM TestTableWithUid;
--
ERROR: generic::invalid_argument: Epsilon must be finite and positive, but is inf
==

# Epsilon is -infinity.
[name=epsilon_is_neg_inf]
[labels=differential_privacy]
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS(epsilon=cast('-inf' as double), delta=1)
  SUM(double_val)
FROM TestTableWithUid;
--
ERROR: generic::invalid_argument: Epsilon must be finite and positive, but is -inf
==

# Epsilon is NaN.
[name=epsilon_is_nan]
[labels=differential_privacy]
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS(epsilon=cast('nan' as double), delta=1)
  SUM(double_val)
FROM TestTableWithUid;
--
ERROR: generic::invalid_argument: Epsilon must be finite and positive, but is nan
==

# Epsilon is NULL.
[name=epsilon_is_null_with_implicit_bounds]
[labels=differential_privacy]
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS(epsilon=cast(NULL as double), delta=1)
  SUM(double_val)
FROM TestTableWithUid;
--
ERROR: generic::invalid_argument: Differential privacy option EPSILON must be set and non-NULL
==

# Epsilon is NULL.
[name=epsilon_is_null_with_explicit_bounds]
[labels=differential_privacy]
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS(epsilon=cast(NULL as double), delta=1)
  SUM(double_val, contribution_bounds_per_group => (0, 1))
FROM TestTableWithUid;
--
ERROR: generic::invalid_argument: Differential privacy option EPSILON must be set and non-NULL
==

# Epsilon is NULL.
[name=epsilon_is_null_with_delta]
[labels=differential_privacy]
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS(epsilon=cast(NULL as double), delta=0.01)
  SUM(double_val)
FROM TestTableWithUid;
--
ERROR: generic::invalid_argument: Differential privacy option EPSILON must be set and non-NULL
==

# Total aggregation, without max_rows_contributed.
[name=differential_privacy_max_rows_contributed_unimplemented]
[required_features=DIFFERENTIAL_PRIVACY]
[labels=differential_privacy,Special:NoReference]
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS(epsilon=1e20, delta=1.0, max_rows_contributed=1)
  SUM(double_val)
FROM TestTableWithUid;
--
ERROR: generic::unimplemented: max_rows_contributed not implemented
