# TODO: Remove no_show_parse_location_text after parse locations
# have been manually verified as correct.
[default no_show_parse_location_text]
[default supported_generic_entity_types=RESERVATION,EXPLORE,SUPPORTED_ENTITY]
[default supported_generic_sub_entity_types=REPLICA,CHILD_OF_REPLICA]

CREATE {{RESERVATION|reSERVAtion|SUPPORTED_ENTITY}} myProject.myReservation
--
ALTERNATION GROUP: RESERVATION
--
CreateEntityStatement [0-42]
  Identifier(RESERVATION) [7-18]
  PathExpression [19-42]
    Identifier(myProject) [19-28]
    Identifier(myReservation) [29-42]
--
CREATE RESERVATION myProject.myReservation
--
ALTERNATION GROUP: reSERVAtion
--
CreateEntityStatement [0-42]
  Identifier(reSERVAtion) [7-18]
  PathExpression [19-42]
    Identifier(myProject) [19-28]
    Identifier(myReservation) [29-42]
--
CREATE reSERVAtion myProject.myReservation
--
ALTERNATION GROUP: SUPPORTED_ENTITY
--
CreateEntityStatement [0-47]
  Identifier(SUPPORTED_ENTITY) [7-23]
  PathExpression [24-47]
    Identifier(myProject) [24-33]
    Identifier(myReservation) [34-47]
--
CREATE SUPPORTED_ENTITY myProject.myReservation
==

# Generic CREATE with all optional clauses
CREATE OR REPLACE RESERVATION IF NOT EXISTS myProject.myReservation
OPTIONS(a=b, c=d)
AS JSON '{"key": "value"}';
--
CreateEntityStatement(is_or_replace, is_if_not_exists) [0-112]
  Identifier(RESERVATION) [18-29]
  PathExpression [44-67]
    Identifier(myProject) [44-53]
    Identifier(myReservation) [54-67]
  OptionsList [75-85]
    OptionsEntry [76-79]
      Identifier(a) [76-77]
      PathExpression [78-79]
        Identifier(b) [78-79]
    OptionsEntry [81-84]
      Identifier(c) [81-82]
      PathExpression [83-84]
        Identifier(d) [83-84]
  JSONLiteral('{"key": "value"}') [89-112]
--
CREATE OR REPLACE RESERVATION IF NOT EXISTS myProject.myReservation
OPTIONS(a = b, c = d)
AS JSON '{"key": "value"}'
==

# Generic CREATE with text literal body, instead of json
CREATE EXPLORE myProject.myExplore
OPTIONS(a=b, c=d)
AS """
explore: test_explore {

}
""";
--
CreateEntityStatement [0-90]
  Identifier(EXPLORE) [7-14]
  PathExpression [15-34]
    Identifier(myProject) [15-24]
    Identifier(myExplore) [25-34]
  OptionsList [42-52]
    OptionsEntry [43-46]
      Identifier(a) [43-44]
      PathExpression [45-46]
        Identifier(b) [45-46]
    OptionsEntry [48-51]
      Identifier(c) [48-49]
      PathExpression [50-51]
        Identifier(d) [50-51]
  StringLiteral("""
explore: test_explore {

}
""") [56-90]
--
CREATE EXPLORE myProject.myExplore
OPTIONS(a = b, c = d)
AS """
explore: test_explore {

}
"""
==

# Generic CREATE doesn't support multi-parts entity type
CREATE {{foo|RESERVATION}}.bar myProject.myReservation
--
ALTERNATION GROUP: foo
--
ERROR: foo is not a supported object type [at 1:8]
CREATE foo.bar myProject.myReservation
       ^
--
ALTERNATION GROUP: RESERVATION
--
ERROR: Syntax error: Unexpected "." [at 1:19]
CREATE RESERVATION.bar myProject.myReservation
                  ^
==

CREATE SOME_TYPE IF NOT EXISTS
--
ERROR: SOME_TYPE is not a supported object type [at 1:8]
CREATE SOME_TYPE IF NOT EXISTS
       ^
==

CREATE SOME_TYPE
--
ERROR: SOME_TYPE is not a supported object type [at 1:8]
CREATE SOME_TYPE
       ^
==

# Generic CREATE doesn't work with keywords
CREATE OPTIONS myProject.myReservation
--
ERROR: Syntax error: Expected keyword FUNCTION but got keyword OPTIONS [at 1:8]
CREATE OPTIONS myProject.myReservation
       ^
==

# Generic ALTER statement
ALTER RESERVATION myProject.myReservation SET OPTIONS (a=b)
--
AlterEntityStatement [0-59]
  Identifier(RESERVATION) [6-17]
  PathExpression [18-41]
    Identifier(myProject) [18-27]
    Identifier(myReservation) [28-41]
  AlterActionList [42-59]
    SetOptionsOperation [42-59]
      OptionsList [54-59]
        OptionsEntry [55-58]
          Identifier(a) [55-56]
          PathExpression [57-58]
            Identifier(b) [57-58]
--
ALTER RESERVATION myProject.myReservation SET OPTIONS(a = b)
==

ALTER RESERVATION myProject.myReservation SET AS JSON r'{"k\n1" : "v"}';
--
AlterEntityStatement [0-71]
  Identifier(RESERVATION) [6-17]
  PathExpression [18-41]
    Identifier(myProject) [18-27]
    Identifier(myReservation) [28-41]
  AlterActionList [42-71]
    SetAsOperation [42-71]
      JSONLiteral(r'{"k\n1" : "v"}') [49-71]
--
ALTER RESERVATION myProject.myReservation SET AS JSON r'{"k\n1" : "v"}'
==

ALTER RESERVATION myProject.myReservation
  SET OPTIONS (a=b),
  SET AS JSON '{"key": "value"}';
--
AlterEntityStatement [0-95]
  Identifier(RESERVATION) [6-17]
  PathExpression [18-41]
    Identifier(myProject) [18-27]
    Identifier(myReservation) [28-41]
  AlterActionList [44-95]
    SetOptionsOperation [44-61]
      OptionsList [56-61]
        OptionsEntry [57-60]
          Identifier(a) [57-58]
          PathExpression [59-60]
            Identifier(b) [59-60]
    SetAsOperation [65-95]
      JSONLiteral('{"key": "value"}') [72-95]
--
ALTER RESERVATION myProject.myReservation SET OPTIONS(a = b), SET AS JSON '{"key": "value"}'
==

ALTER EXPLORE myProject.myExplore SET AS "explore: test_explore { }";
--
AlterEntityStatement [0-68]
  Identifier(EXPLORE) [6-13]
  PathExpression [14-33]
    Identifier(myProject) [14-23]
    Identifier(myExplore) [24-33]
  AlterActionList [34-68]
    SetAsOperation [34-68]
      StringLiteral("explore: test_explore { }") [41-68]
--
ALTER EXPLORE myProject.myExplore SET AS "explore: test_explore { }"
==

# Incomplete generic ALTER statement
ALTER RESERVATION myProject.myReservation
--
ERROR: Syntax error: Unexpected end of statement [at 1:42]
ALTER RESERVATION myProject.myReservation
                                         ^
==

ALTER UNSUPPORTED myProject.myReservation
--
ERROR: UNSUPPORTED is not a supported object type [at 1:7]
ALTER UNSUPPORTED myProject.myReservation
      ^
==

DROP RESERVATION myProject.myReservation
--
DropEntityStatement [0-40]
  Identifier(RESERVATION) [5-16]
  PathExpression [17-40]
    Identifier(myProject) [17-26]
    Identifier(myReservation) [27-40]
--
DROP RESERVATION myProject.myReservation
==

DROP RESERVATION IF EXISTS myProject.myReservation
--
DropEntityStatement(is_if_exists) [0-50]
  Identifier(RESERVATION) [5-16]
  PathExpression [27-50]
    Identifier(myProject) [27-36]
    Identifier(myReservation) [37-50]
--
DROP RESERVATION IF EXISTS myProject.myReservation
==

DROP RESERVATION
--
ERROR: Syntax error: Unexpected end of statement [at 1:17]
DROP RESERVATION
                ^
==

DROP RESERVATION my_res IF EXISTS;
--
ERROR: Syntax error: Expected end of input but got keyword IF [at 1:25]
DROP RESERVATION my_res IF EXISTS;
                        ^
==

DROP UNSUPPORTED myProject.myReservation
--
ERROR: UNSUPPORTED is not a supported object type [at 1:6]
DROP UNSUPPORTED myProject.myReservation
     ^
==

[supported_generic_entity_types=]

CREATE {{RESERVATION|reSERVAtion|SUPPORTED_ENTITY}} myProject.myReservation
--
ALTERNATION GROUP: RESERVATION
--
ERROR: RESERVATION is not a supported object type [at 1:8]
CREATE RESERVATION myProject.myReservation
       ^
--
ALTERNATION GROUP: reSERVAtion
--
ERROR: reSERVAtion is not a supported object type [at 1:8]
CREATE reSERVAtion myProject.myReservation
       ^
--
ALTERNATION GROUP: SUPPORTED_ENTITY
--
ERROR: SUPPORTED_ENTITY is not a supported object type [at 1:8]
CREATE SUPPORTED_ENTITY myProject.myReservation
       ^
==

# Variant of the above test that features a missing path_expression.
[supported_generic_entity_types=]

CREATE {{RESERVATION|reSERVAtion|SUPPORTED_ENTITY}}
--
ALTERNATION GROUP: RESERVATION
--
ERROR: RESERVATION is not a supported object type [at 1:8]
CREATE RESERVATION
       ^
--
ALTERNATION GROUP: reSERVAtion
--
ERROR: reSERVAtion is not a supported object type [at 1:8]
CREATE reSERVAtion
       ^
--
ALTERNATION GROUP: SUPPORTED_ENTITY
--
ERROR: SUPPORTED_ENTITY is not a supported object type [at 1:8]
CREATE SUPPORTED_ENTITY
       ^
==

# Unless the allow_missing_path_in_generic_ddl_alter flag is set generic ALTER
# statements must generate a parser error when missing a path expression.
[supported_generic_entity_types=PROJECT,ORGANIZATION]

ALTER {{PROJECT|ORGANIZATION}} SET OPTIONS (a=b)
--
ALTERNATION GROUP: PROJECT
--
ERROR: Syntax error: Unexpected keyword SET [at 1:15]
ALTER PROJECT SET OPTIONS (a=b)
              ^
--
ALTERNATION GROUP: ORGANIZATION
--
ERROR: Syntax error: Unexpected keyword SET [at 1:20]
ALTER ORGANIZATION SET OPTIONS (a=b)
                   ^
==

# When allow_missing_path_in_generic_ddl_alter flag is set generic ALTER
# statements should parse even without a path expression.
[supported_generic_entity_types=PROJECT,ORGANIZATION]
[allow_missing_path_in_generic_ddl_alter]

ALTER {{PROJECT|ORGANIZATION}} SET OPTIONS (a=b)
--
ALTERNATION GROUP: PROJECT
--
AlterEntityStatement [0-31]
  Identifier(PROJECT) [6-13]
  AlterActionList [14-31]
    SetOptionsOperation [14-31]
      OptionsList [26-31]
        OptionsEntry [27-30]
          Identifier(a) [27-28]
          PathExpression [29-30]
            Identifier(b) [29-30]
--
ALTER PROJECT SET OPTIONS(a = b)
--
ALTERNATION GROUP: ORGANIZATION
--
AlterEntityStatement [0-36]
  Identifier(ORGANIZATION) [6-18]
  AlterActionList [19-36]
    SetOptionsOperation [19-36]
      OptionsList [31-36]
        OptionsEntry [32-35]
          Identifier(a) [32-33]
          PathExpression [34-35]
            Identifier(b) [34-35]
--
ALTER ORGANIZATION SET OPTIONS(a = b)

==

# We also need to verify that non-reserved word alter_actions parse correctly.
[supported_generic_entity_types=PROJECT,ORGANIZATION]
[allow_missing_path_in_generic_ddl_alter]

ALTER {{PROJECT|ORGANIZATION}} DROP CONSTRAINT foo
--
ALTERNATION GROUP: PROJECT
--
AlterEntityStatement [0-33]
  Identifier(PROJECT) [6-13]
  AlterActionList [14-33]
    DropConstraintAction [14-33]
      Identifier(foo) [30-33]
--
ALTER PROJECT DROP CONSTRAINT foo
--
ALTERNATION GROUP: ORGANIZATION
--
AlterEntityStatement [0-38]
  Identifier(ORGANIZATION) [6-18]
  AlterActionList [19-38]
    DropConstraintAction [19-38]
      Identifier(foo) [35-38]
--
ALTER ORGANIZATION DROP CONSTRAINT foo

==

# Ambiguity testing; ADD is the name of the project.
[supported_generic_entity_types=PROJECT]
[allow_missing_path_in_generic_ddl_alter]

ALTER PROJECT ADD DROP CONSTRAINT foo
--
AlterEntityStatement [0-37]
  Identifier(PROJECT) [6-13]
  PathExpression [14-17]
    Identifier(ADD) [14-17]
  AlterActionList [18-37]
    DropConstraintAction [18-37]
      Identifier(foo) [34-37]
--
ALTER PROJECT ADD DROP CONSTRAINT foo
==

# Disable the REPLICA sub_entity_type for ADD sub_entity_type.

[supported_generic_sub_entity_types=]

ALTER SCHEMA schema_name
ADD REPLICA replica_name
OPTIONS (a=b)
--
ERROR: REPLICA is not a supported nested object type [at 2:5]
ADD REPLICA replica_name
    ^
==

# Disable the REPLICA sub_entity_type for ALTER sub_entity_type.
[supported_generic_sub_entity_types=]

ALTER SCHEMA schema_name
ALTER REPLICA replica_name
SET OPTIONS (a=b)
--
ERROR: REPLICA is not a supported nested object type [at 2:7]
ALTER REPLICA replica_name
      ^
==

# Disable the REPLICA sub_entity_type for DROP sub_entity_type.
[supported_generic_sub_entity_types=]

ALTER SCHEMA schema_name
DROP REPLICA replica_name
--
ERROR: REPLICA is not a supported nested object type [at 2:6]
DROP REPLICA replica_name
     ^
==

ALTER SCHEMA schema_name
ADD REPLICA {{IF NOT EXISTS|}} replica_name
OPTIONS (a=b)
--
ALTERNATION GROUP: IF NOT EXISTS
--
AlterSchemaStatement [0-77]
  PathExpression [13-24]
    Identifier(schema_name) [13-24]
  AlterActionList [25-77]
    AddSubEntityAction(is_if_not_exists) [25-77]
      Identifier(REPLICA) [29-36]
      Identifier(replica_name) [51-63]
      OptionsList [72-77]
        OptionsEntry [73-76]
          Identifier(a) [73-74]
          PathExpression [75-76]
            Identifier(b) [75-76]
--
ALTER SCHEMA schema_name ADD REPLICA IF NOT EXISTS replica_name OPTIONS(a = b)
--
ALTERNATION GROUP: <empty>
--
AlterSchemaStatement [0-64]
  PathExpression [13-24]
    Identifier(schema_name) [13-24]
  AlterActionList [25-64]
    AddSubEntityAction [25-64]
      Identifier(REPLICA) [29-36]
      Identifier(replica_name) [38-50]
      OptionsList [59-64]
        OptionsEntry [60-63]
          Identifier(a) [60-61]
          PathExpression [62-63]
            Identifier(b) [62-63]
--
ALTER SCHEMA schema_name ADD REPLICA replica_name OPTIONS(a = b)
==

# Multiple nested ADD actions.
ALTER SCHEMA schema_name
ADD REPLICA replica_name1 OPTIONS (a=b),
ADD REPLICA replica_name2 OPTIONS (c=d)
--
AlterSchemaStatement [0-105]
  PathExpression [13-24]
    Identifier(schema_name) [13-24]
  AlterActionList [25-105]
    AddSubEntityAction [25-64]
      Identifier(REPLICA) [29-36]
      Identifier(replica_name1) [37-50]
      OptionsList [59-64]
        OptionsEntry [60-63]
          Identifier(a) [60-61]
          PathExpression [62-63]
            Identifier(b) [62-63]
    AddSubEntityAction [66-105]
      Identifier(REPLICA) [70-77]
      Identifier(replica_name2) [78-91]
      OptionsList [100-105]
        OptionsEntry [101-104]
          Identifier(c) [101-102]
          PathExpression [103-104]
            Identifier(d) [103-104]
--
ALTER SCHEMA schema_name ADD REPLICA replica_name1 OPTIONS(a = b), ADD REPLICA replica_name2 OPTIONS(c =
    d)
==

ALTER SCHEMA schema_name
DROP REPLICA {{IF EXISTS|}} replica_name
--
ALTERNATION GROUP: IF EXISTS
--
AlterSchemaStatement [0-60]
  PathExpression [13-24]
    Identifier(schema_name) [13-24]
  AlterActionList [25-60]
    DropSubEntityAction(is_if_exists) [25-60]
      Identifier(REPLICA) [30-37]
      Identifier(replica_name) [48-60]
--
ALTER SCHEMA schema_name DROP REPLICA IF EXISTS replica_name
--
ALTERNATION GROUP: <empty>
--
AlterSchemaStatement [0-51]
  PathExpression [13-24]
    Identifier(schema_name) [13-24]
  AlterActionList [25-51]
    DropSubEntityAction [25-51]
      Identifier(REPLICA) [30-37]
      Identifier(replica_name) [39-51]
--
ALTER SCHEMA schema_name DROP REPLICA replica_name
==

# Multiple nested DROP actions.
ALTER SCHEMA schema_name
DROP REPLICA replica_name1,
DROP REPLICA replica_name2
--
AlterSchemaStatement [0-79]
  PathExpression [13-24]
    Identifier(schema_name) [13-24]
  AlterActionList [25-79]
    DropSubEntityAction [25-51]
      Identifier(REPLICA) [30-37]
      Identifier(replica_name1) [38-51]
    DropSubEntityAction [53-79]
      Identifier(REPLICA) [58-65]
      Identifier(replica_name2) [66-79]
--
ALTER SCHEMA schema_name DROP REPLICA replica_name1, DROP REPLICA replica_name2
==

ALTER SCHEMA schema_name
ALTER REPLICA {{IF EXISTS|}} replica_name
SET OPTIONS (a=b)
--
ALTERNATION GROUP: IF EXISTS
--
AlterSchemaStatement [0-79]
  PathExpression [13-24]
    Identifier(schema_name) [13-24]
  AlterActionList [25-79]
    AlterSubEntityAction(is_if_exists) [25-79]
      Identifier(REPLICA) [31-38]
      Identifier(replica_name) [49-61]
      SetOptionsOperation [62-79]
        OptionsList [74-79]
          OptionsEntry [75-78]
            Identifier(a) [75-76]
            PathExpression [77-78]
              Identifier(b) [77-78]
--
ALTER SCHEMA schema_name ALTER REPLICA IF EXISTS replica_name SET OPTIONS(a = b)
--
ALTERNATION GROUP: <empty>
--
AlterSchemaStatement [0-70]
  PathExpression [13-24]
    Identifier(schema_name) [13-24]
  AlterActionList [25-70]
    AlterSubEntityAction [25-70]
      Identifier(REPLICA) [31-38]
      Identifier(replica_name) [40-52]
      SetOptionsOperation [53-70]
        OptionsList [65-70]
          OptionsEntry [66-69]
            Identifier(a) [66-67]
            PathExpression [68-69]
              Identifier(b) [68-69]
--
ALTER SCHEMA schema_name ALTER REPLICA replica_name SET OPTIONS(a = b)
==

# Multiple nested ALTER actions.
ALTER SCHEMA schema_name
ALTER REPLICA replica_name1 SET OPTIONS (a=b),
ALTER REPLICA replica_name2 SET OPTIONS (c=d)
--
AlterSchemaStatement [0-117]
  PathExpression [13-24]
    Identifier(schema_name) [13-24]
  AlterActionList [25-117]
    AlterSubEntityAction [25-70]
      Identifier(REPLICA) [31-38]
      Identifier(replica_name1) [39-52]
      SetOptionsOperation [53-70]
        OptionsList [65-70]
          OptionsEntry [66-69]
            Identifier(a) [66-67]
            PathExpression [68-69]
              Identifier(b) [68-69]
    AlterSubEntityAction [72-117]
      Identifier(REPLICA) [78-85]
      Identifier(replica_name2) [86-99]
      SetOptionsOperation [100-117]
        OptionsList [112-117]
          OptionsEntry [113-116]
            Identifier(c) [113-114]
            PathExpression [115-116]
              Identifier(d) [115-116]
--
ALTER SCHEMA schema_name ALTER REPLICA replica_name1 SET OPTIONS(a = b), ALTER REPLICA replica_name2 SET OPTIONS(c =
    d)
==

# Multiple doubly nested ADD actions. Since sub_entity alter statements
# only support one action (either SET OPTIONS or ADD/ALTER/DROP of a child),
# doubly nested actions need to be qualified from the root.

ALTER SCHEMA schema_name
ALTER REPLICA replica_name1 ADD CHILD_OF_REPLICA child_1 OPTIONS (a=b),
ALTER REPLICA replica_name1 ADD CHILD_OF_REPLICA child_2 OPTIONS (c=d)
--
AlterSchemaStatement [0-167]
  PathExpression [13-24]
    Identifier(schema_name) [13-24]
  AlterActionList [25-167]
    AlterSubEntityAction [25-95]
      Identifier(REPLICA) [31-38]
      Identifier(replica_name1) [39-52]
      AddSubEntityAction [53-95]
        Identifier(CHILD_OF_REPLICA) [57-73]
        Identifier(child_1) [74-81]
        OptionsList [90-95]
          OptionsEntry [91-94]
            Identifier(a) [91-92]
            PathExpression [93-94]
              Identifier(b) [93-94]
    AlterSubEntityAction [97-167]
      Identifier(REPLICA) [103-110]
      Identifier(replica_name1) [111-124]
      AddSubEntityAction [125-167]
        Identifier(CHILD_OF_REPLICA) [129-145]
        Identifier(child_2) [146-153]
        OptionsList [162-167]
          OptionsEntry [163-166]
            Identifier(c) [163-164]
            PathExpression [165-166]
              Identifier(d) [165-166]
--
ALTER SCHEMA schema_name ALTER REPLICA replica_name1 ADD CHILD_OF_REPLICA child_1 OPTIONS(a = b), ALTER REPLICA replica_name1 ADD CHILD_OF_REPLICA child_2 OPTIONS(c =
    d)
==

# Attempting to both SET OPTIONS on a sub_entity and ADD a CHILD_OF_REPLICA
# is invalid. Only the top level ALTER statement supports multiple actions.

ALTER SCHEMA schema_name
ALTER REPLICA replica_name1 SET OPTIONS(a=b)
ADD CHILD_OF_REPLICA child_1 OPTIONS (c=d)
--
ERROR: Syntax error: Expected end of input but got keyword ADD [at 3:1]
ADD CHILD_OF_REPLICA child_1 OPTIONS (c=d)
^
