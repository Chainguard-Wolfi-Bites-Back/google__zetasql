==

# Parser tests for the CREATE TABLE FUNCTION statement with alternation groups.
# These tests are in a separate file for easier reviewing.
#
# This is a parser test with all combinations of features for different
# optional parts of the CREATE TABLE FUNCTION statement. Most combinations
# parse successfully. The analyzer later examines the parsed options and
# returns errors for those that are semantically invalid.
#
# Expected parser syntax errors:
#   CREATE EXTERNAL TABLE FUNCTION ...
#   ... OPTIONS (a=b) ... OPTIONS (y=z) ...
create
{{or replace|}}
{{temporary|}}
{{external|}}
table function
{{if not exists|}}
myfunction()
{{returns table<x int64>|}}
{{sql security invoker|}}
{{options(a=b)|}}
{{language testlang|}}
{{options(y=z)|}}
{{as select 1 as x|}};
--
ALTERNATION GROUPS:
    or replace,temporary,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),
    or replace,temporary,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,,as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,,
    or replace,temporary,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),
    or replace,temporary,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),,,as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),,,
    or replace,temporary,external,if not exists,returns table<x int64>,sql security invoker,,language testlang,options(y=z),as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,sql security invoker,,language testlang,options(y=z),
    or replace,temporary,external,if not exists,returns table<x int64>,sql security invoker,,language testlang,,as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,sql security invoker,,language testlang,,
    or replace,temporary,external,if not exists,returns table<x int64>,sql security invoker,,,options(y=z),as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,sql security invoker,,,options(y=z),
    or replace,temporary,external,if not exists,returns table<x int64>,sql security invoker,,,,as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,sql security invoker,,,,
    or replace,temporary,external,if not exists,returns table<x int64>,,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,,options(a=b),language testlang,options(y=z),
    or replace,temporary,external,if not exists,returns table<x int64>,,options(a=b),language testlang,,as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,,options(a=b),language testlang,,
    or replace,temporary,external,if not exists,returns table<x int64>,,options(a=b),,options(y=z),as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,,options(a=b),,options(y=z),
    or replace,temporary,external,if not exists,returns table<x int64>,,options(a=b),,,as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,,options(a=b),,,
    or replace,temporary,external,if not exists,returns table<x int64>,,,language testlang,options(y=z),as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,,,language testlang,options(y=z),
    or replace,temporary,external,if not exists,returns table<x int64>,,,language testlang,,as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,,,language testlang,,
    or replace,temporary,external,if not exists,returns table<x int64>,,,,options(y=z),as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,,,,options(y=z),
    or replace,temporary,external,if not exists,returns table<x int64>,,,,,as select 1 as x
    or replace,temporary,external,if not exists,returns table<x int64>,,,,,
    or replace,temporary,external,if not exists,,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,temporary,external,if not exists,,sql security invoker,options(a=b),language testlang,options(y=z),
    or replace,temporary,external,if not exists,,sql security invoker,options(a=b),language testlang,,as select 1 as x
    or replace,temporary,external,if not exists,,sql security invoker,options(a=b),language testlang,,
    or replace,temporary,external,if not exists,,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    or replace,temporary,external,if not exists,,sql security invoker,options(a=b),,options(y=z),
    or replace,temporary,external,if not exists,,sql security invoker,options(a=b),,,as select 1 as x
    or replace,temporary,external,if not exists,,sql security invoker,options(a=b),,,
    or replace,temporary,external,if not exists,,sql security invoker,,language testlang,options(y=z),as select 1 as x
    or replace,temporary,external,if not exists,,sql security invoker,,language testlang,options(y=z),
    or replace,temporary,external,if not exists,,sql security invoker,,language testlang,,as select 1 as x
    or replace,temporary,external,if not exists,,sql security invoker,,language testlang,,
    or replace,temporary,external,if not exists,,sql security invoker,,,options(y=z),as select 1 as x
    or replace,temporary,external,if not exists,,sql security invoker,,,options(y=z),
    or replace,temporary,external,if not exists,,sql security invoker,,,,as select 1 as x
    or replace,temporary,external,if not exists,,sql security invoker,,,,
    or replace,temporary,external,if not exists,,,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,temporary,external,if not exists,,,options(a=b),language testlang,options(y=z),
    or replace,temporary,external,if not exists,,,options(a=b),language testlang,,as select 1 as x
    or replace,temporary,external,if not exists,,,options(a=b),language testlang,,
    or replace,temporary,external,if not exists,,,options(a=b),,options(y=z),as select 1 as x
    or replace,temporary,external,if not exists,,,options(a=b),,options(y=z),
    or replace,temporary,external,if not exists,,,options(a=b),,,as select 1 as x
    or replace,temporary,external,if not exists,,,options(a=b),,,
    or replace,temporary,external,if not exists,,,,language testlang,options(y=z),as select 1 as x
    or replace,temporary,external,if not exists,,,,language testlang,options(y=z),
    or replace,temporary,external,if not exists,,,,language testlang,,as select 1 as x
    or replace,temporary,external,if not exists,,,,language testlang,,
    or replace,temporary,external,if not exists,,,,,options(y=z),as select 1 as x
    or replace,temporary,external,if not exists,,,,,options(y=z),
    or replace,temporary,external,if not exists,,,,,,as select 1 as x
    or replace,temporary,external,if not exists,,,,,,
    or replace,temporary,external,,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,temporary,external,,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),
    or replace,temporary,external,,returns table<x int64>,sql security invoker,options(a=b),language testlang,,as select 1 as x
    or replace,temporary,external,,returns table<x int64>,sql security invoker,options(a=b),language testlang,,
    or replace,temporary,external,,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    or replace,temporary,external,,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),
    or replace,temporary,external,,returns table<x int64>,sql security invoker,options(a=b),,,as select 1 as x
    or replace,temporary,external,,returns table<x int64>,sql security invoker,options(a=b),,,
    or replace,temporary,external,,returns table<x int64>,sql security invoker,,language testlang,options(y=z),as select 1 as x
    or replace,temporary,external,,returns table<x int64>,sql security invoker,,language testlang,options(y=z),
    or replace,temporary,external,,returns table<x int64>,sql security invoker,,language testlang,,as select 1 as x
    or replace,temporary,external,,returns table<x int64>,sql security invoker,,language testlang,,
    or replace,temporary,external,,returns table<x int64>,sql security invoker,,,options(y=z),as select 1 as x
    or replace,temporary,external,,returns table<x int64>,sql security invoker,,,options(y=z),
    or replace,temporary,external,,returns table<x int64>,sql security invoker,,,,as select 1 as x
    or replace,temporary,external,,returns table<x int64>,sql security invoker,,,,
    or replace,temporary,external,,returns table<x int64>,,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,temporary,external,,returns table<x int64>,,options(a=b),language testlang,options(y=z),
    or replace,temporary,external,,returns table<x int64>,,options(a=b),language testlang,,as select 1 as x
    or replace,temporary,external,,returns table<x int64>,,options(a=b),language testlang,,
    or replace,temporary,external,,returns table<x int64>,,options(a=b),,options(y=z),as select 1 as x
    or replace,temporary,external,,returns table<x int64>,,options(a=b),,options(y=z),
    or replace,temporary,external,,returns table<x int64>,,options(a=b),,,as select 1 as x
    or replace,temporary,external,,returns table<x int64>,,options(a=b),,,
    or replace,temporary,external,,returns table<x int64>,,,language testlang,options(y=z),as select 1 as x
    or replace,temporary,external,,returns table<x int64>,,,language testlang,options(y=z),
    or replace,temporary,external,,returns table<x int64>,,,language testlang,,as select 1 as x
    or replace,temporary,external,,returns table<x int64>,,,language testlang,,
    or replace,temporary,external,,returns table<x int64>,,,,options(y=z),as select 1 as x
    or replace,temporary,external,,returns table<x int64>,,,,options(y=z),
    or replace,temporary,external,,returns table<x int64>,,,,,as select 1 as x
    or replace,temporary,external,,returns table<x int64>,,,,,
    or replace,temporary,external,,,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,temporary,external,,,sql security invoker,options(a=b),language testlang,options(y=z),
    or replace,temporary,external,,,sql security invoker,options(a=b),language testlang,,as select 1 as x
    or replace,temporary,external,,,sql security invoker,options(a=b),language testlang,,
    or replace,temporary,external,,,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    or replace,temporary,external,,,sql security invoker,options(a=b),,options(y=z),
    or replace,temporary,external,,,sql security invoker,options(a=b),,,as select 1 as x
    or replace,temporary,external,,,sql security invoker,options(a=b),,,
    or replace,temporary,external,,,sql security invoker,,language testlang,options(y=z),as select 1 as x
    or replace,temporary,external,,,sql security invoker,,language testlang,options(y=z),
    or replace,temporary,external,,,sql security invoker,,language testlang,,as select 1 as x
    or replace,temporary,external,,,sql security invoker,,language testlang,,
    or replace,temporary,external,,,sql security invoker,,,options(y=z),as select 1 as x
    or replace,temporary,external,,,sql security invoker,,,options(y=z),
    or replace,temporary,external,,,sql security invoker,,,,as select 1 as x
    or replace,temporary,external,,,sql security invoker,,,,
    or replace,temporary,external,,,,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,temporary,external,,,,options(a=b),language testlang,options(y=z),
    or replace,temporary,external,,,,options(a=b),language testlang,,as select 1 as x
    or replace,temporary,external,,,,options(a=b),language testlang,,
    or replace,temporary,external,,,,options(a=b),,options(y=z),as select 1 as x
    or replace,temporary,external,,,,options(a=b),,options(y=z),
    or replace,temporary,external,,,,options(a=b),,,as select 1 as x
    or replace,temporary,external,,,,options(a=b),,,
    or replace,temporary,external,,,,,language testlang,options(y=z),as select 1 as x
    or replace,temporary,external,,,,,language testlang,options(y=z),
    or replace,temporary,external,,,,,language testlang,,as select 1 as x
    or replace,temporary,external,,,,,language testlang,,
    or replace,temporary,external,,,,,,options(y=z),as select 1 as x
    or replace,temporary,external,,,,,,options(y=z),
    or replace,temporary,external,,,,,,,as select 1 as x
    or replace,temporary,external,,,,,,,
    or replace,,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),
    or replace,,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,,as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,,
    or replace,,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),
    or replace,,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),,,as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),,,
    or replace,,external,if not exists,returns table<x int64>,sql security invoker,,language testlang,options(y=z),as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,sql security invoker,,language testlang,options(y=z),
    or replace,,external,if not exists,returns table<x int64>,sql security invoker,,language testlang,,as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,sql security invoker,,language testlang,,
    or replace,,external,if not exists,returns table<x int64>,sql security invoker,,,options(y=z),as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,sql security invoker,,,options(y=z),
    or replace,,external,if not exists,returns table<x int64>,sql security invoker,,,,as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,sql security invoker,,,,
    or replace,,external,if not exists,returns table<x int64>,,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,,options(a=b),language testlang,options(y=z),
    or replace,,external,if not exists,returns table<x int64>,,options(a=b),language testlang,,as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,,options(a=b),language testlang,,
    or replace,,external,if not exists,returns table<x int64>,,options(a=b),,options(y=z),as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,,options(a=b),,options(y=z),
    or replace,,external,if not exists,returns table<x int64>,,options(a=b),,,as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,,options(a=b),,,
    or replace,,external,if not exists,returns table<x int64>,,,language testlang,options(y=z),as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,,,language testlang,options(y=z),
    or replace,,external,if not exists,returns table<x int64>,,,language testlang,,as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,,,language testlang,,
    or replace,,external,if not exists,returns table<x int64>,,,,options(y=z),as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,,,,options(y=z),
    or replace,,external,if not exists,returns table<x int64>,,,,,as select 1 as x
    or replace,,external,if not exists,returns table<x int64>,,,,,
    or replace,,external,if not exists,,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,,external,if not exists,,sql security invoker,options(a=b),language testlang,options(y=z),
    or replace,,external,if not exists,,sql security invoker,options(a=b),language testlang,,as select 1 as x
    or replace,,external,if not exists,,sql security invoker,options(a=b),language testlang,,
    or replace,,external,if not exists,,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    or replace,,external,if not exists,,sql security invoker,options(a=b),,options(y=z),
    or replace,,external,if not exists,,sql security invoker,options(a=b),,,as select 1 as x
    or replace,,external,if not exists,,sql security invoker,options(a=b),,,
    or replace,,external,if not exists,,sql security invoker,,language testlang,options(y=z),as select 1 as x
    or replace,,external,if not exists,,sql security invoker,,language testlang,options(y=z),
    or replace,,external,if not exists,,sql security invoker,,language testlang,,as select 1 as x
    or replace,,external,if not exists,,sql security invoker,,language testlang,,
    or replace,,external,if not exists,,sql security invoker,,,options(y=z),as select 1 as x
    or replace,,external,if not exists,,sql security invoker,,,options(y=z),
    or replace,,external,if not exists,,sql security invoker,,,,as select 1 as x
    or replace,,external,if not exists,,sql security invoker,,,,
    or replace,,external,if not exists,,,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,,external,if not exists,,,options(a=b),language testlang,options(y=z),
    or replace,,external,if not exists,,,options(a=b),language testlang,,as select 1 as x
    or replace,,external,if not exists,,,options(a=b),language testlang,,
    or replace,,external,if not exists,,,options(a=b),,options(y=z),as select 1 as x
    or replace,,external,if not exists,,,options(a=b),,options(y=z),
    or replace,,external,if not exists,,,options(a=b),,,as select 1 as x
    or replace,,external,if not exists,,,options(a=b),,,
    or replace,,external,if not exists,,,,language testlang,options(y=z),as select 1 as x
    or replace,,external,if not exists,,,,language testlang,options(y=z),
    or replace,,external,if not exists,,,,language testlang,,as select 1 as x
    or replace,,external,if not exists,,,,language testlang,,
    or replace,,external,if not exists,,,,,options(y=z),as select 1 as x
    or replace,,external,if not exists,,,,,options(y=z),
    or replace,,external,if not exists,,,,,,as select 1 as x
    or replace,,external,if not exists,,,,,,
    or replace,,external,,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,,external,,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),
    or replace,,external,,returns table<x int64>,sql security invoker,options(a=b),language testlang,,as select 1 as x
    or replace,,external,,returns table<x int64>,sql security invoker,options(a=b),language testlang,,
    or replace,,external,,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    or replace,,external,,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),
    or replace,,external,,returns table<x int64>,sql security invoker,options(a=b),,,as select 1 as x
    or replace,,external,,returns table<x int64>,sql security invoker,options(a=b),,,
    or replace,,external,,returns table<x int64>,sql security invoker,,language testlang,options(y=z),as select 1 as x
    or replace,,external,,returns table<x int64>,sql security invoker,,language testlang,options(y=z),
    or replace,,external,,returns table<x int64>,sql security invoker,,language testlang,,as select 1 as x
    or replace,,external,,returns table<x int64>,sql security invoker,,language testlang,,
    or replace,,external,,returns table<x int64>,sql security invoker,,,options(y=z),as select 1 as x
    or replace,,external,,returns table<x int64>,sql security invoker,,,options(y=z),
    or replace,,external,,returns table<x int64>,sql security invoker,,,,as select 1 as x
    or replace,,external,,returns table<x int64>,sql security invoker,,,,
    or replace,,external,,returns table<x int64>,,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,,external,,returns table<x int64>,,options(a=b),language testlang,options(y=z),
    or replace,,external,,returns table<x int64>,,options(a=b),language testlang,,as select 1 as x
    or replace,,external,,returns table<x int64>,,options(a=b),language testlang,,
    or replace,,external,,returns table<x int64>,,options(a=b),,options(y=z),as select 1 as x
    or replace,,external,,returns table<x int64>,,options(a=b),,options(y=z),
    or replace,,external,,returns table<x int64>,,options(a=b),,,as select 1 as x
    or replace,,external,,returns table<x int64>,,options(a=b),,,
    or replace,,external,,returns table<x int64>,,,language testlang,options(y=z),as select 1 as x
    or replace,,external,,returns table<x int64>,,,language testlang,options(y=z),
    or replace,,external,,returns table<x int64>,,,language testlang,,as select 1 as x
    or replace,,external,,returns table<x int64>,,,language testlang,,
    or replace,,external,,returns table<x int64>,,,,options(y=z),as select 1 as x
    or replace,,external,,returns table<x int64>,,,,options(y=z),
    or replace,,external,,returns table<x int64>,,,,,as select 1 as x
    or replace,,external,,returns table<x int64>,,,,,
    or replace,,external,,,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,,external,,,sql security invoker,options(a=b),language testlang,options(y=z),
    or replace,,external,,,sql security invoker,options(a=b),language testlang,,as select 1 as x
    or replace,,external,,,sql security invoker,options(a=b),language testlang,,
    or replace,,external,,,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    or replace,,external,,,sql security invoker,options(a=b),,options(y=z),
    or replace,,external,,,sql security invoker,options(a=b),,,as select 1 as x
    or replace,,external,,,sql security invoker,options(a=b),,,
    or replace,,external,,,sql security invoker,,language testlang,options(y=z),as select 1 as x
    or replace,,external,,,sql security invoker,,language testlang,options(y=z),
    or replace,,external,,,sql security invoker,,language testlang,,as select 1 as x
    or replace,,external,,,sql security invoker,,language testlang,,
    or replace,,external,,,sql security invoker,,,options(y=z),as select 1 as x
    or replace,,external,,,sql security invoker,,,options(y=z),
    or replace,,external,,,sql security invoker,,,,as select 1 as x
    or replace,,external,,,sql security invoker,,,,
    or replace,,external,,,,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,,external,,,,options(a=b),language testlang,options(y=z),
    or replace,,external,,,,options(a=b),language testlang,,as select 1 as x
    or replace,,external,,,,options(a=b),language testlang,,
    or replace,,external,,,,options(a=b),,options(y=z),as select 1 as x
    or replace,,external,,,,options(a=b),,options(y=z),
    or replace,,external,,,,options(a=b),,,as select 1 as x
    or replace,,external,,,,options(a=b),,,
    or replace,,external,,,,,language testlang,options(y=z),as select 1 as x
    or replace,,external,,,,,language testlang,options(y=z),
    or replace,,external,,,,,language testlang,,as select 1 as x
    or replace,,external,,,,,language testlang,,
    or replace,,external,,,,,,options(y=z),as select 1 as x
    or replace,,external,,,,,,options(y=z),
    or replace,,external,,,,,,,as select 1 as x
    or replace,,external,,,,,,,
    temporary,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    temporary,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),
    temporary,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,,as select 1 as x
    temporary,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,,
    temporary,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    temporary,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),
    temporary,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),,,as select 1 as x
    temporary,external,if not exists,returns table<x int64>,sql security invoker,options(a=b),,,
    temporary,external,if not exists,returns table<x int64>,sql security invoker,,language testlang,options(y=z),as select 1 as x
    temporary,external,if not exists,returns table<x int64>,sql security invoker,,language testlang,options(y=z),
    temporary,external,if not exists,returns table<x int64>,sql security invoker,,language testlang,,as select 1 as x
    temporary,external,if not exists,returns table<x int64>,sql security invoker,,language testlang,,
    temporary,external,if not exists,returns table<x int64>,sql security invoker,,,options(y=z),as select 1 as x
    temporary,external,if not exists,returns table<x int64>,sql security invoker,,,options(y=z),
    temporary,external,if not exists,returns table<x int64>,sql security invoker,,,,as select 1 as x
    temporary,external,if not exists,returns table<x int64>,sql security invoker,,,,
    temporary,external,if not exists,returns table<x int64>,,options(a=b),language testlang,options(y=z),as select 1 as x
    temporary,external,if not exists,returns table<x int64>,,options(a=b),language testlang,options(y=z),
    temporary,external,if not exists,returns table<x int64>,,options(a=b),language testlang,,as select 1 as x
    temporary,external,if not exists,returns table<x int64>,,options(a=b),language testlang,,
    temporary,external,if not exists,returns table<x int64>,,options(a=b),,options(y=z),as select 1 as x
    temporary,external,if not exists,returns table<x int64>,,options(a=b),,options(y=z),
    temporary,external,if not exists,returns table<x int64>,,options(a=b),,,as select 1 as x
    temporary,external,if not exists,returns table<x int64>,,options(a=b),,,
    temporary,external,if not exists,returns table<x int64>,,,language testlang,options(y=z),as select 1 as x
    temporary,external,if not exists,returns table<x int64>,,,language testlang,options(y=z),
    temporary,external,if not exists,returns table<x int64>,,,language testlang,,as select 1 as x
    temporary,external,if not exists,returns table<x int64>,,,language testlang,,
    temporary,external,if not exists,returns table<x int64>,,,,options(y=z),as select 1 as x
    temporary,external,if not exists,returns table<x int64>,,,,options(y=z),
    temporary,external,if not exists,returns table<x int64>,,,,,as select 1 as x
    temporary,external,if not exists,returns table<x int64>,,,,,
    temporary,external,if not exists,,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    temporary,external,if not exists,,sql security invoker,options(a=b),language testlang,options(y=z),
    temporary,external,if not exists,,sql security invoker,options(a=b),language testlang,,as select 1 as x
    temporary,external,if not exists,,sql security invoker,options(a=b),language testlang,,
    temporary,external,if not exists,,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    temporary,external,if not exists,,sql security invoker,options(a=b),,options(y=z),
    temporary,external,if not exists,,sql security invoker,options(a=b),,,as select 1 as x
    temporary,external,if not exists,,sql security invoker,options(a=b),,,
    temporary,external,if not exists,,sql security invoker,,language testlang,options(y=z),as select 1 as x
    temporary,external,if not exists,,sql security invoker,,language testlang,options(y=z),
    temporary,external,if not exists,,sql security invoker,,language testlang,,as select 1 as x
    temporary,external,if not exists,,sql security invoker,,language testlang,,
    temporary,external,if not exists,,sql security invoker,,,options(y=z),as select 1 as x
    temporary,external,if not exists,,sql security invoker,,,options(y=z),
    temporary,external,if not exists,,sql security invoker,,,,as select 1 as x
    temporary,external,if not exists,,sql security invoker,,,,
    temporary,external,if not exists,,,options(a=b),language testlang,options(y=z),as select 1 as x
    temporary,external,if not exists,,,options(a=b),language testlang,options(y=z),
    temporary,external,if not exists,,,options(a=b),language testlang,,as select 1 as x
    temporary,external,if not exists,,,options(a=b),language testlang,,
    temporary,external,if not exists,,,options(a=b),,options(y=z),as select 1 as x
    temporary,external,if not exists,,,options(a=b),,options(y=z),
    temporary,external,if not exists,,,options(a=b),,,as select 1 as x
    temporary,external,if not exists,,,options(a=b),,,
    temporary,external,if not exists,,,,language testlang,options(y=z),as select 1 as x
    temporary,external,if not exists,,,,language testlang,options(y=z),
    temporary,external,if not exists,,,,language testlang,,as select 1 as x
    temporary,external,if not exists,,,,language testlang,,
    temporary,external,if not exists,,,,,options(y=z),as select 1 as x
    temporary,external,if not exists,,,,,options(y=z),
    temporary,external,if not exists,,,,,,as select 1 as x
    temporary,external,if not exists,,,,,,
    temporary,external,,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    temporary,external,,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),
    temporary,external,,returns table<x int64>,sql security invoker,options(a=b),language testlang,,as select 1 as x
    temporary,external,,returns table<x int64>,sql security invoker,options(a=b),language testlang,,
    temporary,external,,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    temporary,external,,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),
    temporary,external,,returns table<x int64>,sql security invoker,options(a=b),,,as select 1 as x
    temporary,external,,returns table<x int64>,sql security invoker,options(a=b),,,
    temporary,external,,returns table<x int64>,sql security invoker,,language testlang,options(y=z),as select 1 as x
    temporary,external,,returns table<x int64>,sql security invoker,,language testlang,options(y=z),
    temporary,external,,returns table<x int64>,sql security invoker,,language testlang,,as select 1 as x
    temporary,external,,returns table<x int64>,sql security invoker,,language testlang,,
    temporary,external,,returns table<x int64>,sql security invoker,,,options(y=z),as select 1 as x
    temporary,external,,returns table<x int64>,sql security invoker,,,options(y=z),
    temporary,external,,returns table<x int64>,sql security invoker,,,,as select 1 as x
    temporary,external,,returns table<x int64>,sql security invoker,,,,
    temporary,external,,returns table<x int64>,,options(a=b),language testlang,options(y=z),as select 1 as x
    temporary,external,,returns table<x int64>,,options(a=b),language testlang,options(y=z),
    temporary,external,,returns table<x int64>,,options(a=b),language testlang,,as select 1 as x
    temporary,external,,returns table<x int64>,,options(a=b),language testlang,,
    temporary,external,,returns table<x int64>,,options(a=b),,options(y=z),as select 1 as x
    temporary,external,,returns table<x int64>,,options(a=b),,options(y=z),
    temporary,external,,returns table<x int64>,,options(a=b),,,as select 1 as x
    temporary,external,,returns table<x int64>,,options(a=b),,,
    temporary,external,,returns table<x int64>,,,language testlang,options(y=z),as select 1 as x
    temporary,external,,returns table<x int64>,,,language testlang,options(y=z),
    temporary,external,,returns table<x int64>,,,language testlang,,as select 1 as x
    temporary,external,,returns table<x int64>,,,language testlang,,
    temporary,external,,returns table<x int64>,,,,options(y=z),as select 1 as x
    temporary,external,,returns table<x int64>,,,,options(y=z),
    temporary,external,,returns table<x int64>,,,,,as select 1 as x
    temporary,external,,returns table<x int64>,,,,,
    temporary,external,,,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    temporary,external,,,sql security invoker,options(a=b),language testlang,options(y=z),
    temporary,external,,,sql security invoker,options(a=b),language testlang,,as select 1 as x
    temporary,external,,,sql security invoker,options(a=b),language testlang,,
    temporary,external,,,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    temporary,external,,,sql security invoker,options(a=b),,options(y=z),
    temporary,external,,,sql security invoker,options(a=b),,,as select 1 as x
    temporary,external,,,sql security invoker,options(a=b),,,
    temporary,external,,,sql security invoker,,language testlang,options(y=z),as select 1 as x
    temporary,external,,,sql security invoker,,language testlang,options(y=z),
    temporary,external,,,sql security invoker,,language testlang,,as select 1 as x
    temporary,external,,,sql security invoker,,language testlang,,
    temporary,external,,,sql security invoker,,,options(y=z),as select 1 as x
    temporary,external,,,sql security invoker,,,options(y=z),
    temporary,external,,,sql security invoker,,,,as select 1 as x
    temporary,external,,,sql security invoker,,,,
    temporary,external,,,,options(a=b),language testlang,options(y=z),as select 1 as x
    temporary,external,,,,options(a=b),language testlang,options(y=z),
    temporary,external,,,,options(a=b),language testlang,,as select 1 as x
    temporary,external,,,,options(a=b),language testlang,,
    temporary,external,,,,options(a=b),,options(y=z),as select 1 as x
    temporary,external,,,,options(a=b),,options(y=z),
    temporary,external,,,,options(a=b),,,as select 1 as x
    temporary,external,,,,options(a=b),,,
    temporary,external,,,,,language testlang,options(y=z),as select 1 as x
    temporary,external,,,,,language testlang,options(y=z),
    temporary,external,,,,,language testlang,,as select 1 as x
    temporary,external,,,,,language testlang,,
    temporary,external,,,,,,options(y=z),as select 1 as x
    temporary,external,,,,,,options(y=z),
    temporary,external,,,,,,,as select 1 as x
    temporary,external,,,,,,,
    external,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    external,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),
    external,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,,as select 1 as x
    external,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,,
    external,if not exists,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    external,if not exists,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),
    external,if not exists,returns table<x int64>,sql security invoker,options(a=b),,,as select 1 as x
    external,if not exists,returns table<x int64>,sql security invoker,options(a=b),,,
    external,if not exists,returns table<x int64>,sql security invoker,,language testlang,options(y=z),as select 1 as x
    external,if not exists,returns table<x int64>,sql security invoker,,language testlang,options(y=z),
    external,if not exists,returns table<x int64>,sql security invoker,,language testlang,,as select 1 as x
    external,if not exists,returns table<x int64>,sql security invoker,,language testlang,,
    external,if not exists,returns table<x int64>,sql security invoker,,,options(y=z),as select 1 as x
    external,if not exists,returns table<x int64>,sql security invoker,,,options(y=z),
    external,if not exists,returns table<x int64>,sql security invoker,,,,as select 1 as x
    external,if not exists,returns table<x int64>,sql security invoker,,,,
    external,if not exists,returns table<x int64>,,options(a=b),language testlang,options(y=z),as select 1 as x
    external,if not exists,returns table<x int64>,,options(a=b),language testlang,options(y=z),
    external,if not exists,returns table<x int64>,,options(a=b),language testlang,,as select 1 as x
    external,if not exists,returns table<x int64>,,options(a=b),language testlang,,
    external,if not exists,returns table<x int64>,,options(a=b),,options(y=z),as select 1 as x
    external,if not exists,returns table<x int64>,,options(a=b),,options(y=z),
    external,if not exists,returns table<x int64>,,options(a=b),,,as select 1 as x
    external,if not exists,returns table<x int64>,,options(a=b),,,
    external,if not exists,returns table<x int64>,,,language testlang,options(y=z),as select 1 as x
    external,if not exists,returns table<x int64>,,,language testlang,options(y=z),
    external,if not exists,returns table<x int64>,,,language testlang,,as select 1 as x
    external,if not exists,returns table<x int64>,,,language testlang,,
    external,if not exists,returns table<x int64>,,,,options(y=z),as select 1 as x
    external,if not exists,returns table<x int64>,,,,options(y=z),
    external,if not exists,returns table<x int64>,,,,,as select 1 as x
    external,if not exists,returns table<x int64>,,,,,
    external,if not exists,,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    external,if not exists,,sql security invoker,options(a=b),language testlang,options(y=z),
    external,if not exists,,sql security invoker,options(a=b),language testlang,,as select 1 as x
    external,if not exists,,sql security invoker,options(a=b),language testlang,,
    external,if not exists,,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    external,if not exists,,sql security invoker,options(a=b),,options(y=z),
    external,if not exists,,sql security invoker,options(a=b),,,as select 1 as x
    external,if not exists,,sql security invoker,options(a=b),,,
    external,if not exists,,sql security invoker,,language testlang,options(y=z),as select 1 as x
    external,if not exists,,sql security invoker,,language testlang,options(y=z),
    external,if not exists,,sql security invoker,,language testlang,,as select 1 as x
    external,if not exists,,sql security invoker,,language testlang,,
    external,if not exists,,sql security invoker,,,options(y=z),as select 1 as x
    external,if not exists,,sql security invoker,,,options(y=z),
    external,if not exists,,sql security invoker,,,,as select 1 as x
    external,if not exists,,sql security invoker,,,,
    external,if not exists,,,options(a=b),language testlang,options(y=z),as select 1 as x
    external,if not exists,,,options(a=b),language testlang,options(y=z),
    external,if not exists,,,options(a=b),language testlang,,as select 1 as x
    external,if not exists,,,options(a=b),language testlang,,
    external,if not exists,,,options(a=b),,options(y=z),as select 1 as x
    external,if not exists,,,options(a=b),,options(y=z),
    external,if not exists,,,options(a=b),,,as select 1 as x
    external,if not exists,,,options(a=b),,,
    external,if not exists,,,,language testlang,options(y=z),as select 1 as x
    external,if not exists,,,,language testlang,options(y=z),
    external,if not exists,,,,language testlang,,as select 1 as x
    external,if not exists,,,,language testlang,,
    external,if not exists,,,,,options(y=z),as select 1 as x
    external,if not exists,,,,,options(y=z),
    external,if not exists,,,,,,as select 1 as x
    external,if not exists,,,,,,
    external,,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    external,,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),
    external,,returns table<x int64>,sql security invoker,options(a=b),language testlang,,as select 1 as x
    external,,returns table<x int64>,sql security invoker,options(a=b),language testlang,,
    external,,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    external,,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),
    external,,returns table<x int64>,sql security invoker,options(a=b),,,as select 1 as x
    external,,returns table<x int64>,sql security invoker,options(a=b),,,
    external,,returns table<x int64>,sql security invoker,,language testlang,options(y=z),as select 1 as x
    external,,returns table<x int64>,sql security invoker,,language testlang,options(y=z),
    external,,returns table<x int64>,sql security invoker,,language testlang,,as select 1 as x
    external,,returns table<x int64>,sql security invoker,,language testlang,,
    external,,returns table<x int64>,sql security invoker,,,options(y=z),as select 1 as x
    external,,returns table<x int64>,sql security invoker,,,options(y=z),
    external,,returns table<x int64>,sql security invoker,,,,as select 1 as x
    external,,returns table<x int64>,sql security invoker,,,,
    external,,returns table<x int64>,,options(a=b),language testlang,options(y=z),as select 1 as x
    external,,returns table<x int64>,,options(a=b),language testlang,options(y=z),
    external,,returns table<x int64>,,options(a=b),language testlang,,as select 1 as x
    external,,returns table<x int64>,,options(a=b),language testlang,,
    external,,returns table<x int64>,,options(a=b),,options(y=z),as select 1 as x
    external,,returns table<x int64>,,options(a=b),,options(y=z),
    external,,returns table<x int64>,,options(a=b),,,as select 1 as x
    external,,returns table<x int64>,,options(a=b),,,
    external,,returns table<x int64>,,,language testlang,options(y=z),as select 1 as x
    external,,returns table<x int64>,,,language testlang,options(y=z),
    external,,returns table<x int64>,,,language testlang,,as select 1 as x
    external,,returns table<x int64>,,,language testlang,,
    external,,returns table<x int64>,,,,options(y=z),as select 1 as x
    external,,returns table<x int64>,,,,options(y=z),
    external,,returns table<x int64>,,,,,as select 1 as x
    external,,returns table<x int64>,,,,,
    external,,,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    external,,,sql security invoker,options(a=b),language testlang,options(y=z),
    external,,,sql security invoker,options(a=b),language testlang,,as select 1 as x
    external,,,sql security invoker,options(a=b),language testlang,,
    external,,,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    external,,,sql security invoker,options(a=b),,options(y=z),
    external,,,sql security invoker,options(a=b),,,as select 1 as x
    external,,,sql security invoker,options(a=b),,,
    external,,,sql security invoker,,language testlang,options(y=z),as select 1 as x
    external,,,sql security invoker,,language testlang,options(y=z),
    external,,,sql security invoker,,language testlang,,as select 1 as x
    external,,,sql security invoker,,language testlang,,
    external,,,sql security invoker,,,options(y=z),as select 1 as x
    external,,,sql security invoker,,,options(y=z),
    external,,,sql security invoker,,,,as select 1 as x
    external,,,sql security invoker,,,,
    external,,,,options(a=b),language testlang,options(y=z),as select 1 as x
    external,,,,options(a=b),language testlang,options(y=z),
    external,,,,options(a=b),language testlang,,as select 1 as x
    external,,,,options(a=b),language testlang,,
    external,,,,options(a=b),,options(y=z),as select 1 as x
    external,,,,options(a=b),,options(y=z),
    external,,,,options(a=b),,,as select 1 as x
    external,,,,options(a=b),,,
    external,,,,,language testlang,options(y=z),as select 1 as x
    external,,,,,language testlang,options(y=z),
    external,,,,,language testlang,,as select 1 as x
    external,,,,,language testlang,,
    external,,,,,,options(y=z),as select 1 as x
    external,,,,,,options(y=z),
    external,,,,,,,as select 1 as x
    external,,,,,,,
--
ERROR: Syntax error: CREATE EXTERNAL TABLE FUNCTION is not supported [at 4:1]
external
^
--
ALTERNATION GROUPS:
    or replace,temporary,,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,temporary,,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),
    or replace,temporary,,if not exists,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    or replace,temporary,,if not exists,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),
    or replace,temporary,,if not exists,returns table<x int64>,,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,temporary,,if not exists,returns table<x int64>,,options(a=b),language testlang,options(y=z),
    or replace,temporary,,if not exists,returns table<x int64>,,options(a=b),,options(y=z),as select 1 as x
    or replace,temporary,,if not exists,returns table<x int64>,,options(a=b),,options(y=z),
    or replace,temporary,,if not exists,,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,temporary,,if not exists,,sql security invoker,options(a=b),language testlang,options(y=z),
    or replace,temporary,,if not exists,,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    or replace,temporary,,if not exists,,sql security invoker,options(a=b),,options(y=z),
    or replace,temporary,,if not exists,,,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,temporary,,if not exists,,,options(a=b),language testlang,options(y=z),
    or replace,temporary,,if not exists,,,options(a=b),,options(y=z),as select 1 as x
    or replace,temporary,,if not exists,,,options(a=b),,options(y=z),
    or replace,temporary,,,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,temporary,,,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),
    or replace,temporary,,,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    or replace,temporary,,,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),
    or replace,temporary,,,returns table<x int64>,,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,temporary,,,returns table<x int64>,,options(a=b),language testlang,options(y=z),
    or replace,temporary,,,returns table<x int64>,,options(a=b),,options(y=z),as select 1 as x
    or replace,temporary,,,returns table<x int64>,,options(a=b),,options(y=z),
    or replace,temporary,,,,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,temporary,,,,sql security invoker,options(a=b),language testlang,options(y=z),
    or replace,temporary,,,,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    or replace,temporary,,,,sql security invoker,options(a=b),,options(y=z),
    or replace,temporary,,,,,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,temporary,,,,,options(a=b),language testlang,options(y=z),
    or replace,temporary,,,,,options(a=b),,options(y=z),as select 1 as x
    or replace,temporary,,,,,options(a=b),,options(y=z),
    or replace,,,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,,,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),
    or replace,,,if not exists,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    or replace,,,if not exists,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),
    or replace,,,if not exists,returns table<x int64>,,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,,,if not exists,returns table<x int64>,,options(a=b),language testlang,options(y=z),
    or replace,,,if not exists,returns table<x int64>,,options(a=b),,options(y=z),as select 1 as x
    or replace,,,if not exists,returns table<x int64>,,options(a=b),,options(y=z),
    or replace,,,if not exists,,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,,,if not exists,,sql security invoker,options(a=b),language testlang,options(y=z),
    or replace,,,if not exists,,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    or replace,,,if not exists,,sql security invoker,options(a=b),,options(y=z),
    or replace,,,if not exists,,,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,,,if not exists,,,options(a=b),language testlang,options(y=z),
    or replace,,,if not exists,,,options(a=b),,options(y=z),as select 1 as x
    or replace,,,if not exists,,,options(a=b),,options(y=z),
    or replace,,,,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,,,,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),
    or replace,,,,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    or replace,,,,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),
    or replace,,,,returns table<x int64>,,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,,,,returns table<x int64>,,options(a=b),language testlang,options(y=z),
    or replace,,,,returns table<x int64>,,options(a=b),,options(y=z),as select 1 as x
    or replace,,,,returns table<x int64>,,options(a=b),,options(y=z),
    or replace,,,,,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,,,,,sql security invoker,options(a=b),language testlang,options(y=z),
    or replace,,,,,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    or replace,,,,,sql security invoker,options(a=b),,options(y=z),
    or replace,,,,,,options(a=b),language testlang,options(y=z),as select 1 as x
    or replace,,,,,,options(a=b),language testlang,options(y=z),
    or replace,,,,,,options(a=b),,options(y=z),as select 1 as x
    or replace,,,,,,options(a=b),,options(y=z),
    temporary,,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    temporary,,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),
    temporary,,if not exists,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    temporary,,if not exists,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),
    temporary,,if not exists,returns table<x int64>,,options(a=b),language testlang,options(y=z),as select 1 as x
    temporary,,if not exists,returns table<x int64>,,options(a=b),language testlang,options(y=z),
    temporary,,if not exists,returns table<x int64>,,options(a=b),,options(y=z),as select 1 as x
    temporary,,if not exists,returns table<x int64>,,options(a=b),,options(y=z),
    temporary,,if not exists,,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    temporary,,if not exists,,sql security invoker,options(a=b),language testlang,options(y=z),
    temporary,,if not exists,,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    temporary,,if not exists,,sql security invoker,options(a=b),,options(y=z),
    temporary,,if not exists,,,options(a=b),language testlang,options(y=z),as select 1 as x
    temporary,,if not exists,,,options(a=b),language testlang,options(y=z),
    temporary,,if not exists,,,options(a=b),,options(y=z),as select 1 as x
    temporary,,if not exists,,,options(a=b),,options(y=z),
    temporary,,,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    temporary,,,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),
    temporary,,,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    temporary,,,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),
    temporary,,,returns table<x int64>,,options(a=b),language testlang,options(y=z),as select 1 as x
    temporary,,,returns table<x int64>,,options(a=b),language testlang,options(y=z),
    temporary,,,returns table<x int64>,,options(a=b),,options(y=z),as select 1 as x
    temporary,,,returns table<x int64>,,options(a=b),,options(y=z),
    temporary,,,,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    temporary,,,,sql security invoker,options(a=b),language testlang,options(y=z),
    temporary,,,,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    temporary,,,,sql security invoker,options(a=b),,options(y=z),
    temporary,,,,,options(a=b),language testlang,options(y=z),as select 1 as x
    temporary,,,,,options(a=b),language testlang,options(y=z),
    temporary,,,,,options(a=b),,options(y=z),as select 1 as x
    temporary,,,,,options(a=b),,options(y=z),
    if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),
    if not exists,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    if not exists,returns table<x int64>,sql security invoker,options(a=b),,options(y=z),
    if not exists,returns table<x int64>,,options(a=b),language testlang,options(y=z),as select 1 as x
    if not exists,returns table<x int64>,,options(a=b),language testlang,options(y=z),
    if not exists,returns table<x int64>,,options(a=b),,options(y=z),as select 1 as x
    if not exists,returns table<x int64>,,options(a=b),,options(y=z),
    if not exists,,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    if not exists,,sql security invoker,options(a=b),language testlang,options(y=z),
    if not exists,,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    if not exists,,sql security invoker,options(a=b),,options(y=z),
    if not exists,,,options(a=b),language testlang,options(y=z),as select 1 as x
    if not exists,,,options(a=b),language testlang,options(y=z),
    if not exists,,,options(a=b),,options(y=z),as select 1 as x
    if not exists,,,options(a=b),,options(y=z),
    returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    returns table<x int64>,sql security invoker,options(a=b),language testlang,options(y=z),
    returns table<x int64>,sql security invoker,options(a=b),,options(y=z),as select 1 as x
    returns table<x int64>,sql security invoker,options(a=b),,options(y=z),
    returns table<x int64>,,options(a=b),language testlang,options(y=z),as select 1 as x
    returns table<x int64>,,options(a=b),language testlang,options(y=z),
    returns table<x int64>,,options(a=b),,options(y=z),as select 1 as x
    returns table<x int64>,,options(a=b),,options(y=z),
    sql security invoker,options(a=b),language testlang,options(y=z),as select 1 as x
    sql security invoker,options(a=b),language testlang,options(y=z),
    sql security invoker,options(a=b),,options(y=z),as select 1 as x
    sql security invoker,options(a=b),,options(y=z),
    options(a=b),language testlang,options(y=z),as select 1 as x
    options(a=b),language testlang,options(y=z),
    options(a=b),,options(y=z),as select 1 as x
    options(a=b),,options(y=z),
--
ERROR: Syntax error: Expected end of input but got keyword OPTIONS [at 12:1]
options(y=z)
^
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-163] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [122-127] [(a=b)]
    OptionsEntry [123-126] [a=b]
      Identifier(a) [123-124] [a]
      PathExpression [125-126] [b]
        Identifier(b) [125-126] [b]
  Identifier(testlang) [137-145] [testlang]
  Query [150-163] [select 1 as x]
    Select [150-163] [select 1 as x]
      SelectList [157-163] [1 as x]
        SelectColumn [157-163] [1 as x]
          IntLiteral(1) [157-158] [1]
          Alias [159-163] [as x]
            Identifier(x) [162-163] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-145] [create or...language testlang]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [122-127] [(a=b)]
    OptionsEntry [123-126] [a=b]
      Identifier(a) [123-124] [a]
      PathExpression [125-126] [b]
        Identifier(b) [125-126] [b]
  Identifier(testlang) [137-145] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,sql security invoker,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-146] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [122-127] [(a=b)]
    OptionsEntry [123-126] [a=b]
      Identifier(a) [123-124] [a]
      PathExpression [125-126] [b]
        Identifier(b) [125-126] [b]
  Query [133-146] [select 1 as x]
    Select [133-146] [select 1 as x]
      SelectList [140-146] [1 as x]
        SelectColumn [140-146] [1 as x]
          IntLiteral(1) [140-141] [1]
          Alias [142-146] [as x]
            Identifier(x) [145-146] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,sql security invoker,options(a=b),,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-127] [create or...options(a=b)]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [122-127] [(a=b)]
    OptionsEntry [123-126] [a=b]
      Identifier(a) [123-124] [a]
      PathExpression [125-126] [b]
        Identifier(b) [125-126] [b]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,sql security invoker,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-163] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [141-146] [(y=z)]
    OptionsEntry [142-145] [y=z]
      Identifier(y) [142-143] [y]
      PathExpression [144-145] [z]
        Identifier(z) [144-145] [z]
  Identifier(testlang) [125-133] [testlang]
  Query [150-163] [select 1 as x]
    Select [150-163] [select 1 as x]
      SelectList [157-163] [1 as x]
        SelectColumn [157-163] [1 as x]
          IntLiteral(1) [157-158] [1]
          Alias [159-163] [as x]
            Identifier(x) [162-163] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,sql security invoker,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-146] [create or...options(y=z)]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [141-146] [(y=z)]
    OptionsEntry [142-145] [y=z]
      Identifier(y) [142-143] [y]
      PathExpression [144-145] [z]
        Identifier(z) [144-145] [z]
  Identifier(testlang) [125-133] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,sql security invoker,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-151] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  Identifier(testlang) [125-133] [testlang]
  Query [138-151] [select 1 as x]
    Select [138-151] [select 1 as x]
      SelectList [145-151] [1 as x]
        SelectColumn [145-151] [1 as x]
          IntLiteral(1) [145-146] [1]
          Alias [147-151] [as x]
            Identifier(x) [150-151] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,sql security invoker,,language testlang,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-133] [create or...language testlang]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  Identifier(testlang) [125-133] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,sql security invoker,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-146] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [124-129] [(y=z)]
    OptionsEntry [125-128] [y=z]
      Identifier(y) [125-126] [y]
      PathExpression [127-128] [z]
        Identifier(z) [127-128] [z]
  Query [133-146] [select 1 as x]
    Select [133-146] [select 1 as x]
      SelectList [140-146] [1 as x]
        SelectColumn [140-146] [1 as x]
          IntLiteral(1) [140-141] [1]
          Alias [142-146] [as x]
            Identifier(x) [145-146] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,sql security invoker,,,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-129] [create or...options(y=z)]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [124-129] [(y=z)]
    OptionsEntry [125-128] [y=z]
      Identifier(y) [125-126] [y]
      PathExpression [127-128] [z]
        Identifier(z) [127-128] [z]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,sql security invoker,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-134] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  Query [121-134] [select 1 as x]
    Select [121-134] [select 1 as x]
      SelectList [128-134] [1 as x]
        SelectColumn [128-134] [1 as x]
          IntLiteral(1) [128-129] [1]
          Alias [130-134] [as x]
            Identifier(x) [133-134] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,sql security invoker,,,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-114] [create or...security invoker]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-143] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [102-107] [(a=b)]
    OptionsEntry [103-106] [a=b]
      Identifier(a) [103-104] [a]
      PathExpression [105-106] [b]
        Identifier(b) [105-106] [b]
  Identifier(testlang) [117-125] [testlang]
  Query [130-143] [select 1 as x]
    Select [130-143] [select 1 as x]
      SelectList [137-143] [1 as x]
        SelectColumn [137-143] [1 as x]
          IntLiteral(1) [137-138] [1]
          Alias [139-143] [as x]
            Identifier(x) [142-143] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-125] [create or...language testlang]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [102-107] [(a=b)]
    OptionsEntry [103-106] [a=b]
      Identifier(a) [103-104] [a]
      PathExpression [105-106] [b]
        Identifier(b) [105-106] [b]
  Identifier(testlang) [117-125] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-126] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [102-107] [(a=b)]
    OptionsEntry [103-106] [a=b]
      Identifier(a) [103-104] [a]
      PathExpression [105-106] [b]
        Identifier(b) [105-106] [b]
  Query [113-126] [select 1 as x]
    Select [113-126] [select 1 as x]
      SelectList [120-126] [1 as x]
        SelectColumn [120-126] [1 as x]
          IntLiteral(1) [120-121] [1]
          Alias [122-126] [as x]
            Identifier(x) [125-126] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,options(a=b),,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-107] [create or...options(a=b)]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [102-107] [(a=b)]
    OptionsEntry [103-106] [a=b]
      Identifier(a) [103-104] [a]
      PathExpression [105-106] [b]
        Identifier(b) [105-106] [b]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-143] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [121-126] [(y=z)]
    OptionsEntry [122-125] [y=z]
      Identifier(y) [122-123] [y]
      PathExpression [124-125] [z]
        Identifier(z) [124-125] [z]
  Identifier(testlang) [105-113] [testlang]
  Query [130-143] [select 1 as x]
    Select [130-143] [select 1 as x]
      SelectList [137-143] [1 as x]
        SelectColumn [137-143] [1 as x]
          IntLiteral(1) [137-138] [1]
          Alias [139-143] [as x]
            Identifier(x) [142-143] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-126] [create or...options(y=z)]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [121-126] [(y=z)]
    OptionsEntry [122-125] [y=z]
      Identifier(y) [122-123] [y]
      PathExpression [124-125] [z]
        Identifier(z) [124-125] [z]
  Identifier(testlang) [105-113] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-131] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  Identifier(testlang) [105-113] [testlang]
  Query [118-131] [select 1 as x]
    Select [118-131] [select 1 as x]
      SelectList [125-131] [1 as x]
        SelectColumn [125-131] [1 as x]
          IntLiteral(1) [125-126] [1]
          Alias [127-131] [as x]
            Identifier(x) [130-131] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,,language testlang,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-113] [create or...language testlang]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  Identifier(testlang) [105-113] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-126] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [104-109] [(y=z)]
    OptionsEntry [105-108] [y=z]
      Identifier(y) [105-106] [y]
      PathExpression [107-108] [z]
        Identifier(z) [107-108] [z]
  Query [113-126] [select 1 as x]
    Select [113-126] [select 1 as x]
      SelectList [120-126] [1 as x]
        SelectColumn [120-126] [1 as x]
          IntLiteral(1) [120-121] [1]
          Alias [122-126] [as x]
            Identifier(x) [125-126] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,,,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-109] [create or...options(y=z)]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  OptionsList [104-109] [(y=z)]
    OptionsEntry [105-108] [y=z]
      Identifier(y) [105-106] [y]
      PathExpression [107-108] [z]
        Identifier(z) [107-108] [z]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-114] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
  Query [101-114] [select 1 as x]
    Select [101-114] [select 1 as x]
      SelectList [108-114] [1 as x]
        SelectColumn [108-114] [1 as x]
          IntLiteral(1) [108-109] [1]
          Alias [110-114] [as x]
            Identifier(x) [113-114] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,returns table<x int64>,,,,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-93] [create or...table<x int64>]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  TVFSchema [79-93] [table<x int64>]
    TVFSchemaColumn [85-92] [x int64]
      Identifier(x) [85-86] [x]
      SimpleType [87-92] [int64]
        PathExpression [87-92] [int64]
          Identifier(int64) [87-92] [int64]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,sql security invoker,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-141] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [100-105] [(a=b)]
    OptionsEntry [101-104] [a=b]
      Identifier(a) [101-102] [a]
      PathExpression [103-104] [b]
        Identifier(b) [103-104] [b]
  Identifier(testlang) [115-123] [testlang]
  Query [128-141] [select 1 as x]
    Select [128-141] [select 1 as x]
      SelectList [135-141] [1 as x]
        SelectColumn [135-141] [1 as x]
          IntLiteral(1) [135-136] [1]
          Alias [137-141] [as x]
            Identifier(x) [140-141] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,sql security invoker,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-123] [create or...language testlang]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [100-105] [(a=b)]
    OptionsEntry [101-104] [a=b]
      Identifier(a) [101-102] [a]
      PathExpression [103-104] [b]
        Identifier(b) [103-104] [b]
  Identifier(testlang) [115-123] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,sql security invoker,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-124] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [100-105] [(a=b)]
    OptionsEntry [101-104] [a=b]
      Identifier(a) [101-102] [a]
      PathExpression [103-104] [b]
        Identifier(b) [103-104] [b]
  Query [111-124] [select 1 as x]
    Select [111-124] [select 1 as x]
      SelectList [118-124] [1 as x]
        SelectColumn [118-124] [1 as x]
          IntLiteral(1) [118-119] [1]
          Alias [120-124] [as x]
            Identifier(x) [123-124] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,sql security invoker,options(a=b),,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-105] [create or...options(a=b)]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [100-105] [(a=b)]
    OptionsEntry [101-104] [a=b]
      Identifier(a) [101-102] [a]
      PathExpression [103-104] [b]
        Identifier(b) [103-104] [b]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,sql security invoker,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-141] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [119-124] [(y=z)]
    OptionsEntry [120-123] [y=z]
      Identifier(y) [120-121] [y]
      PathExpression [122-123] [z]
        Identifier(z) [122-123] [z]
  Identifier(testlang) [103-111] [testlang]
  Query [128-141] [select 1 as x]
    Select [128-141] [select 1 as x]
      SelectList [135-141] [1 as x]
        SelectColumn [135-141] [1 as x]
          IntLiteral(1) [135-136] [1]
          Alias [137-141] [as x]
            Identifier(x) [140-141] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,sql security invoker,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-124] [create or...options(y=z)]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [119-124] [(y=z)]
    OptionsEntry [120-123] [y=z]
      Identifier(y) [120-121] [y]
      PathExpression [122-123] [z]
        Identifier(z) [122-123] [z]
  Identifier(testlang) [103-111] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,sql security invoker,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-129] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  Identifier(testlang) [103-111] [testlang]
  Query [116-129] [select 1 as x]
    Select [116-129] [select 1 as x]
      SelectList [123-129] [1 as x]
        SelectColumn [123-129] [1 as x]
          IntLiteral(1) [123-124] [1]
          Alias [125-129] [as x]
            Identifier(x) [128-129] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,sql security invoker,,language testlang,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-111] [create or...language testlang]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  Identifier(testlang) [103-111] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,sql security invoker,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-124] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [102-107] [(y=z)]
    OptionsEntry [103-106] [y=z]
      Identifier(y) [103-104] [y]
      PathExpression [105-106] [z]
        Identifier(z) [105-106] [z]
  Query [111-124] [select 1 as x]
    Select [111-124] [select 1 as x]
      SelectList [118-124] [1 as x]
        SelectColumn [118-124] [1 as x]
          IntLiteral(1) [118-119] [1]
          Alias [120-124] [as x]
            Identifier(x) [123-124] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,sql security invoker,,,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-107] [create or...options(y=z)]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [102-107] [(y=z)]
    OptionsEntry [103-106] [y=z]
      Identifier(y) [103-104] [y]
      PathExpression [105-106] [z]
        Identifier(z) [105-106] [z]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,sql security invoker,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-112] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  Query [99-112] [select 1 as x]
    Select [99-112] [select 1 as x]
      SelectList [106-112] [1 as x]
        SelectColumn [106-112] [1 as x]
          IntLiteral(1) [106-107] [1]
          Alias [108-112] [as x]
            Identifier(x) [111-112] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,sql security invoker,,,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-92] [create or...security invoker]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-121] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [80-85] [(a=b)]
    OptionsEntry [81-84] [a=b]
      Identifier(a) [81-82] [a]
      PathExpression [83-84] [b]
        Identifier(b) [83-84] [b]
  Identifier(testlang) [95-103] [testlang]
  Query [108-121] [select 1 as x]
    Select [108-121] [select 1 as x]
      SelectList [115-121] [1 as x]
        SelectColumn [115-121] [1 as x]
          IntLiteral(1) [115-116] [1]
          Alias [117-121] [as x]
            Identifier(x) [120-121] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-103] [create or...language testlang]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [80-85] [(a=b)]
    OptionsEntry [81-84] [a=b]
      Identifier(a) [81-82] [a]
      PathExpression [83-84] [b]
        Identifier(b) [83-84] [b]
  Identifier(testlang) [95-103] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-104] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [80-85] [(a=b)]
    OptionsEntry [81-84] [a=b]
      Identifier(a) [81-82] [a]
      PathExpression [83-84] [b]
        Identifier(b) [83-84] [b]
  Query [91-104] [select 1 as x]
    Select [91-104] [select 1 as x]
      SelectList [98-104] [1 as x]
        SelectColumn [98-104] [1 as x]
          IntLiteral(1) [98-99] [1]
          Alias [100-104] [as x]
            Identifier(x) [103-104] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,options(a=b),,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-85] [create or...options(a=b)]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [80-85] [(a=b)]
    OptionsEntry [81-84] [a=b]
      Identifier(a) [81-82] [a]
      PathExpression [83-84] [b]
        Identifier(b) [83-84] [b]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-121] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [99-104] [(y=z)]
    OptionsEntry [100-103] [y=z]
      Identifier(y) [100-101] [y]
      PathExpression [102-103] [z]
        Identifier(z) [102-103] [z]
  Identifier(testlang) [83-91] [testlang]
  Query [108-121] [select 1 as x]
    Select [108-121] [select 1 as x]
      SelectList [115-121] [1 as x]
        SelectColumn [115-121] [1 as x]
          IntLiteral(1) [115-116] [1]
          Alias [117-121] [as x]
            Identifier(x) [120-121] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-104] [create or...options(y=z)]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [99-104] [(y=z)]
    OptionsEntry [100-103] [y=z]
      Identifier(y) [100-101] [y]
      PathExpression [102-103] [z]
        Identifier(z) [102-103] [z]
  Identifier(testlang) [83-91] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-109] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  Identifier(testlang) [83-91] [testlang]
  Query [96-109] [select 1 as x]
    Select [96-109] [select 1 as x]
      SelectList [103-109] [1 as x]
        SelectColumn [103-109] [1 as x]
          IntLiteral(1) [103-104] [1]
          Alias [105-109] [as x]
            Identifier(x) [108-109] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,,language testlang,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-91] [create or...language testlang]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  Identifier(testlang) [83-91] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-104] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [82-87] [(y=z)]
    OptionsEntry [83-86] [y=z]
      Identifier(y) [83-84] [y]
      PathExpression [85-86] [z]
        Identifier(z) [85-86] [z]
  Query [91-104] [select 1 as x]
    Select [91-104] [select 1 as x]
      SelectList [98-104] [1 as x]
        SelectColumn [98-104] [1 as x]
          IntLiteral(1) [98-99] [1]
          Alias [100-104] [as x]
            Identifier(x) [103-104] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,,,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-87] [create or...options(y=z)]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  OptionsList [82-87] [(y=z)]
    OptionsEntry [83-86] [y=z]
      Identifier(y) [83-84] [y]
      PathExpression [85-86] [z]
        Identifier(z) [85-86] [z]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-92] [create or...select 1 as x]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
  Query [79-92] [select 1 as x]
    Select [79-92] [select 1 as x]
      SelectList [86-92] [1 as x]
        SelectColumn [86-92] [1 as x]
          IntLiteral(1) [86-87] [1]
          Alias [88-92] [as x]
            Identifier(x) [91-92] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,if not exists,,,,,,
--
CreateTableFunctionStatement(is_temp, is_or_replace, is_if_not_exists) [0-70] [create or...myfunction()]
  FunctionDeclaration [58-70] [myfunction()]
    PathExpression [58-68] [myfunction]
      Identifier(myfunction) [58-68] [myfunction]
    FunctionParameters [68-70] [()]
--
CREATE OR REPLACE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,sql security invoker,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-150] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [109-114] [(a=b)]
    OptionsEntry [110-113] [a=b]
      Identifier(a) [110-111] [a]
      PathExpression [112-113] [b]
        Identifier(b) [112-113] [b]
  Identifier(testlang) [124-132] [testlang]
  Query [137-150] [select 1 as x]
    Select [137-150] [select 1 as x]
      SelectList [144-150] [1 as x]
        SelectColumn [144-150] [1 as x]
          IntLiteral(1) [144-145] [1]
          Alias [146-150] [as x]
            Identifier(x) [149-150] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,sql security invoker,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-132] [create or...language testlang]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [109-114] [(a=b)]
    OptionsEntry [110-113] [a=b]
      Identifier(a) [110-111] [a]
      PathExpression [112-113] [b]
        Identifier(b) [112-113] [b]
  Identifier(testlang) [124-132] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,sql security invoker,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-133] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [109-114] [(a=b)]
    OptionsEntry [110-113] [a=b]
      Identifier(a) [110-111] [a]
      PathExpression [112-113] [b]
        Identifier(b) [112-113] [b]
  Query [120-133] [select 1 as x]
    Select [120-133] [select 1 as x]
      SelectList [127-133] [1 as x]
        SelectColumn [127-133] [1 as x]
          IntLiteral(1) [127-128] [1]
          Alias [129-133] [as x]
            Identifier(x) [132-133] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,sql security invoker,options(a=b),,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-114] [create or...options(a=b)]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [109-114] [(a=b)]
    OptionsEntry [110-113] [a=b]
      Identifier(a) [110-111] [a]
      PathExpression [112-113] [b]
        Identifier(b) [112-113] [b]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,sql security invoker,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-150] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [128-133] [(y=z)]
    OptionsEntry [129-132] [y=z]
      Identifier(y) [129-130] [y]
      PathExpression [131-132] [z]
        Identifier(z) [131-132] [z]
  Identifier(testlang) [112-120] [testlang]
  Query [137-150] [select 1 as x]
    Select [137-150] [select 1 as x]
      SelectList [144-150] [1 as x]
        SelectColumn [144-150] [1 as x]
          IntLiteral(1) [144-145] [1]
          Alias [146-150] [as x]
            Identifier(x) [149-150] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,sql security invoker,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-133] [create or...options(y=z)]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [128-133] [(y=z)]
    OptionsEntry [129-132] [y=z]
      Identifier(y) [129-130] [y]
      PathExpression [131-132] [z]
        Identifier(z) [131-132] [z]
  Identifier(testlang) [112-120] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,sql security invoker,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-138] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  Identifier(testlang) [112-120] [testlang]
  Query [125-138] [select 1 as x]
    Select [125-138] [select 1 as x]
      SelectList [132-138] [1 as x]
        SelectColumn [132-138] [1 as x]
          IntLiteral(1) [132-133] [1]
          Alias [134-138] [as x]
            Identifier(x) [137-138] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,sql security invoker,,language testlang,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-120] [create or...language testlang]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  Identifier(testlang) [112-120] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,sql security invoker,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-133] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [111-116] [(y=z)]
    OptionsEntry [112-115] [y=z]
      Identifier(y) [112-113] [y]
      PathExpression [114-115] [z]
        Identifier(z) [114-115] [z]
  Query [120-133] [select 1 as x]
    Select [120-133] [select 1 as x]
      SelectList [127-133] [1 as x]
        SelectColumn [127-133] [1 as x]
          IntLiteral(1) [127-128] [1]
          Alias [129-133] [as x]
            Identifier(x) [132-133] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,sql security invoker,,,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-116] [create or...options(y=z)]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [111-116] [(y=z)]
    OptionsEntry [112-115] [y=z]
      Identifier(y) [112-113] [y]
      PathExpression [114-115] [z]
        Identifier(z) [114-115] [z]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,sql security invoker,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-121] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  Query [108-121] [select 1 as x]
    Select [108-121] [select 1 as x]
      SelectList [115-121] [1 as x]
        SelectColumn [115-121] [1 as x]
          IntLiteral(1) [115-116] [1]
          Alias [117-121] [as x]
            Identifier(x) [120-121] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,sql security invoker,,,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-101] [create or...security invoker]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-130] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [89-94] [(a=b)]
    OptionsEntry [90-93] [a=b]
      Identifier(a) [90-91] [a]
      PathExpression [92-93] [b]
        Identifier(b) [92-93] [b]
  Identifier(testlang) [104-112] [testlang]
  Query [117-130] [select 1 as x]
    Select [117-130] [select 1 as x]
      SelectList [124-130] [1 as x]
        SelectColumn [124-130] [1 as x]
          IntLiteral(1) [124-125] [1]
          Alias [126-130] [as x]
            Identifier(x) [129-130] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-112] [create or...language testlang]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [89-94] [(a=b)]
    OptionsEntry [90-93] [a=b]
      Identifier(a) [90-91] [a]
      PathExpression [92-93] [b]
        Identifier(b) [92-93] [b]
  Identifier(testlang) [104-112] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-113] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [89-94] [(a=b)]
    OptionsEntry [90-93] [a=b]
      Identifier(a) [90-91] [a]
      PathExpression [92-93] [b]
        Identifier(b) [92-93] [b]
  Query [100-113] [select 1 as x]
    Select [100-113] [select 1 as x]
      SelectList [107-113] [1 as x]
        SelectColumn [107-113] [1 as x]
          IntLiteral(1) [107-108] [1]
          Alias [109-113] [as x]
            Identifier(x) [112-113] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,options(a=b),,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-94] [create or...options(a=b)]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [89-94] [(a=b)]
    OptionsEntry [90-93] [a=b]
      Identifier(a) [90-91] [a]
      PathExpression [92-93] [b]
        Identifier(b) [92-93] [b]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-130] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [108-113] [(y=z)]
    OptionsEntry [109-112] [y=z]
      Identifier(y) [109-110] [y]
      PathExpression [111-112] [z]
        Identifier(z) [111-112] [z]
  Identifier(testlang) [92-100] [testlang]
  Query [117-130] [select 1 as x]
    Select [117-130] [select 1 as x]
      SelectList [124-130] [1 as x]
        SelectColumn [124-130] [1 as x]
          IntLiteral(1) [124-125] [1]
          Alias [126-130] [as x]
            Identifier(x) [129-130] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-113] [create or...options(y=z)]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [108-113] [(y=z)]
    OptionsEntry [109-112] [y=z]
      Identifier(y) [109-110] [y]
      PathExpression [111-112] [z]
        Identifier(z) [111-112] [z]
  Identifier(testlang) [92-100] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-118] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  Identifier(testlang) [92-100] [testlang]
  Query [105-118] [select 1 as x]
    Select [105-118] [select 1 as x]
      SelectList [112-118] [1 as x]
        SelectColumn [112-118] [1 as x]
          IntLiteral(1) [112-113] [1]
          Alias [114-118] [as x]
            Identifier(x) [117-118] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,,language testlang,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-100] [create or...language testlang]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  Identifier(testlang) [92-100] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-113] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [91-96] [(y=z)]
    OptionsEntry [92-95] [y=z]
      Identifier(y) [92-93] [y]
      PathExpression [94-95] [z]
        Identifier(z) [94-95] [z]
  Query [100-113] [select 1 as x]
    Select [100-113] [select 1 as x]
      SelectList [107-113] [1 as x]
        SelectColumn [107-113] [1 as x]
          IntLiteral(1) [107-108] [1]
          Alias [109-113] [as x]
            Identifier(x) [112-113] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,,,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-96] [create or...options(y=z)]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  OptionsList [91-96] [(y=z)]
    OptionsEntry [92-95] [y=z]
      Identifier(y) [92-93] [y]
      PathExpression [94-95] [z]
        Identifier(z) [94-95] [z]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-101] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
  Query [88-101] [select 1 as x]
    Select [88-101] [select 1 as x]
      SelectList [95-101] [1 as x]
        SelectColumn [95-101] [1 as x]
          IntLiteral(1) [95-96] [1]
          Alias [97-101] [as x]
            Identifier(x) [100-101] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,returns table<x int64>,,,,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-80] [create or...table<x int64>]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  TVFSchema [66-80] [table<x int64>]
    TVFSchemaColumn [72-79] [x int64]
      Identifier(x) [72-73] [x]
      SimpleType [74-79] [int64]
        PathExpression [74-79] [int64]
          Identifier(int64) [74-79] [int64]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: or replace,temporary,,,,sql security invoker,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-128] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [87-92] [(a=b)]
    OptionsEntry [88-91] [a=b]
      Identifier(a) [88-89] [a]
      PathExpression [90-91] [b]
        Identifier(b) [90-91] [b]
  Identifier(testlang) [102-110] [testlang]
  Query [115-128] [select 1 as x]
    Select [115-128] [select 1 as x]
      SelectList [122-128] [1 as x]
        SelectColumn [122-128] [1 as x]
          IntLiteral(1) [122-123] [1]
          Alias [124-128] [as x]
            Identifier(x) [127-128] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,sql security invoker,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-110] [create or...language testlang]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [87-92] [(a=b)]
    OptionsEntry [88-91] [a=b]
      Identifier(a) [88-89] [a]
      PathExpression [90-91] [b]
        Identifier(b) [90-91] [b]
  Identifier(testlang) [102-110] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,temporary,,,,sql security invoker,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-111] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [87-92] [(a=b)]
    OptionsEntry [88-91] [a=b]
      Identifier(a) [88-89] [a]
      PathExpression [90-91] [b]
        Identifier(b) [90-91] [b]
  Query [98-111] [select 1 as x]
    Select [98-111] [select 1 as x]
      SelectList [105-111] [1 as x]
        SelectColumn [105-111] [1 as x]
          IntLiteral(1) [105-106] [1]
          Alias [107-111] [as x]
            Identifier(x) [110-111] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,sql security invoker,options(a=b),,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-92] [create or...options(a=b)]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [87-92] [(a=b)]
    OptionsEntry [88-91] [a=b]
      Identifier(a) [88-89] [a]
      PathExpression [90-91] [b]
        Identifier(b) [90-91] [b]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,temporary,,,,sql security invoker,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-128] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [106-111] [(y=z)]
    OptionsEntry [107-110] [y=z]
      Identifier(y) [107-108] [y]
      PathExpression [109-110] [z]
        Identifier(z) [109-110] [z]
  Identifier(testlang) [90-98] [testlang]
  Query [115-128] [select 1 as x]
    Select [115-128] [select 1 as x]
      SelectList [122-128] [1 as x]
        SelectColumn [122-128] [1 as x]
          IntLiteral(1) [122-123] [1]
          Alias [124-128] [as x]
            Identifier(x) [127-128] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,sql security invoker,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-111] [create or...options(y=z)]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [106-111] [(y=z)]
    OptionsEntry [107-110] [y=z]
      Identifier(y) [107-108] [y]
      PathExpression [109-110] [z]
        Identifier(z) [109-110] [z]
  Identifier(testlang) [90-98] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,temporary,,,,sql security invoker,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-116] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  Identifier(testlang) [90-98] [testlang]
  Query [103-116] [select 1 as x]
    Select [103-116] [select 1 as x]
      SelectList [110-116] [1 as x]
        SelectColumn [110-116] [1 as x]
          IntLiteral(1) [110-111] [1]
          Alias [112-116] [as x]
            Identifier(x) [115-116] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,sql security invoker,,language testlang,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-98] [create or...language testlang]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  Identifier(testlang) [90-98] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,,,sql security invoker,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-111] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [89-94] [(y=z)]
    OptionsEntry [90-93] [y=z]
      Identifier(y) [90-91] [y]
      PathExpression [92-93] [z]
        Identifier(z) [92-93] [z]
  Query [98-111] [select 1 as x]
    Select [98-111] [select 1 as x]
      SelectList [105-111] [1 as x]
        SelectColumn [105-111] [1 as x]
          IntLiteral(1) [105-106] [1]
          Alias [107-111] [as x]
            Identifier(x) [110-111] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,sql security invoker,,,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-94] [create or...options(y=z)]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [89-94] [(y=z)]
    OptionsEntry [90-93] [y=z]
      Identifier(y) [90-91] [y]
      PathExpression [92-93] [z]
        Identifier(z) [92-93] [z]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,temporary,,,,sql security invoker,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-99] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  Query [86-99] [select 1 as x]
    Select [86-99] [select 1 as x]
      SelectList [93-99] [1 as x]
        SelectColumn [93-99] [1 as x]
          IntLiteral(1) [93-94] [1]
          Alias [95-99] [as x]
            Identifier(x) [98-99] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,sql security invoker,,,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-79] [create or...security invoker]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER
--
ALTERNATION GROUP: or replace,temporary,,,,,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-108] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [67-72] [(a=b)]
    OptionsEntry [68-71] [a=b]
      Identifier(a) [68-69] [a]
      PathExpression [70-71] [b]
        Identifier(b) [70-71] [b]
  Identifier(testlang) [82-90] [testlang]
  Query [95-108] [select 1 as x]
    Select [95-108] [select 1 as x]
      SelectList [102-108] [1 as x]
        SelectColumn [102-108] [1 as x]
          IntLiteral(1) [102-103] [1]
          Alias [104-108] [as x]
            Identifier(x) [107-108] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-90] [create or...language testlang]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [67-72] [(a=b)]
    OptionsEntry [68-71] [a=b]
      Identifier(a) [68-69] [a]
      PathExpression [70-71] [b]
        Identifier(b) [70-71] [b]
  Identifier(testlang) [82-90] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,temporary,,,,,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-91] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [67-72] [(a=b)]
    OptionsEntry [68-71] [a=b]
      Identifier(a) [68-69] [a]
      PathExpression [70-71] [b]
        Identifier(b) [70-71] [b]
  Query [78-91] [select 1 as x]
    Select [78-91] [select 1 as x]
      SelectList [85-91] [1 as x]
        SelectColumn [85-91] [1 as x]
          IntLiteral(1) [85-86] [1]
          Alias [87-91] [as x]
            Identifier(x) [90-91] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,,options(a=b),,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-72] [create or...options(a=b)]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [67-72] [(a=b)]
    OptionsEntry [68-71] [a=b]
      Identifier(a) [68-69] [a]
      PathExpression [70-71] [b]
        Identifier(b) [70-71] [b]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,temporary,,,,,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-108] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [86-91] [(y=z)]
    OptionsEntry [87-90] [y=z]
      Identifier(y) [87-88] [y]
      PathExpression [89-90] [z]
        Identifier(z) [89-90] [z]
  Identifier(testlang) [70-78] [testlang]
  Query [95-108] [select 1 as x]
    Select [95-108] [select 1 as x]
      SelectList [102-108] [1 as x]
        SelectColumn [102-108] [1 as x]
          IntLiteral(1) [102-103] [1]
          Alias [104-108] [as x]
            Identifier(x) [107-108] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-91] [create or...options(y=z)]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [86-91] [(y=z)]
    OptionsEntry [87-90] [y=z]
      Identifier(y) [87-88] [y]
      PathExpression [89-90] [z]
        Identifier(z) [89-90] [z]
  Identifier(testlang) [70-78] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,temporary,,,,,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-96] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  Identifier(testlang) [70-78] [testlang]
  Query [83-96] [select 1 as x]
    Select [83-96] [select 1 as x]
      SelectList [90-96] [1 as x]
        SelectColumn [90-96] [1 as x]
          IntLiteral(1) [90-91] [1]
          Alias [92-96] [as x]
            Identifier(x) [95-96] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,,,language testlang,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-78] [create or...language testlang]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  Identifier(testlang) [70-78] [testlang]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: or replace,temporary,,,,,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-91] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [69-74] [(y=z)]
    OptionsEntry [70-73] [y=z]
      Identifier(y) [70-71] [y]
      PathExpression [72-73] [z]
        Identifier(z) [72-73] [z]
  Query [78-91] [select 1 as x]
    Select [78-91] [select 1 as x]
      SelectList [85-91] [1 as x]
        SelectColumn [85-91] [1 as x]
          IntLiteral(1) [85-86] [1]
          Alias [87-91] [as x]
            Identifier(x) [90-91] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,,,,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-74] [create or...options(y=z)]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  OptionsList [69-74] [(y=z)]
    OptionsEntry [70-73] [y=z]
      Identifier(y) [70-71] [y]
      PathExpression [72-73] [z]
        Identifier(z) [72-73] [z]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,temporary,,,,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-79] [create or...select 1 as x]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
  Query [66-79] [select 1 as x]
    Select [66-79] [select 1 as x]
      SelectList [73-79] [1 as x]
        SelectColumn [73-79] [1 as x]
          IntLiteral(1) [73-74] [1]
          Alias [75-79] [as x]
            Identifier(x) [78-79] [x]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,temporary,,,,,,,,
--
CreateTableFunctionStatement(is_temp, is_or_replace) [0-57] [create or...myfunction()]
  FunctionDeclaration [45-57] [myfunction()]
    PathExpression [45-55] [myfunction]
      Identifier(myfunction) [45-55] [myfunction]
    FunctionParameters [55-57] [()]
--
CREATE OR REPLACE TEMP TABLE FUNCTION myfunction()
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-154] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [113-118] [(a=b)]
    OptionsEntry [114-117] [a=b]
      Identifier(a) [114-115] [a]
      PathExpression [116-117] [b]
        Identifier(b) [116-117] [b]
  Identifier(testlang) [128-136] [testlang]
  Query [141-154] [select 1 as x]
    Select [141-154] [select 1 as x]
      SelectList [148-154] [1 as x]
        SelectColumn [148-154] [1 as x]
          IntLiteral(1) [148-149] [1]
          Alias [150-154] [as x]
            Identifier(x) [153-154] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-136] [create or...language testlang]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [113-118] [(a=b)]
    OptionsEntry [114-117] [a=b]
      Identifier(a) [114-115] [a]
      PathExpression [116-117] [b]
        Identifier(b) [116-117] [b]
  Identifier(testlang) [128-136] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,sql security invoker,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-137] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [113-118] [(a=b)]
    OptionsEntry [114-117] [a=b]
      Identifier(a) [114-115] [a]
      PathExpression [116-117] [b]
        Identifier(b) [116-117] [b]
  Query [124-137] [select 1 as x]
    Select [124-137] [select 1 as x]
      SelectList [131-137] [1 as x]
        SelectColumn [131-137] [1 as x]
          IntLiteral(1) [131-132] [1]
          Alias [133-137] [as x]
            Identifier(x) [136-137] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,sql security invoker,options(a=b),,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-118] [create or...options(a=b)]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [113-118] [(a=b)]
    OptionsEntry [114-117] [a=b]
      Identifier(a) [114-115] [a]
      PathExpression [116-117] [b]
        Identifier(b) [116-117] [b]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,sql security invoker,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-154] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [132-137] [(y=z)]
    OptionsEntry [133-136] [y=z]
      Identifier(y) [133-134] [y]
      PathExpression [135-136] [z]
        Identifier(z) [135-136] [z]
  Identifier(testlang) [116-124] [testlang]
  Query [141-154] [select 1 as x]
    Select [141-154] [select 1 as x]
      SelectList [148-154] [1 as x]
        SelectColumn [148-154] [1 as x]
          IntLiteral(1) [148-149] [1]
          Alias [150-154] [as x]
            Identifier(x) [153-154] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,sql security invoker,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-137] [create or...options(y=z)]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [132-137] [(y=z)]
    OptionsEntry [133-136] [y=z]
      Identifier(y) [133-134] [y]
      PathExpression [135-136] [z]
        Identifier(z) [135-136] [z]
  Identifier(testlang) [116-124] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,sql security invoker,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-142] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  Identifier(testlang) [116-124] [testlang]
  Query [129-142] [select 1 as x]
    Select [129-142] [select 1 as x]
      SelectList [136-142] [1 as x]
        SelectColumn [136-142] [1 as x]
          IntLiteral(1) [136-137] [1]
          Alias [138-142] [as x]
            Identifier(x) [141-142] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,sql security invoker,,language testlang,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-124] [create or...language testlang]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  Identifier(testlang) [116-124] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,sql security invoker,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-137] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [115-120] [(y=z)]
    OptionsEntry [116-119] [y=z]
      Identifier(y) [116-117] [y]
      PathExpression [118-119] [z]
        Identifier(z) [118-119] [z]
  Query [124-137] [select 1 as x]
    Select [124-137] [select 1 as x]
      SelectList [131-137] [1 as x]
        SelectColumn [131-137] [1 as x]
          IntLiteral(1) [131-132] [1]
          Alias [133-137] [as x]
            Identifier(x) [136-137] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,sql security invoker,,,options(y=z),
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-120] [create or...options(y=z)]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [115-120] [(y=z)]
    OptionsEntry [116-119] [y=z]
      Identifier(y) [116-117] [y]
      PathExpression [118-119] [z]
        Identifier(z) [118-119] [z]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,sql security invoker,,,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-125] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  Query [112-125] [select 1 as x]
    Select [112-125] [select 1 as x]
      SelectList [119-125] [1 as x]
        SelectColumn [119-125] [1 as x]
          IntLiteral(1) [119-120] [1]
          Alias [121-125] [as x]
            Identifier(x) [124-125] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,sql security invoker,,,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-105] [create or...security invoker]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-134] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [93-98] [(a=b)]
    OptionsEntry [94-97] [a=b]
      Identifier(a) [94-95] [a]
      PathExpression [96-97] [b]
        Identifier(b) [96-97] [b]
  Identifier(testlang) [108-116] [testlang]
  Query [121-134] [select 1 as x]
    Select [121-134] [select 1 as x]
      SelectList [128-134] [1 as x]
        SelectColumn [128-134] [1 as x]
          IntLiteral(1) [128-129] [1]
          Alias [130-134] [as x]
            Identifier(x) [133-134] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-116] [create or...language testlang]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [93-98] [(a=b)]
    OptionsEntry [94-97] [a=b]
      Identifier(a) [94-95] [a]
      PathExpression [96-97] [b]
        Identifier(b) [96-97] [b]
  Identifier(testlang) [108-116] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-117] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [93-98] [(a=b)]
    OptionsEntry [94-97] [a=b]
      Identifier(a) [94-95] [a]
      PathExpression [96-97] [b]
        Identifier(b) [96-97] [b]
  Query [104-117] [select 1 as x]
    Select [104-117] [select 1 as x]
      SelectList [111-117] [1 as x]
        SelectColumn [111-117] [1 as x]
          IntLiteral(1) [111-112] [1]
          Alias [113-117] [as x]
            Identifier(x) [116-117] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,options(a=b),,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-98] [create or...options(a=b)]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [93-98] [(a=b)]
    OptionsEntry [94-97] [a=b]
      Identifier(a) [94-95] [a]
      PathExpression [96-97] [b]
        Identifier(b) [96-97] [b]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-134] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [112-117] [(y=z)]
    OptionsEntry [113-116] [y=z]
      Identifier(y) [113-114] [y]
      PathExpression [115-116] [z]
        Identifier(z) [115-116] [z]
  Identifier(testlang) [96-104] [testlang]
  Query [121-134] [select 1 as x]
    Select [121-134] [select 1 as x]
      SelectList [128-134] [1 as x]
        SelectColumn [128-134] [1 as x]
          IntLiteral(1) [128-129] [1]
          Alias [130-134] [as x]
            Identifier(x) [133-134] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-117] [create or...options(y=z)]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [112-117] [(y=z)]
    OptionsEntry [113-116] [y=z]
      Identifier(y) [113-114] [y]
      PathExpression [115-116] [z]
        Identifier(z) [115-116] [z]
  Identifier(testlang) [96-104] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-122] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  Identifier(testlang) [96-104] [testlang]
  Query [109-122] [select 1 as x]
    Select [109-122] [select 1 as x]
      SelectList [116-122] [1 as x]
        SelectColumn [116-122] [1 as x]
          IntLiteral(1) [116-117] [1]
          Alias [118-122] [as x]
            Identifier(x) [121-122] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,,language testlang,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-104] [create or...language testlang]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  Identifier(testlang) [96-104] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-117] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [95-100] [(y=z)]
    OptionsEntry [96-99] [y=z]
      Identifier(y) [96-97] [y]
      PathExpression [98-99] [z]
        Identifier(z) [98-99] [z]
  Query [104-117] [select 1 as x]
    Select [104-117] [select 1 as x]
      SelectList [111-117] [1 as x]
        SelectColumn [111-117] [1 as x]
          IntLiteral(1) [111-112] [1]
          Alias [113-117] [as x]
            Identifier(x) [116-117] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,,,options(y=z),
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-100] [create or...options(y=z)]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  OptionsList [95-100] [(y=z)]
    OptionsEntry [96-99] [y=z]
      Identifier(y) [96-97] [y]
      PathExpression [98-99] [z]
        Identifier(z) [98-99] [z]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-105] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
  Query [92-105] [select 1 as x]
    Select [92-105] [select 1 as x]
      SelectList [99-105] [1 as x]
        SelectColumn [99-105] [1 as x]
          IntLiteral(1) [99-100] [1]
          Alias [101-105] [as x]
            Identifier(x) [104-105] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,returns table<x int64>,,,,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-84] [create or...table<x int64>]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  TVFSchema [70-84] [table<x int64>]
    TVFSchemaColumn [76-83] [x int64]
      Identifier(x) [76-77] [x]
      SimpleType [78-83] [int64]
        PathExpression [78-83] [int64]
          Identifier(int64) [78-83] [int64]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: or replace,,,if not exists,,sql security invoker,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-132] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [91-96] [(a=b)]
    OptionsEntry [92-95] [a=b]
      Identifier(a) [92-93] [a]
      PathExpression [94-95] [b]
        Identifier(b) [94-95] [b]
  Identifier(testlang) [106-114] [testlang]
  Query [119-132] [select 1 as x]
    Select [119-132] [select 1 as x]
      SelectList [126-132] [1 as x]
        SelectColumn [126-132] [1 as x]
          IntLiteral(1) [126-127] [1]
          Alias [128-132] [as x]
            Identifier(x) [131-132] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,sql security invoker,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-114] [create or...language testlang]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [91-96] [(a=b)]
    OptionsEntry [92-95] [a=b]
      Identifier(a) [92-93] [a]
      PathExpression [94-95] [b]
        Identifier(b) [94-95] [b]
  Identifier(testlang) [106-114] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,,,if not exists,,sql security invoker,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-115] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [91-96] [(a=b)]
    OptionsEntry [92-95] [a=b]
      Identifier(a) [92-93] [a]
      PathExpression [94-95] [b]
        Identifier(b) [94-95] [b]
  Query [102-115] [select 1 as x]
    Select [102-115] [select 1 as x]
      SelectList [109-115] [1 as x]
        SelectColumn [109-115] [1 as x]
          IntLiteral(1) [109-110] [1]
          Alias [111-115] [as x]
            Identifier(x) [114-115] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,sql security invoker,options(a=b),,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-96] [create or...options(a=b)]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [91-96] [(a=b)]
    OptionsEntry [92-95] [a=b]
      Identifier(a) [92-93] [a]
      PathExpression [94-95] [b]
        Identifier(b) [94-95] [b]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,,,if not exists,,sql security invoker,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-132] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [110-115] [(y=z)]
    OptionsEntry [111-114] [y=z]
      Identifier(y) [111-112] [y]
      PathExpression [113-114] [z]
        Identifier(z) [113-114] [z]
  Identifier(testlang) [94-102] [testlang]
  Query [119-132] [select 1 as x]
    Select [119-132] [select 1 as x]
      SelectList [126-132] [1 as x]
        SelectColumn [126-132] [1 as x]
          IntLiteral(1) [126-127] [1]
          Alias [128-132] [as x]
            Identifier(x) [131-132] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,sql security invoker,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-115] [create or...options(y=z)]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [110-115] [(y=z)]
    OptionsEntry [111-114] [y=z]
      Identifier(y) [111-112] [y]
      PathExpression [113-114] [z]
        Identifier(z) [113-114] [z]
  Identifier(testlang) [94-102] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,,,if not exists,,sql security invoker,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-120] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  Identifier(testlang) [94-102] [testlang]
  Query [107-120] [select 1 as x]
    Select [107-120] [select 1 as x]
      SelectList [114-120] [1 as x]
        SelectColumn [114-120] [1 as x]
          IntLiteral(1) [114-115] [1]
          Alias [116-120] [as x]
            Identifier(x) [119-120] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,sql security invoker,,language testlang,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-102] [create or...language testlang]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  Identifier(testlang) [94-102] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,if not exists,,sql security invoker,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-115] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [93-98] [(y=z)]
    OptionsEntry [94-97] [y=z]
      Identifier(y) [94-95] [y]
      PathExpression [96-97] [z]
        Identifier(z) [96-97] [z]
  Query [102-115] [select 1 as x]
    Select [102-115] [select 1 as x]
      SelectList [109-115] [1 as x]
        SelectColumn [109-115] [1 as x]
          IntLiteral(1) [109-110] [1]
          Alias [111-115] [as x]
            Identifier(x) [114-115] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,sql security invoker,,,options(y=z),
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-98] [create or...options(y=z)]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [93-98] [(y=z)]
    OptionsEntry [94-97] [y=z]
      Identifier(y) [94-95] [y]
      PathExpression [96-97] [z]
        Identifier(z) [96-97] [z]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,,,if not exists,,sql security invoker,,,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-103] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  Query [90-103] [select 1 as x]
    Select [90-103] [select 1 as x]
      SelectList [97-103] [1 as x]
        SelectColumn [97-103] [1 as x]
          IntLiteral(1) [97-98] [1]
          Alias [99-103] [as x]
            Identifier(x) [102-103] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,sql security invoker,,,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-83] [create or...security invoker]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER
--
ALTERNATION GROUP: or replace,,,if not exists,,,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-112] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [71-76] [(a=b)]
    OptionsEntry [72-75] [a=b]
      Identifier(a) [72-73] [a]
      PathExpression [74-75] [b]
        Identifier(b) [74-75] [b]
  Identifier(testlang) [86-94] [testlang]
  Query [99-112] [select 1 as x]
    Select [99-112] [select 1 as x]
      SelectList [106-112] [1 as x]
        SelectColumn [106-112] [1 as x]
          IntLiteral(1) [106-107] [1]
          Alias [108-112] [as x]
            Identifier(x) [111-112] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-94] [create or...language testlang]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [71-76] [(a=b)]
    OptionsEntry [72-75] [a=b]
      Identifier(a) [72-73] [a]
      PathExpression [74-75] [b]
        Identifier(b) [74-75] [b]
  Identifier(testlang) [86-94] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,,,if not exists,,,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-95] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [71-76] [(a=b)]
    OptionsEntry [72-75] [a=b]
      Identifier(a) [72-73] [a]
      PathExpression [74-75] [b]
        Identifier(b) [74-75] [b]
  Query [82-95] [select 1 as x]
    Select [82-95] [select 1 as x]
      SelectList [89-95] [1 as x]
        SelectColumn [89-95] [1 as x]
          IntLiteral(1) [89-90] [1]
          Alias [91-95] [as x]
            Identifier(x) [94-95] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,,options(a=b),,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-76] [create or...options(a=b)]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [71-76] [(a=b)]
    OptionsEntry [72-75] [a=b]
      Identifier(a) [72-73] [a]
      PathExpression [74-75] [b]
        Identifier(b) [74-75] [b]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,,,if not exists,,,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-112] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [90-95] [(y=z)]
    OptionsEntry [91-94] [y=z]
      Identifier(y) [91-92] [y]
      PathExpression [93-94] [z]
        Identifier(z) [93-94] [z]
  Identifier(testlang) [74-82] [testlang]
  Query [99-112] [select 1 as x]
    Select [99-112] [select 1 as x]
      SelectList [106-112] [1 as x]
        SelectColumn [106-112] [1 as x]
          IntLiteral(1) [106-107] [1]
          Alias [108-112] [as x]
            Identifier(x) [111-112] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-95] [create or...options(y=z)]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [90-95] [(y=z)]
    OptionsEntry [91-94] [y=z]
      Identifier(y) [91-92] [y]
      PathExpression [93-94] [z]
        Identifier(z) [93-94] [z]
  Identifier(testlang) [74-82] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,,,if not exists,,,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-100] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  Identifier(testlang) [74-82] [testlang]
  Query [87-100] [select 1 as x]
    Select [87-100] [select 1 as x]
      SelectList [94-100] [1 as x]
        SelectColumn [94-100] [1 as x]
          IntLiteral(1) [94-95] [1]
          Alias [96-100] [as x]
            Identifier(x) [99-100] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,,,language testlang,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-82] [create or...language testlang]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  Identifier(testlang) [74-82] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,if not exists,,,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-95] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [73-78] [(y=z)]
    OptionsEntry [74-77] [y=z]
      Identifier(y) [74-75] [y]
      PathExpression [76-77] [z]
        Identifier(z) [76-77] [z]
  Query [82-95] [select 1 as x]
    Select [82-95] [select 1 as x]
      SelectList [89-95] [1 as x]
        SelectColumn [89-95] [1 as x]
          IntLiteral(1) [89-90] [1]
          Alias [91-95] [as x]
            Identifier(x) [94-95] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,,,,options(y=z),
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-78] [create or...options(y=z)]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  OptionsList [73-78] [(y=z)]
    OptionsEntry [74-77] [y=z]
      Identifier(y) [74-75] [y]
      PathExpression [76-77] [z]
        Identifier(z) [76-77] [z]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,,,if not exists,,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-83] [create or...select 1 as x]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
  Query [70-83] [select 1 as x]
    Select [70-83] [select 1 as x]
      SelectList [77-83] [1 as x]
        SelectColumn [77-83] [1 as x]
          IntLiteral(1) [77-78] [1]
          Alias [79-83] [as x]
            Identifier(x) [82-83] [x]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,if not exists,,,,,,
--
CreateTableFunctionStatement(is_or_replace, is_if_not_exists) [0-61] [create or...myfunction()]
  FunctionDeclaration [49-61] [myfunction()]
    PathExpression [49-59] [myfunction]
      Identifier(myfunction) [49-59] [myfunction]
    FunctionParameters [59-61] [()]
--
CREATE OR REPLACE TABLE FUNCTION IF NOT EXISTS myfunction()
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,sql security invoker,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-141] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [100-105] [(a=b)]
    OptionsEntry [101-104] [a=b]
      Identifier(a) [101-102] [a]
      PathExpression [103-104] [b]
        Identifier(b) [103-104] [b]
  Identifier(testlang) [115-123] [testlang]
  Query [128-141] [select 1 as x]
    Select [128-141] [select 1 as x]
      SelectList [135-141] [1 as x]
        SelectColumn [135-141] [1 as x]
          IntLiteral(1) [135-136] [1]
          Alias [137-141] [as x]
            Identifier(x) [140-141] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,sql security invoker,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_or_replace) [0-123] [create or...language testlang]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [100-105] [(a=b)]
    OptionsEntry [101-104] [a=b]
      Identifier(a) [101-102] [a]
      PathExpression [103-104] [b]
        Identifier(b) [103-104] [b]
  Identifier(testlang) [115-123] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,sql security invoker,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-124] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [100-105] [(a=b)]
    OptionsEntry [101-104] [a=b]
      Identifier(a) [101-102] [a]
      PathExpression [103-104] [b]
        Identifier(b) [103-104] [b]
  Query [111-124] [select 1 as x]
    Select [111-124] [select 1 as x]
      SelectList [118-124] [1 as x]
        SelectColumn [118-124] [1 as x]
          IntLiteral(1) [118-119] [1]
          Alias [120-124] [as x]
            Identifier(x) [123-124] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,sql security invoker,options(a=b),,,
--
CreateTableFunctionStatement(is_or_replace) [0-105] [create or...options(a=b)]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [100-105] [(a=b)]
    OptionsEntry [101-104] [a=b]
      Identifier(a) [101-102] [a]
      PathExpression [103-104] [b]
        Identifier(b) [103-104] [b]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,sql security invoker,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-141] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [119-124] [(y=z)]
    OptionsEntry [120-123] [y=z]
      Identifier(y) [120-121] [y]
      PathExpression [122-123] [z]
        Identifier(z) [122-123] [z]
  Identifier(testlang) [103-111] [testlang]
  Query [128-141] [select 1 as x]
    Select [128-141] [select 1 as x]
      SelectList [135-141] [1 as x]
        SelectColumn [135-141] [1 as x]
          IntLiteral(1) [135-136] [1]
          Alias [137-141] [as x]
            Identifier(x) [140-141] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,sql security invoker,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_or_replace) [0-124] [create or...options(y=z)]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [119-124] [(y=z)]
    OptionsEntry [120-123] [y=z]
      Identifier(y) [120-121] [y]
      PathExpression [122-123] [z]
        Identifier(z) [122-123] [z]
  Identifier(testlang) [103-111] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,sql security invoker,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-129] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  Identifier(testlang) [103-111] [testlang]
  Query [116-129] [select 1 as x]
    Select [116-129] [select 1 as x]
      SelectList [123-129] [1 as x]
        SelectColumn [123-129] [1 as x]
          IntLiteral(1) [123-124] [1]
          Alias [125-129] [as x]
            Identifier(x) [128-129] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,sql security invoker,,language testlang,,
--
CreateTableFunctionStatement(is_or_replace) [0-111] [create or...language testlang]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  Identifier(testlang) [103-111] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,sql security invoker,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-124] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [102-107] [(y=z)]
    OptionsEntry [103-106] [y=z]
      Identifier(y) [103-104] [y]
      PathExpression [105-106] [z]
        Identifier(z) [105-106] [z]
  Query [111-124] [select 1 as x]
    Select [111-124] [select 1 as x]
      SelectList [118-124] [1 as x]
        SelectColumn [118-124] [1 as x]
          IntLiteral(1) [118-119] [1]
          Alias [120-124] [as x]
            Identifier(x) [123-124] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,sql security invoker,,,options(y=z),
--
CreateTableFunctionStatement(is_or_replace) [0-107] [create or...options(y=z)]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [102-107] [(y=z)]
    OptionsEntry [103-106] [y=z]
      Identifier(y) [103-104] [y]
      PathExpression [105-106] [z]
        Identifier(z) [105-106] [z]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,sql security invoker,,,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-112] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  Query [99-112] [select 1 as x]
    Select [99-112] [select 1 as x]
      SelectList [106-112] [1 as x]
        SelectColumn [106-112] [1 as x]
          IntLiteral(1) [106-107] [1]
          Alias [108-112] [as x]
            Identifier(x) [111-112] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,sql security invoker,,,,
--
CreateTableFunctionStatement(is_or_replace) [0-92] [create or...security invoker]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-121] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [80-85] [(a=b)]
    OptionsEntry [81-84] [a=b]
      Identifier(a) [81-82] [a]
      PathExpression [83-84] [b]
        Identifier(b) [83-84] [b]
  Identifier(testlang) [95-103] [testlang]
  Query [108-121] [select 1 as x]
    Select [108-121] [select 1 as x]
      SelectList [115-121] [1 as x]
        SelectColumn [115-121] [1 as x]
          IntLiteral(1) [115-116] [1]
          Alias [117-121] [as x]
            Identifier(x) [120-121] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_or_replace) [0-103] [create or...language testlang]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [80-85] [(a=b)]
    OptionsEntry [81-84] [a=b]
      Identifier(a) [81-82] [a]
      PathExpression [83-84] [b]
        Identifier(b) [83-84] [b]
  Identifier(testlang) [95-103] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-104] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [80-85] [(a=b)]
    OptionsEntry [81-84] [a=b]
      Identifier(a) [81-82] [a]
      PathExpression [83-84] [b]
        Identifier(b) [83-84] [b]
  Query [91-104] [select 1 as x]
    Select [91-104] [select 1 as x]
      SelectList [98-104] [1 as x]
        SelectColumn [98-104] [1 as x]
          IntLiteral(1) [98-99] [1]
          Alias [100-104] [as x]
            Identifier(x) [103-104] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,options(a=b),,,
--
CreateTableFunctionStatement(is_or_replace) [0-85] [create or...options(a=b)]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [80-85] [(a=b)]
    OptionsEntry [81-84] [a=b]
      Identifier(a) [81-82] [a]
      PathExpression [83-84] [b]
        Identifier(b) [83-84] [b]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-121] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [99-104] [(y=z)]
    OptionsEntry [100-103] [y=z]
      Identifier(y) [100-101] [y]
      PathExpression [102-103] [z]
        Identifier(z) [102-103] [z]
  Identifier(testlang) [83-91] [testlang]
  Query [108-121] [select 1 as x]
    Select [108-121] [select 1 as x]
      SelectList [115-121] [1 as x]
        SelectColumn [115-121] [1 as x]
          IntLiteral(1) [115-116] [1]
          Alias [117-121] [as x]
            Identifier(x) [120-121] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_or_replace) [0-104] [create or...options(y=z)]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [99-104] [(y=z)]
    OptionsEntry [100-103] [y=z]
      Identifier(y) [100-101] [y]
      PathExpression [102-103] [z]
        Identifier(z) [102-103] [z]
  Identifier(testlang) [83-91] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-109] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  Identifier(testlang) [83-91] [testlang]
  Query [96-109] [select 1 as x]
    Select [96-109] [select 1 as x]
      SelectList [103-109] [1 as x]
        SelectColumn [103-109] [1 as x]
          IntLiteral(1) [103-104] [1]
          Alias [105-109] [as x]
            Identifier(x) [108-109] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,,language testlang,,
--
CreateTableFunctionStatement(is_or_replace) [0-91] [create or...language testlang]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  Identifier(testlang) [83-91] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-104] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [82-87] [(y=z)]
    OptionsEntry [83-86] [y=z]
      Identifier(y) [83-84] [y]
      PathExpression [85-86] [z]
        Identifier(z) [85-86] [z]
  Query [91-104] [select 1 as x]
    Select [91-104] [select 1 as x]
      SelectList [98-104] [1 as x]
        SelectColumn [98-104] [1 as x]
          IntLiteral(1) [98-99] [1]
          Alias [100-104] [as x]
            Identifier(x) [103-104] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,,,options(y=z),
--
CreateTableFunctionStatement(is_or_replace) [0-87] [create or...options(y=z)]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  OptionsList [82-87] [(y=z)]
    OptionsEntry [83-86] [y=z]
      Identifier(y) [83-84] [y]
      PathExpression [85-86] [z]
        Identifier(z) [85-86] [z]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-92] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
  Query [79-92] [select 1 as x]
    Select [79-92] [select 1 as x]
      SelectList [86-92] [1 as x]
        SelectColumn [86-92] [1 as x]
          IntLiteral(1) [86-87] [1]
          Alias [88-92] [as x]
            Identifier(x) [91-92] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,returns table<x int64>,,,,,
--
CreateTableFunctionStatement(is_or_replace) [0-71] [create or...table<x int64>]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  TVFSchema [57-71] [table<x int64>]
    TVFSchemaColumn [63-70] [x int64]
      Identifier(x) [63-64] [x]
      SimpleType [65-70] [int64]
        PathExpression [65-70] [int64]
          Identifier(int64) [65-70] [int64]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: or replace,,,,,sql security invoker,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-119] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [78-83] [(a=b)]
    OptionsEntry [79-82] [a=b]
      Identifier(a) [79-80] [a]
      PathExpression [81-82] [b]
        Identifier(b) [81-82] [b]
  Identifier(testlang) [93-101] [testlang]
  Query [106-119] [select 1 as x]
    Select [106-119] [select 1 as x]
      SelectList [113-119] [1 as x]
        SelectColumn [113-119] [1 as x]
          IntLiteral(1) [113-114] [1]
          Alias [115-119] [as x]
            Identifier(x) [118-119] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,sql security invoker,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_or_replace) [0-101] [create or...language testlang]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [78-83] [(a=b)]
    OptionsEntry [79-82] [a=b]
      Identifier(a) [79-80] [a]
      PathExpression [81-82] [b]
        Identifier(b) [81-82] [b]
  Identifier(testlang) [93-101] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,,,,,sql security invoker,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-102] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [78-83] [(a=b)]
    OptionsEntry [79-82] [a=b]
      Identifier(a) [79-80] [a]
      PathExpression [81-82] [b]
        Identifier(b) [81-82] [b]
  Query [89-102] [select 1 as x]
    Select [89-102] [select 1 as x]
      SelectList [96-102] [1 as x]
        SelectColumn [96-102] [1 as x]
          IntLiteral(1) [96-97] [1]
          Alias [98-102] [as x]
            Identifier(x) [101-102] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,sql security invoker,options(a=b),,,
--
CreateTableFunctionStatement(is_or_replace) [0-83] [create or...options(a=b)]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [78-83] [(a=b)]
    OptionsEntry [79-82] [a=b]
      Identifier(a) [79-80] [a]
      PathExpression [81-82] [b]
        Identifier(b) [81-82] [b]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,,,,,sql security invoker,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-119] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [97-102] [(y=z)]
    OptionsEntry [98-101] [y=z]
      Identifier(y) [98-99] [y]
      PathExpression [100-101] [z]
        Identifier(z) [100-101] [z]
  Identifier(testlang) [81-89] [testlang]
  Query [106-119] [select 1 as x]
    Select [106-119] [select 1 as x]
      SelectList [113-119] [1 as x]
        SelectColumn [113-119] [1 as x]
          IntLiteral(1) [113-114] [1]
          Alias [115-119] [as x]
            Identifier(x) [118-119] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,sql security invoker,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_or_replace) [0-102] [create or...options(y=z)]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [97-102] [(y=z)]
    OptionsEntry [98-101] [y=z]
      Identifier(y) [98-99] [y]
      PathExpression [100-101] [z]
        Identifier(z) [100-101] [z]
  Identifier(testlang) [81-89] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,,,,,sql security invoker,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-107] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  Identifier(testlang) [81-89] [testlang]
  Query [94-107] [select 1 as x]
    Select [94-107] [select 1 as x]
      SelectList [101-107] [1 as x]
        SelectColumn [101-107] [1 as x]
          IntLiteral(1) [101-102] [1]
          Alias [103-107] [as x]
            Identifier(x) [106-107] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,sql security invoker,,language testlang,,
--
CreateTableFunctionStatement(is_or_replace) [0-89] [create or...language testlang]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  Identifier(testlang) [81-89] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,,,sql security invoker,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-102] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [80-85] [(y=z)]
    OptionsEntry [81-84] [y=z]
      Identifier(y) [81-82] [y]
      PathExpression [83-84] [z]
        Identifier(z) [83-84] [z]
  Query [89-102] [select 1 as x]
    Select [89-102] [select 1 as x]
      SelectList [96-102] [1 as x]
        SelectColumn [96-102] [1 as x]
          IntLiteral(1) [96-97] [1]
          Alias [98-102] [as x]
            Identifier(x) [101-102] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,sql security invoker,,,options(y=z),
--
CreateTableFunctionStatement(is_or_replace) [0-85] [create or...options(y=z)]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [80-85] [(y=z)]
    OptionsEntry [81-84] [y=z]
      Identifier(y) [81-82] [y]
      PathExpression [83-84] [z]
        Identifier(z) [83-84] [z]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,,,,,sql security invoker,,,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-90] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  Query [77-90] [select 1 as x]
    Select [77-90] [select 1 as x]
      SelectList [84-90] [1 as x]
        SelectColumn [84-90] [1 as x]
          IntLiteral(1) [84-85] [1]
          Alias [86-90] [as x]
            Identifier(x) [89-90] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,sql security invoker,,,,
--
CreateTableFunctionStatement(is_or_replace) [0-70] [create or...security invoker]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER
--
ALTERNATION GROUP: or replace,,,,,,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-99] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [58-63] [(a=b)]
    OptionsEntry [59-62] [a=b]
      Identifier(a) [59-60] [a]
      PathExpression [61-62] [b]
        Identifier(b) [61-62] [b]
  Identifier(testlang) [73-81] [testlang]
  Query [86-99] [select 1 as x]
    Select [86-99] [select 1 as x]
      SelectList [93-99] [1 as x]
        SelectColumn [93-99] [1 as x]
          IntLiteral(1) [93-94] [1]
          Alias [95-99] [as x]
            Identifier(x) [98-99] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_or_replace) [0-81] [create or...language testlang]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [58-63] [(a=b)]
    OptionsEntry [59-62] [a=b]
      Identifier(a) [59-60] [a]
      PathExpression [61-62] [b]
        Identifier(b) [61-62] [b]
  Identifier(testlang) [73-81] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,,,,,,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-82] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [58-63] [(a=b)]
    OptionsEntry [59-62] [a=b]
      Identifier(a) [59-60] [a]
      PathExpression [61-62] [b]
        Identifier(b) [61-62] [b]
  Query [69-82] [select 1 as x]
    Select [69-82] [select 1 as x]
      SelectList [76-82] [1 as x]
        SelectColumn [76-82] [1 as x]
          IntLiteral(1) [76-77] [1]
          Alias [78-82] [as x]
            Identifier(x) [81-82] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,,options(a=b),,,
--
CreateTableFunctionStatement(is_or_replace) [0-63] [create or...options(a=b)]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [58-63] [(a=b)]
    OptionsEntry [59-62] [a=b]
      Identifier(a) [59-60] [a]
      PathExpression [61-62] [b]
        Identifier(b) [61-62] [b]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
OPTIONS
  (a = b)
--
ALTERNATION GROUP: or replace,,,,,,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-99] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [77-82] [(y=z)]
    OptionsEntry [78-81] [y=z]
      Identifier(y) [78-79] [y]
      PathExpression [80-81] [z]
        Identifier(z) [80-81] [z]
  Identifier(testlang) [61-69] [testlang]
  Query [86-99] [select 1 as x]
    Select [86-99] [select 1 as x]
      SelectList [93-99] [1 as x]
        SelectColumn [93-99] [1 as x]
          IntLiteral(1) [93-94] [1]
          Alias [95-99] [as x]
            Identifier(x) [98-99] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_or_replace) [0-82] [create or...options(y=z)]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [77-82] [(y=z)]
    OptionsEntry [78-81] [y=z]
      Identifier(y) [78-79] [y]
      PathExpression [80-81] [z]
        Identifier(z) [80-81] [z]
  Identifier(testlang) [61-69] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,,,,,,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-87] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  Identifier(testlang) [61-69] [testlang]
  Query [74-87] [select 1 as x]
    Select [74-87] [select 1 as x]
      SelectList [81-87] [1 as x]
        SelectColumn [81-87] [1 as x]
          IntLiteral(1) [81-82] [1]
          Alias [83-87] [as x]
            Identifier(x) [86-87] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,,,language testlang,,
--
CreateTableFunctionStatement(is_or_replace) [0-69] [create or...language testlang]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  Identifier(testlang) [61-69] [testlang]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: or replace,,,,,,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-82] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [60-65] [(y=z)]
    OptionsEntry [61-64] [y=z]
      Identifier(y) [61-62] [y]
      PathExpression [63-64] [z]
        Identifier(z) [63-64] [z]
  Query [69-82] [select 1 as x]
    Select [69-82] [select 1 as x]
      SelectList [76-82] [1 as x]
        SelectColumn [76-82] [1 as x]
          IntLiteral(1) [76-77] [1]
          Alias [78-82] [as x]
            Identifier(x) [81-82] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,,,,options(y=z),
--
CreateTableFunctionStatement(is_or_replace) [0-65] [create or...options(y=z)]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  OptionsList [60-65] [(y=z)]
    OptionsEntry [61-64] [y=z]
      Identifier(y) [61-62] [y]
      PathExpression [63-64] [z]
        Identifier(z) [63-64] [z]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
OPTIONS
  (y = z)
--
ALTERNATION GROUP: or replace,,,,,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_or_replace) [0-70] [create or...select 1 as x]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
  Query [57-70] [select 1 as x]
    Select [57-70] [select 1 as x]
      SelectList [64-70] [1 as x]
        SelectColumn [64-70] [1 as x]
          IntLiteral(1) [64-65] [1]
          Alias [66-70] [as x]
            Identifier(x) [69-70] [x]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: or replace,,,,,,,,,
--
CreateTableFunctionStatement(is_or_replace) [0-48] [create or...myfunction()]
  FunctionDeclaration [36-48] [myfunction()]
    PathExpression [36-46] [myfunction]
      Identifier(myfunction) [36-46] [myfunction]
    FunctionParameters [46-48] [()]
--
CREATE OR REPLACE TABLE FUNCTION myfunction()
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-153] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [112-117] [(a=b)]
    OptionsEntry [113-116] [a=b]
      Identifier(a) [113-114] [a]
      PathExpression [115-116] [b]
        Identifier(b) [115-116] [b]
  Identifier(testlang) [127-135] [testlang]
  Query [140-153] [select 1 as x]
    Select [140-153] [select 1 as x]
      SelectList [147-153] [1 as x]
        SelectColumn [147-153] [1 as x]
          IntLiteral(1) [147-148] [1]
          Alias [149-153] [as x]
            Identifier(x) [152-153] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-135] [create  temporary...e testlang]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [112-117] [(a=b)]
    OptionsEntry [113-116] [a=b]
      Identifier(a) [113-114] [a]
      PathExpression [115-116] [b]
        Identifier(b) [115-116] [b]
  Identifier(testlang) [127-135] [testlang]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,sql security invoker,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-136] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [112-117] [(a=b)]
    OptionsEntry [113-116] [a=b]
      Identifier(a) [113-114] [a]
      PathExpression [115-116] [b]
        Identifier(b) [115-116] [b]
  Query [123-136] [select 1 as x]
    Select [123-136] [select 1 as x]
      SelectList [130-136] [1 as x]
        SelectColumn [130-136] [1 as x]
          IntLiteral(1) [130-131] [1]
          Alias [132-136] [as x]
            Identifier(x) [135-136] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,sql security invoker,options(a=b),,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-117] [create  temporary...tions(a=b)]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [112-117] [(a=b)]
    OptionsEntry [113-116] [a=b]
      Identifier(a) [113-114] [a]
      PathExpression [115-116] [b]
        Identifier(b) [115-116] [b]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (a = b)
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,sql security invoker,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-153] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [131-136] [(y=z)]
    OptionsEntry [132-135] [y=z]
      Identifier(y) [132-133] [y]
      PathExpression [134-135] [z]
        Identifier(z) [134-135] [z]
  Identifier(testlang) [115-123] [testlang]
  Query [140-153] [select 1 as x]
    Select [140-153] [select 1 as x]
      SelectList [147-153] [1 as x]
        SelectColumn [147-153] [1 as x]
          IntLiteral(1) [147-148] [1]
          Alias [149-153] [as x]
            Identifier(x) [152-153] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,sql security invoker,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-136] [create  temporary...tions(y=z)]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [131-136] [(y=z)]
    OptionsEntry [132-135] [y=z]
      Identifier(y) [132-133] [y]
      PathExpression [134-135] [z]
        Identifier(z) [134-135] [z]
  Identifier(testlang) [115-123] [testlang]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,sql security invoker,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-141] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  Identifier(testlang) [115-123] [testlang]
  Query [128-141] [select 1 as x]
    Select [128-141] [select 1 as x]
      SelectList [135-141] [1 as x]
        SelectColumn [135-141] [1 as x]
          IntLiteral(1) [135-136] [1]
          Alias [137-141] [as x]
            Identifier(x) [140-141] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,sql security invoker,,language testlang,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-123] [create  temporary...e testlang]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  Identifier(testlang) [115-123] [testlang]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,sql security invoker,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-136] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [114-119] [(y=z)]
    OptionsEntry [115-118] [y=z]
      Identifier(y) [115-116] [y]
      PathExpression [117-118] [z]
        Identifier(z) [117-118] [z]
  Query [123-136] [select 1 as x]
    Select [123-136] [select 1 as x]
      SelectList [130-136] [1 as x]
        SelectColumn [130-136] [1 as x]
          IntLiteral(1) [130-131] [1]
          Alias [132-136] [as x]
            Identifier(x) [135-136] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,sql security invoker,,,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-119] [create  temporary...tions(y=z)]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [114-119] [(y=z)]
    OptionsEntry [115-118] [y=z]
      Identifier(y) [115-116] [y]
      PathExpression [117-118] [z]
        Identifier(z) [117-118] [z]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (y = z)
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,sql security invoker,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-124] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  Query [111-124] [select 1 as x]
    Select [111-124] [select 1 as x]
      SelectList [118-124] [1 as x]
        SelectColumn [118-124] [1 as x]
          IntLiteral(1) [118-119] [1]
          Alias [120-124] [as x]
            Identifier(x) [123-124] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,sql security invoker,,,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-104] [create  temporary...ty invoker]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-133] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [92-97] [(a=b)]
    OptionsEntry [93-96] [a=b]
      Identifier(a) [93-94] [a]
      PathExpression [95-96] [b]
        Identifier(b) [95-96] [b]
  Identifier(testlang) [107-115] [testlang]
  Query [120-133] [select 1 as x]
    Select [120-133] [select 1 as x]
      SelectList [127-133] [1 as x]
        SelectColumn [127-133] [1 as x]
          IntLiteral(1) [127-128] [1]
          Alias [129-133] [as x]
            Identifier(x) [132-133] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-115] [create  temporary...e testlang]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [92-97] [(a=b)]
    OptionsEntry [93-96] [a=b]
      Identifier(a) [93-94] [a]
      PathExpression [95-96] [b]
        Identifier(b) [95-96] [b]
  Identifier(testlang) [107-115] [testlang]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-116] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [92-97] [(a=b)]
    OptionsEntry [93-96] [a=b]
      Identifier(a) [93-94] [a]
      PathExpression [95-96] [b]
        Identifier(b) [95-96] [b]
  Query [103-116] [select 1 as x]
    Select [103-116] [select 1 as x]
      SelectList [110-116] [1 as x]
        SelectColumn [110-116] [1 as x]
          IntLiteral(1) [110-111] [1]
          Alias [112-116] [as x]
            Identifier(x) [115-116] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,options(a=b),,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-97] [create  temporary...tions(a=b)]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [92-97] [(a=b)]
    OptionsEntry [93-96] [a=b]
      Identifier(a) [93-94] [a]
      PathExpression [95-96] [b]
        Identifier(b) [95-96] [b]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (a = b)
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-133] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [111-116] [(y=z)]
    OptionsEntry [112-115] [y=z]
      Identifier(y) [112-113] [y]
      PathExpression [114-115] [z]
        Identifier(z) [114-115] [z]
  Identifier(testlang) [95-103] [testlang]
  Query [120-133] [select 1 as x]
    Select [120-133] [select 1 as x]
      SelectList [127-133] [1 as x]
        SelectColumn [127-133] [1 as x]
          IntLiteral(1) [127-128] [1]
          Alias [129-133] [as x]
            Identifier(x) [132-133] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-116] [create  temporary...tions(y=z)]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [111-116] [(y=z)]
    OptionsEntry [112-115] [y=z]
      Identifier(y) [112-113] [y]
      PathExpression [114-115] [z]
        Identifier(z) [114-115] [z]
  Identifier(testlang) [95-103] [testlang]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-121] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  Identifier(testlang) [95-103] [testlang]
  Query [108-121] [select 1 as x]
    Select [108-121] [select 1 as x]
      SelectList [115-121] [1 as x]
        SelectColumn [115-121] [1 as x]
          IntLiteral(1) [115-116] [1]
          Alias [117-121] [as x]
            Identifier(x) [120-121] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,,language testlang,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-103] [create  temporary...e testlang]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  Identifier(testlang) [95-103] [testlang]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-116] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [94-99] [(y=z)]
    OptionsEntry [95-98] [y=z]
      Identifier(y) [95-96] [y]
      PathExpression [97-98] [z]
        Identifier(z) [97-98] [z]
  Query [103-116] [select 1 as x]
    Select [103-116] [select 1 as x]
      SelectList [110-116] [1 as x]
        SelectColumn [110-116] [1 as x]
          IntLiteral(1) [110-111] [1]
          Alias [112-116] [as x]
            Identifier(x) [115-116] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,,,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-99] [create  temporary...tions(y=z)]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  OptionsList [94-99] [(y=z)]
    OptionsEntry [95-98] [y=z]
      Identifier(y) [95-96] [y]
      PathExpression [97-98] [z]
        Identifier(z) [97-98] [z]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (y = z)
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-104] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
  Query [91-104] [select 1 as x]
    Select [91-104] [select 1 as x]
      SelectList [98-104] [1 as x]
        SelectColumn [98-104] [1 as x]
          IntLiteral(1) [98-99] [1]
          Alias [100-104] [as x]
            Identifier(x) [103-104] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,returns table<x int64>,,,,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-83] [create  temporary...e<x int64>]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  TVFSchema [69-83] [table<x int64>]
    TVFSchemaColumn [75-82] [x int64]
      Identifier(x) [75-76] [x]
      SimpleType [77-82] [int64]
        PathExpression [77-82] [int64]
          Identifier(int64) [77-82] [int64]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: temporary,,if not exists,,sql security invoker,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-131] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [90-95] [(a=b)]
    OptionsEntry [91-94] [a=b]
      Identifier(a) [91-92] [a]
      PathExpression [93-94] [b]
        Identifier(b) [93-94] [b]
  Identifier(testlang) [105-113] [testlang]
  Query [118-131] [select 1 as x]
    Select [118-131] [select 1 as x]
      SelectList [125-131] [1 as x]
        SelectColumn [125-131] [1 as x]
          IntLiteral(1) [125-126] [1]
          Alias [127-131] [as x]
            Identifier(x) [130-131] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,sql security invoker,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-113] [create  temporary...e testlang]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [90-95] [(a=b)]
    OptionsEntry [91-94] [a=b]
      Identifier(a) [91-92] [a]
      PathExpression [93-94] [b]
        Identifier(b) [93-94] [b]
  Identifier(testlang) [105-113] [testlang]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: temporary,,if not exists,,sql security invoker,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-114] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [90-95] [(a=b)]
    OptionsEntry [91-94] [a=b]
      Identifier(a) [91-92] [a]
      PathExpression [93-94] [b]
        Identifier(b) [93-94] [b]
  Query [101-114] [select 1 as x]
    Select [101-114] [select 1 as x]
      SelectList [108-114] [1 as x]
        SelectColumn [108-114] [1 as x]
          IntLiteral(1) [108-109] [1]
          Alias [110-114] [as x]
            Identifier(x) [113-114] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,sql security invoker,options(a=b),,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-95] [create  temporary...tions(a=b)]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [90-95] [(a=b)]
    OptionsEntry [91-94] [a=b]
      Identifier(a) [91-92] [a]
      PathExpression [93-94] [b]
        Identifier(b) [93-94] [b]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER OPTIONS
  (a = b)
--
ALTERNATION GROUP: temporary,,if not exists,,sql security invoker,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-131] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [109-114] [(y=z)]
    OptionsEntry [110-113] [y=z]
      Identifier(y) [110-111] [y]
      PathExpression [112-113] [z]
        Identifier(z) [112-113] [z]
  Identifier(testlang) [93-101] [testlang]
  Query [118-131] [select 1 as x]
    Select [118-131] [select 1 as x]
      SelectList [125-131] [1 as x]
        SelectColumn [125-131] [1 as x]
          IntLiteral(1) [125-126] [1]
          Alias [127-131] [as x]
            Identifier(x) [130-131] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,sql security invoker,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-114] [create  temporary...tions(y=z)]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [109-114] [(y=z)]
    OptionsEntry [110-113] [y=z]
      Identifier(y) [110-111] [y]
      PathExpression [112-113] [z]
        Identifier(z) [112-113] [z]
  Identifier(testlang) [93-101] [testlang]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: temporary,,if not exists,,sql security invoker,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-119] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  Identifier(testlang) [93-101] [testlang]
  Query [106-119] [select 1 as x]
    Select [106-119] [select 1 as x]
      SelectList [113-119] [1 as x]
        SelectColumn [113-119] [1 as x]
          IntLiteral(1) [113-114] [1]
          Alias [115-119] [as x]
            Identifier(x) [118-119] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,sql security invoker,,language testlang,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-101] [create  temporary...e testlang]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  Identifier(testlang) [93-101] [testlang]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,if not exists,,sql security invoker,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-114] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [92-97] [(y=z)]
    OptionsEntry [93-96] [y=z]
      Identifier(y) [93-94] [y]
      PathExpression [95-96] [z]
        Identifier(z) [95-96] [z]
  Query [101-114] [select 1 as x]
    Select [101-114] [select 1 as x]
      SelectList [108-114] [1 as x]
        SelectColumn [108-114] [1 as x]
          IntLiteral(1) [108-109] [1]
          Alias [110-114] [as x]
            Identifier(x) [113-114] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,sql security invoker,,,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-97] [create  temporary...tions(y=z)]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [92-97] [(y=z)]
    OptionsEntry [93-96] [y=z]
      Identifier(y) [93-94] [y]
      PathExpression [95-96] [z]
        Identifier(z) [95-96] [z]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER OPTIONS
  (y = z)
--
ALTERNATION GROUP: temporary,,if not exists,,sql security invoker,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-102] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  Query [89-102] [select 1 as x]
    Select [89-102] [select 1 as x]
      SelectList [96-102] [1 as x]
        SelectColumn [96-102] [1 as x]
          IntLiteral(1) [96-97] [1]
          Alias [98-102] [as x]
            Identifier(x) [101-102] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,sql security invoker,,,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-82] [create  temporary...ty invoker]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER
--
ALTERNATION GROUP: temporary,,if not exists,,,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-111] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [70-75] [(a=b)]
    OptionsEntry [71-74] [a=b]
      Identifier(a) [71-72] [a]
      PathExpression [73-74] [b]
        Identifier(b) [73-74] [b]
  Identifier(testlang) [85-93] [testlang]
  Query [98-111] [select 1 as x]
    Select [98-111] [select 1 as x]
      SelectList [105-111] [1 as x]
        SelectColumn [105-111] [1 as x]
          IntLiteral(1) [105-106] [1]
          Alias [107-111] [as x]
            Identifier(x) [110-111] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-93] [create  temporary...e testlang]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [70-75] [(a=b)]
    OptionsEntry [71-74] [a=b]
      Identifier(a) [71-72] [a]
      PathExpression [73-74] [b]
        Identifier(b) [73-74] [b]
  Identifier(testlang) [85-93] [testlang]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: temporary,,if not exists,,,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-94] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [70-75] [(a=b)]
    OptionsEntry [71-74] [a=b]
      Identifier(a) [71-72] [a]
      PathExpression [73-74] [b]
        Identifier(b) [73-74] [b]
  Query [81-94] [select 1 as x]
    Select [81-94] [select 1 as x]
      SelectList [88-94] [1 as x]
        SelectColumn [88-94] [1 as x]
          IntLiteral(1) [88-89] [1]
          Alias [90-94] [as x]
            Identifier(x) [93-94] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,,options(a=b),,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-75] [create  temporary...tions(a=b)]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [70-75] [(a=b)]
    OptionsEntry [71-74] [a=b]
      Identifier(a) [71-72] [a]
      PathExpression [73-74] [b]
        Identifier(b) [73-74] [b]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (a = b)
--
ALTERNATION GROUP: temporary,,if not exists,,,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-111] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [89-94] [(y=z)]
    OptionsEntry [90-93] [y=z]
      Identifier(y) [90-91] [y]
      PathExpression [92-93] [z]
        Identifier(z) [92-93] [z]
  Identifier(testlang) [73-81] [testlang]
  Query [98-111] [select 1 as x]
    Select [98-111] [select 1 as x]
      SelectList [105-111] [1 as x]
        SelectColumn [105-111] [1 as x]
          IntLiteral(1) [105-106] [1]
          Alias [107-111] [as x]
            Identifier(x) [110-111] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-94] [create  temporary...tions(y=z)]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [89-94] [(y=z)]
    OptionsEntry [90-93] [y=z]
      Identifier(y) [90-91] [y]
      PathExpression [92-93] [z]
        Identifier(z) [92-93] [z]
  Identifier(testlang) [73-81] [testlang]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: temporary,,if not exists,,,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-99] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  Identifier(testlang) [73-81] [testlang]
  Query [86-99] [select 1 as x]
    Select [86-99] [select 1 as x]
      SelectList [93-99] [1 as x]
        SelectColumn [93-99] [1 as x]
          IntLiteral(1) [93-94] [1]
          Alias [95-99] [as x]
            Identifier(x) [98-99] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,,,language testlang,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-81] [create  temporary...e testlang]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  Identifier(testlang) [73-81] [testlang]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,if not exists,,,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-94] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [72-77] [(y=z)]
    OptionsEntry [73-76] [y=z]
      Identifier(y) [73-74] [y]
      PathExpression [75-76] [z]
        Identifier(z) [75-76] [z]
  Query [81-94] [select 1 as x]
    Select [81-94] [select 1 as x]
      SelectList [88-94] [1 as x]
        SelectColumn [88-94] [1 as x]
          IntLiteral(1) [88-89] [1]
          Alias [90-94] [as x]
            Identifier(x) [93-94] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,,,,options(y=z),
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-77] [create  temporary...tions(y=z)]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  OptionsList [72-77] [(y=z)]
    OptionsEntry [73-76] [y=z]
      Identifier(y) [73-74] [y]
      PathExpression [75-76] [z]
        Identifier(z) [75-76] [z]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (y = z)
--
ALTERNATION GROUP: temporary,,if not exists,,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-82] [create  temporary...ect 1 as x]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
  Query [69-82] [select 1 as x]
    Select [69-82] [select 1 as x]
      SelectList [76-82] [1 as x]
        SelectColumn [76-82] [1 as x]
          IntLiteral(1) [76-77] [1]
          Alias [78-82] [as x]
            Identifier(x) [81-82] [x]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,if not exists,,,,,,
--
CreateTableFunctionStatement(is_temp, is_if_not_exists) [0-60] [create  temporary...function()]
  FunctionDeclaration [48-60] [myfunction()]
    PathExpression [48-58] [myfunction]
      Identifier(myfunction) [48-58] [myfunction]
    FunctionParameters [58-60] [()]
--
CREATE TEMP TABLE FUNCTION IF NOT EXISTS myfunction()
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,sql security invoker,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-140] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [99-104] [(a=b)]
    OptionsEntry [100-103] [a=b]
      Identifier(a) [100-101] [a]
      PathExpression [102-103] [b]
        Identifier(b) [102-103] [b]
  Identifier(testlang) [114-122] [testlang]
  Query [127-140] [select 1 as x]
    Select [127-140] [select 1 as x]
      SelectList [134-140] [1 as x]
        SelectColumn [134-140] [1 as x]
          IntLiteral(1) [134-135] [1]
          Alias [136-140] [as x]
            Identifier(x) [139-140] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,sql security invoker,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_temp) [0-122] [create  temporary...e testlang]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [99-104] [(a=b)]
    OptionsEntry [100-103] [a=b]
      Identifier(a) [100-101] [a]
      PathExpression [102-103] [b]
        Identifier(b) [102-103] [b]
  Identifier(testlang) [114-122] [testlang]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,sql security invoker,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-123] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [99-104] [(a=b)]
    OptionsEntry [100-103] [a=b]
      Identifier(a) [100-101] [a]
      PathExpression [102-103] [b]
        Identifier(b) [102-103] [b]
  Query [110-123] [select 1 as x]
    Select [110-123] [select 1 as x]
      SelectList [117-123] [1 as x]
        SelectColumn [117-123] [1 as x]
          IntLiteral(1) [117-118] [1]
          Alias [119-123] [as x]
            Identifier(x) [122-123] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,sql security invoker,options(a=b),,,
--
CreateTableFunctionStatement(is_temp) [0-104] [create  temporary...tions(a=b)]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [99-104] [(a=b)]
    OptionsEntry [100-103] [a=b]
      Identifier(a) [100-101] [a]
      PathExpression [102-103] [b]
        Identifier(b) [102-103] [b]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (a = b)
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,sql security invoker,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-140] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [118-123] [(y=z)]
    OptionsEntry [119-122] [y=z]
      Identifier(y) [119-120] [y]
      PathExpression [121-122] [z]
        Identifier(z) [121-122] [z]
  Identifier(testlang) [102-110] [testlang]
  Query [127-140] [select 1 as x]
    Select [127-140] [select 1 as x]
      SelectList [134-140] [1 as x]
        SelectColumn [134-140] [1 as x]
          IntLiteral(1) [134-135] [1]
          Alias [136-140] [as x]
            Identifier(x) [139-140] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,sql security invoker,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_temp) [0-123] [create  temporary...tions(y=z)]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [118-123] [(y=z)]
    OptionsEntry [119-122] [y=z]
      Identifier(y) [119-120] [y]
      PathExpression [121-122] [z]
        Identifier(z) [121-122] [z]
  Identifier(testlang) [102-110] [testlang]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,sql security invoker,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-128] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  Identifier(testlang) [102-110] [testlang]
  Query [115-128] [select 1 as x]
    Select [115-128] [select 1 as x]
      SelectList [122-128] [1 as x]
        SelectColumn [122-128] [1 as x]
          IntLiteral(1) [122-123] [1]
          Alias [124-128] [as x]
            Identifier(x) [127-128] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,sql security invoker,,language testlang,,
--
CreateTableFunctionStatement(is_temp) [0-110] [create  temporary...e testlang]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  Identifier(testlang) [102-110] [testlang]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,sql security invoker,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-123] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [101-106] [(y=z)]
    OptionsEntry [102-105] [y=z]
      Identifier(y) [102-103] [y]
      PathExpression [104-105] [z]
        Identifier(z) [104-105] [z]
  Query [110-123] [select 1 as x]
    Select [110-123] [select 1 as x]
      SelectList [117-123] [1 as x]
        SelectColumn [117-123] [1 as x]
          IntLiteral(1) [117-118] [1]
          Alias [119-123] [as x]
            Identifier(x) [122-123] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,sql security invoker,,,options(y=z),
--
CreateTableFunctionStatement(is_temp) [0-106] [create  temporary...tions(y=z)]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [101-106] [(y=z)]
    OptionsEntry [102-105] [y=z]
      Identifier(y) [102-103] [y]
      PathExpression [104-105] [z]
        Identifier(z) [104-105] [z]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (y = z)
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,sql security invoker,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-111] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  Query [98-111] [select 1 as x]
    Select [98-111] [select 1 as x]
      SelectList [105-111] [1 as x]
        SelectColumn [105-111] [1 as x]
          IntLiteral(1) [105-106] [1]
          Alias [107-111] [as x]
            Identifier(x) [110-111] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,sql security invoker,,,,
--
CreateTableFunctionStatement(is_temp) [0-91] [create  temporary...ty invoker]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-120] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [79-84] [(a=b)]
    OptionsEntry [80-83] [a=b]
      Identifier(a) [80-81] [a]
      PathExpression [82-83] [b]
        Identifier(b) [82-83] [b]
  Identifier(testlang) [94-102] [testlang]
  Query [107-120] [select 1 as x]
    Select [107-120] [select 1 as x]
      SelectList [114-120] [1 as x]
        SelectColumn [114-120] [1 as x]
          IntLiteral(1) [114-115] [1]
          Alias [116-120] [as x]
            Identifier(x) [119-120] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_temp) [0-102] [create  temporary...e testlang]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [79-84] [(a=b)]
    OptionsEntry [80-83] [a=b]
      Identifier(a) [80-81] [a]
      PathExpression [82-83] [b]
        Identifier(b) [82-83] [b]
  Identifier(testlang) [94-102] [testlang]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-103] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [79-84] [(a=b)]
    OptionsEntry [80-83] [a=b]
      Identifier(a) [80-81] [a]
      PathExpression [82-83] [b]
        Identifier(b) [82-83] [b]
  Query [90-103] [select 1 as x]
    Select [90-103] [select 1 as x]
      SelectList [97-103] [1 as x]
        SelectColumn [97-103] [1 as x]
          IntLiteral(1) [97-98] [1]
          Alias [99-103] [as x]
            Identifier(x) [102-103] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,options(a=b),,,
--
CreateTableFunctionStatement(is_temp) [0-84] [create  temporary...tions(a=b)]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [79-84] [(a=b)]
    OptionsEntry [80-83] [a=b]
      Identifier(a) [80-81] [a]
      PathExpression [82-83] [b]
        Identifier(b) [82-83] [b]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (a = b)
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-120] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [98-103] [(y=z)]
    OptionsEntry [99-102] [y=z]
      Identifier(y) [99-100] [y]
      PathExpression [101-102] [z]
        Identifier(z) [101-102] [z]
  Identifier(testlang) [82-90] [testlang]
  Query [107-120] [select 1 as x]
    Select [107-120] [select 1 as x]
      SelectList [114-120] [1 as x]
        SelectColumn [114-120] [1 as x]
          IntLiteral(1) [114-115] [1]
          Alias [116-120] [as x]
            Identifier(x) [119-120] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_temp) [0-103] [create  temporary...tions(y=z)]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [98-103] [(y=z)]
    OptionsEntry [99-102] [y=z]
      Identifier(y) [99-100] [y]
      PathExpression [101-102] [z]
        Identifier(z) [101-102] [z]
  Identifier(testlang) [82-90] [testlang]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-108] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  Identifier(testlang) [82-90] [testlang]
  Query [95-108] [select 1 as x]
    Select [95-108] [select 1 as x]
      SelectList [102-108] [1 as x]
        SelectColumn [102-108] [1 as x]
          IntLiteral(1) [102-103] [1]
          Alias [104-108] [as x]
            Identifier(x) [107-108] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,,language testlang,,
--
CreateTableFunctionStatement(is_temp) [0-90] [create  temporary...e testlang]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  Identifier(testlang) [82-90] [testlang]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-103] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [81-86] [(y=z)]
    OptionsEntry [82-85] [y=z]
      Identifier(y) [82-83] [y]
      PathExpression [84-85] [z]
        Identifier(z) [84-85] [z]
  Query [90-103] [select 1 as x]
    Select [90-103] [select 1 as x]
      SelectList [97-103] [1 as x]
        SelectColumn [97-103] [1 as x]
          IntLiteral(1) [97-98] [1]
          Alias [99-103] [as x]
            Identifier(x) [102-103] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,,,options(y=z),
--
CreateTableFunctionStatement(is_temp) [0-86] [create  temporary...tions(y=z)]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  OptionsList [81-86] [(y=z)]
    OptionsEntry [82-85] [y=z]
      Identifier(y) [82-83] [y]
      PathExpression [84-85] [z]
        Identifier(z) [84-85] [z]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (y = z)
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-91] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
  Query [78-91] [select 1 as x]
    Select [78-91] [select 1 as x]
      SelectList [85-91] [1 as x]
        SelectColumn [85-91] [1 as x]
          IntLiteral(1) [85-86] [1]
          Alias [87-91] [as x]
            Identifier(x) [90-91] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,returns table<x int64>,,,,,
--
CreateTableFunctionStatement(is_temp) [0-70] [create  temporary...e<x int64>]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  TVFSchema [56-70] [table<x int64>]
    TVFSchemaColumn [62-69] [x int64]
      Identifier(x) [62-63] [x]
      SimpleType [64-69] [int64]
        PathExpression [64-69] [int64]
          Identifier(int64) [64-69] [int64]
--
CREATE TEMP TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: temporary,,,,sql security invoker,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-118] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [77-82] [(a=b)]
    OptionsEntry [78-81] [a=b]
      Identifier(a) [78-79] [a]
      PathExpression [80-81] [b]
        Identifier(b) [80-81] [b]
  Identifier(testlang) [92-100] [testlang]
  Query [105-118] [select 1 as x]
    Select [105-118] [select 1 as x]
      SelectList [112-118] [1 as x]
        SelectColumn [112-118] [1 as x]
          IntLiteral(1) [112-113] [1]
          Alias [114-118] [as x]
            Identifier(x) [117-118] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,sql security invoker,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_temp) [0-100] [create  temporary...e testlang]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [77-82] [(a=b)]
    OptionsEntry [78-81] [a=b]
      Identifier(a) [78-79] [a]
      PathExpression [80-81] [b]
        Identifier(b) [80-81] [b]
  Identifier(testlang) [92-100] [testlang]
--
CREATE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: temporary,,,,sql security invoker,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-101] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [77-82] [(a=b)]
    OptionsEntry [78-81] [a=b]
      Identifier(a) [78-79] [a]
      PathExpression [80-81] [b]
        Identifier(b) [80-81] [b]
  Query [88-101] [select 1 as x]
    Select [88-101] [select 1 as x]
      SelectList [95-101] [1 as x]
        SelectColumn [95-101] [1 as x]
          IntLiteral(1) [95-96] [1]
          Alias [97-101] [as x]
            Identifier(x) [100-101] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,sql security invoker,options(a=b),,,
--
CreateTableFunctionStatement(is_temp) [0-82] [create  temporary...tions(a=b)]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [77-82] [(a=b)]
    OptionsEntry [78-81] [a=b]
      Identifier(a) [78-79] [a]
      PathExpression [80-81] [b]
        Identifier(b) [80-81] [b]
--
CREATE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER OPTIONS
  (a = b)
--
ALTERNATION GROUP: temporary,,,,sql security invoker,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-118] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [96-101] [(y=z)]
    OptionsEntry [97-100] [y=z]
      Identifier(y) [97-98] [y]
      PathExpression [99-100] [z]
        Identifier(z) [99-100] [z]
  Identifier(testlang) [80-88] [testlang]
  Query [105-118] [select 1 as x]
    Select [105-118] [select 1 as x]
      SelectList [112-118] [1 as x]
        SelectColumn [112-118] [1 as x]
          IntLiteral(1) [112-113] [1]
          Alias [114-118] [as x]
            Identifier(x) [117-118] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,sql security invoker,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_temp) [0-101] [create  temporary...tions(y=z)]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [96-101] [(y=z)]
    OptionsEntry [97-100] [y=z]
      Identifier(y) [97-98] [y]
      PathExpression [99-100] [z]
        Identifier(z) [99-100] [z]
  Identifier(testlang) [80-88] [testlang]
--
CREATE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: temporary,,,,sql security invoker,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-106] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  Identifier(testlang) [80-88] [testlang]
  Query [93-106] [select 1 as x]
    Select [93-106] [select 1 as x]
      SelectList [100-106] [1 as x]
        SelectColumn [100-106] [1 as x]
          IntLiteral(1) [100-101] [1]
          Alias [102-106] [as x]
            Identifier(x) [105-106] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,sql security invoker,,language testlang,,
--
CreateTableFunctionStatement(is_temp) [0-88] [create  temporary...e testlang]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  Identifier(testlang) [80-88] [testlang]
--
CREATE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,,,sql security invoker,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-101] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [79-84] [(y=z)]
    OptionsEntry [80-83] [y=z]
      Identifier(y) [80-81] [y]
      PathExpression [82-83] [z]
        Identifier(z) [82-83] [z]
  Query [88-101] [select 1 as x]
    Select [88-101] [select 1 as x]
      SelectList [95-101] [1 as x]
        SelectColumn [95-101] [1 as x]
          IntLiteral(1) [95-96] [1]
          Alias [97-101] [as x]
            Identifier(x) [100-101] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,sql security invoker,,,options(y=z),
--
CreateTableFunctionStatement(is_temp) [0-84] [create  temporary...tions(y=z)]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [79-84] [(y=z)]
    OptionsEntry [80-83] [y=z]
      Identifier(y) [80-81] [y]
      PathExpression [82-83] [z]
        Identifier(z) [82-83] [z]
--
CREATE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER OPTIONS
  (y = z)
--
ALTERNATION GROUP: temporary,,,,sql security invoker,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-89] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  Query [76-89] [select 1 as x]
    Select [76-89] [select 1 as x]
      SelectList [83-89] [1 as x]
        SelectColumn [83-89] [1 as x]
          IntLiteral(1) [83-84] [1]
          Alias [85-89] [as x]
            Identifier(x) [88-89] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,sql security invoker,,,,
--
CreateTableFunctionStatement(is_temp) [0-69] [create  temporary...ty invoker]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
--
CREATE TEMP TABLE FUNCTION myfunction()
SQL SECURITY INVOKER
--
ALTERNATION GROUP: temporary,,,,,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-98] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [57-62] [(a=b)]
    OptionsEntry [58-61] [a=b]
      Identifier(a) [58-59] [a]
      PathExpression [60-61] [b]
        Identifier(b) [60-61] [b]
  Identifier(testlang) [72-80] [testlang]
  Query [85-98] [select 1 as x]
    Select [85-98] [select 1 as x]
      SelectList [92-98] [1 as x]
        SelectColumn [92-98] [1 as x]
          IntLiteral(1) [92-93] [1]
          Alias [94-98] [as x]
            Identifier(x) [97-98] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_temp) [0-80] [create  temporary...e testlang]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [57-62] [(a=b)]
    OptionsEntry [58-61] [a=b]
      Identifier(a) [58-59] [a]
      PathExpression [60-61] [b]
        Identifier(b) [60-61] [b]
  Identifier(testlang) [72-80] [testlang]
--
CREATE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: temporary,,,,,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-81] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [57-62] [(a=b)]
    OptionsEntry [58-61] [a=b]
      Identifier(a) [58-59] [a]
      PathExpression [60-61] [b]
        Identifier(b) [60-61] [b]
  Query [68-81] [select 1 as x]
    Select [68-81] [select 1 as x]
      SelectList [75-81] [1 as x]
        SelectColumn [75-81] [1 as x]
          IntLiteral(1) [75-76] [1]
          Alias [77-81] [as x]
            Identifier(x) [80-81] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,,options(a=b),,,
--
CreateTableFunctionStatement(is_temp) [0-62] [create  temporary...tions(a=b)]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [57-62] [(a=b)]
    OptionsEntry [58-61] [a=b]
      Identifier(a) [58-59] [a]
      PathExpression [60-61] [b]
        Identifier(b) [60-61] [b]
--
CREATE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (a = b)
--
ALTERNATION GROUP: temporary,,,,,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-98] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [76-81] [(y=z)]
    OptionsEntry [77-80] [y=z]
      Identifier(y) [77-78] [y]
      PathExpression [79-80] [z]
        Identifier(z) [79-80] [z]
  Identifier(testlang) [60-68] [testlang]
  Query [85-98] [select 1 as x]
    Select [85-98] [select 1 as x]
      SelectList [92-98] [1 as x]
        SelectColumn [92-98] [1 as x]
          IntLiteral(1) [92-93] [1]
          Alias [94-98] [as x]
            Identifier(x) [97-98] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_temp) [0-81] [create  temporary...tions(y=z)]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [76-81] [(y=z)]
    OptionsEntry [77-80] [y=z]
      Identifier(y) [77-78] [y]
      PathExpression [79-80] [z]
        Identifier(z) [79-80] [z]
  Identifier(testlang) [60-68] [testlang]
--
CREATE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: temporary,,,,,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-86] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  Identifier(testlang) [60-68] [testlang]
  Query [73-86] [select 1 as x]
    Select [73-86] [select 1 as x]
      SelectList [80-86] [1 as x]
        SelectColumn [80-86] [1 as x]
          IntLiteral(1) [80-81] [1]
          Alias [82-86] [as x]
            Identifier(x) [85-86] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,,,language testlang,,
--
CreateTableFunctionStatement(is_temp) [0-68] [create  temporary...e testlang]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  Identifier(testlang) [60-68] [testlang]
--
CREATE TEMP TABLE FUNCTION myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: temporary,,,,,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-81] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [59-64] [(y=z)]
    OptionsEntry [60-63] [y=z]
      Identifier(y) [60-61] [y]
      PathExpression [62-63] [z]
        Identifier(z) [62-63] [z]
  Query [68-81] [select 1 as x]
    Select [68-81] [select 1 as x]
      SelectList [75-81] [1 as x]
        SelectColumn [75-81] [1 as x]
          IntLiteral(1) [75-76] [1]
          Alias [77-81] [as x]
            Identifier(x) [80-81] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,,,,options(y=z),
--
CreateTableFunctionStatement(is_temp) [0-64] [create  temporary...tions(y=z)]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  OptionsList [59-64] [(y=z)]
    OptionsEntry [60-63] [y=z]
      Identifier(y) [60-61] [y]
      PathExpression [62-63] [z]
        Identifier(z) [62-63] [z]
--
CREATE TEMP TABLE FUNCTION myfunction()
OPTIONS
  (y = z)
--
ALTERNATION GROUP: temporary,,,,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_temp) [0-69] [create  temporary...ect 1 as x]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
  Query [56-69] [select 1 as x]
    Select [56-69] [select 1 as x]
      SelectList [63-69] [1 as x]
        SelectColumn [63-69] [1 as x]
          IntLiteral(1) [63-64] [1]
          Alias [65-69] [as x]
            Identifier(x) [68-69] [x]
--
CREATE TEMP TABLE FUNCTION myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: temporary,,,,,,,,
--
CreateTableFunctionStatement(is_temp) [0-47] [create  temporary...function()]
  FunctionDeclaration [35-47] [myfunction()]
    PathExpression [35-45] [myfunction]
      Identifier(myfunction) [35-45] [myfunction]
    FunctionParameters [45-47] [()]
--
CREATE TEMP TABLE FUNCTION myfunction()
--
ALTERNATION GROUP: if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-144] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [103-108] [(a=b)]
    OptionsEntry [104-107] [a=b]
      Identifier(a) [104-105] [a]
      PathExpression [106-107] [b]
        Identifier(b) [106-107] [b]
  Identifier(testlang) [118-126] [testlang]
  Query [131-144] [select 1 as x]
    Select [131-144] [select 1 as x]
      SelectList [138-144] [1 as x]
        SelectColumn [138-144] [1 as x]
          IntLiteral(1) [138-139] [1]
          Alias [140-144] [as x]
            Identifier(x) [143-144] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,sql security invoker,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-126] [create...language testlang]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [103-108] [(a=b)]
    OptionsEntry [104-107] [a=b]
      Identifier(a) [104-105] [a]
      PathExpression [106-107] [b]
        Identifier(b) [106-107] [b]
  Identifier(testlang) [118-126] [testlang]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: if not exists,returns table<x int64>,sql security invoker,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-127] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [103-108] [(a=b)]
    OptionsEntry [104-107] [a=b]
      Identifier(a) [104-105] [a]
      PathExpression [106-107] [b]
        Identifier(b) [106-107] [b]
  Query [114-127] [select 1 as x]
    Select [114-127] [select 1 as x]
      SelectList [121-127] [1 as x]
        SelectColumn [121-127] [1 as x]
          IntLiteral(1) [121-122] [1]
          Alias [123-127] [as x]
            Identifier(x) [126-127] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,sql security invoker,options(a=b),,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-108] [create...options(a=b)]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [103-108] [(a=b)]
    OptionsEntry [104-107] [a=b]
      Identifier(a) [104-105] [a]
      PathExpression [106-107] [b]
        Identifier(b) [106-107] [b]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (a = b)
--
ALTERNATION GROUP: if not exists,returns table<x int64>,sql security invoker,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-144] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [122-127] [(y=z)]
    OptionsEntry [123-126] [y=z]
      Identifier(y) [123-124] [y]
      PathExpression [125-126] [z]
        Identifier(z) [125-126] [z]
  Identifier(testlang) [106-114] [testlang]
  Query [131-144] [select 1 as x]
    Select [131-144] [select 1 as x]
      SelectList [138-144] [1 as x]
        SelectColumn [138-144] [1 as x]
          IntLiteral(1) [138-139] [1]
          Alias [140-144] [as x]
            Identifier(x) [143-144] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,sql security invoker,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_if_not_exists) [0-127] [create...options(y=z)]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [122-127] [(y=z)]
    OptionsEntry [123-126] [y=z]
      Identifier(y) [123-124] [y]
      PathExpression [125-126] [z]
        Identifier(z) [125-126] [z]
  Identifier(testlang) [106-114] [testlang]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: if not exists,returns table<x int64>,sql security invoker,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-132] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  Identifier(testlang) [106-114] [testlang]
  Query [119-132] [select 1 as x]
    Select [119-132] [select 1 as x]
      SelectList [126-132] [1 as x]
        SelectColumn [126-132] [1 as x]
          IntLiteral(1) [126-127] [1]
          Alias [128-132] [as x]
            Identifier(x) [131-132] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,sql security invoker,,language testlang,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-114] [create...language testlang]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  Identifier(testlang) [106-114] [testlang]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang
--
ALTERNATION GROUP: if not exists,returns table<x int64>,sql security invoker,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-127] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [105-110] [(y=z)]
    OptionsEntry [106-109] [y=z]
      Identifier(y) [106-107] [y]
      PathExpression [108-109] [z]
        Identifier(z) [108-109] [z]
  Query [114-127] [select 1 as x]
    Select [114-127] [select 1 as x]
      SelectList [121-127] [1 as x]
        SelectColumn [121-127] [1 as x]
          IntLiteral(1) [121-122] [1]
          Alias [123-127] [as x]
            Identifier(x) [126-127] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,sql security invoker,,,options(y=z),
--
CreateTableFunctionStatement(is_if_not_exists) [0-110] [create...options(y=z)]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [105-110] [(y=z)]
    OptionsEntry [106-109] [y=z]
      Identifier(y) [106-107] [y]
      PathExpression [108-109] [z]
        Identifier(z) [108-109] [z]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (y = z)
--
ALTERNATION GROUP: if not exists,returns table<x int64>,sql security invoker,,,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-115] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  Query [102-115] [select 1 as x]
    Select [102-115] [select 1 as x]
      SelectList [109-115] [1 as x]
        SelectColumn [109-115] [1 as x]
          IntLiteral(1) [109-110] [1]
          Alias [111-115] [as x]
            Identifier(x) [114-115] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,sql security invoker,,,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-95] [create...security invoker]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-124] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [83-88] [(a=b)]
    OptionsEntry [84-87] [a=b]
      Identifier(a) [84-85] [a]
      PathExpression [86-87] [b]
        Identifier(b) [86-87] [b]
  Identifier(testlang) [98-106] [testlang]
  Query [111-124] [select 1 as x]
    Select [111-124] [select 1 as x]
      SelectList [118-124] [1 as x]
        SelectColumn [118-124] [1 as x]
          IntLiteral(1) [118-119] [1]
          Alias [120-124] [as x]
            Identifier(x) [123-124] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-106] [create...language testlang]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [83-88] [(a=b)]
    OptionsEntry [84-87] [a=b]
      Identifier(a) [84-85] [a]
      PathExpression [86-87] [b]
        Identifier(b) [86-87] [b]
  Identifier(testlang) [98-106] [testlang]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-107] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [83-88] [(a=b)]
    OptionsEntry [84-87] [a=b]
      Identifier(a) [84-85] [a]
      PathExpression [86-87] [b]
        Identifier(b) [86-87] [b]
  Query [94-107] [select 1 as x]
    Select [94-107] [select 1 as x]
      SelectList [101-107] [1 as x]
        SelectColumn [101-107] [1 as x]
          IntLiteral(1) [101-102] [1]
          Alias [103-107] [as x]
            Identifier(x) [106-107] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,options(a=b),,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-88] [create...options(a=b)]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [83-88] [(a=b)]
    OptionsEntry [84-87] [a=b]
      Identifier(a) [84-85] [a]
      PathExpression [86-87] [b]
        Identifier(b) [86-87] [b]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (a = b)
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-124] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [102-107] [(y=z)]
    OptionsEntry [103-106] [y=z]
      Identifier(y) [103-104] [y]
      PathExpression [105-106] [z]
        Identifier(z) [105-106] [z]
  Identifier(testlang) [86-94] [testlang]
  Query [111-124] [select 1 as x]
    Select [111-124] [select 1 as x]
      SelectList [118-124] [1 as x]
        SelectColumn [118-124] [1 as x]
          IntLiteral(1) [118-119] [1]
          Alias [120-124] [as x]
            Identifier(x) [123-124] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_if_not_exists) [0-107] [create...options(y=z)]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [102-107] [(y=z)]
    OptionsEntry [103-106] [y=z]
      Identifier(y) [103-104] [y]
      PathExpression [105-106] [z]
        Identifier(z) [105-106] [z]
  Identifier(testlang) [86-94] [testlang]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-112] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  Identifier(testlang) [86-94] [testlang]
  Query [99-112] [select 1 as x]
    Select [99-112] [select 1 as x]
      SelectList [106-112] [1 as x]
        SelectColumn [106-112] [1 as x]
          IntLiteral(1) [106-107] [1]
          Alias [108-112] [as x]
            Identifier(x) [111-112] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,,language testlang,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-94] [create...language testlang]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  Identifier(testlang) [86-94] [testlang]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-107] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [85-90] [(y=z)]
    OptionsEntry [86-89] [y=z]
      Identifier(y) [86-87] [y]
      PathExpression [88-89] [z]
        Identifier(z) [88-89] [z]
  Query [94-107] [select 1 as x]
    Select [94-107] [select 1 as x]
      SelectList [101-107] [1 as x]
        SelectColumn [101-107] [1 as x]
          IntLiteral(1) [101-102] [1]
          Alias [103-107] [as x]
            Identifier(x) [106-107] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,,,options(y=z),
--
CreateTableFunctionStatement(is_if_not_exists) [0-90] [create...options(y=z)]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  OptionsList [85-90] [(y=z)]
    OptionsEntry [86-89] [y=z]
      Identifier(y) [86-87] [y]
      PathExpression [88-89] [z]
        Identifier(z) [88-89] [z]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (y = z)
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-95] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
  Query [82-95] [select 1 as x]
    Select [82-95] [select 1 as x]
      SelectList [89-95] [1 as x]
        SelectColumn [89-95] [1 as x]
          IntLiteral(1) [89-90] [1]
          Alias [91-95] [as x]
            Identifier(x) [94-95] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,returns table<x int64>,,,,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-74] [create...table<x int64>]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  TVFSchema [60-74] [table<x int64>]
    TVFSchemaColumn [66-73] [x int64]
      Identifier(x) [66-67] [x]
      SimpleType [68-73] [int64]
        PathExpression [68-73] [int64]
          Identifier(int64) [68-73] [int64]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: if not exists,,sql security invoker,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-122] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [81-86] [(a=b)]
    OptionsEntry [82-85] [a=b]
      Identifier(a) [82-83] [a]
      PathExpression [84-85] [b]
        Identifier(b) [84-85] [b]
  Identifier(testlang) [96-104] [testlang]
  Query [109-122] [select 1 as x]
    Select [109-122] [select 1 as x]
      SelectList [116-122] [1 as x]
        SelectColumn [116-122] [1 as x]
          IntLiteral(1) [116-117] [1]
          Alias [118-122] [as x]
            Identifier(x) [121-122] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,sql security invoker,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-104] [create...language testlang]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [81-86] [(a=b)]
    OptionsEntry [82-85] [a=b]
      Identifier(a) [82-83] [a]
      PathExpression [84-85] [b]
        Identifier(b) [84-85] [b]
  Identifier(testlang) [96-104] [testlang]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: if not exists,,sql security invoker,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-105] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [81-86] [(a=b)]
    OptionsEntry [82-85] [a=b]
      Identifier(a) [82-83] [a]
      PathExpression [84-85] [b]
        Identifier(b) [84-85] [b]
  Query [92-105] [select 1 as x]
    Select [92-105] [select 1 as x]
      SelectList [99-105] [1 as x]
        SelectColumn [99-105] [1 as x]
          IntLiteral(1) [99-100] [1]
          Alias [101-105] [as x]
            Identifier(x) [104-105] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,sql security invoker,options(a=b),,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-86] [create...options(a=b)]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [81-86] [(a=b)]
    OptionsEntry [82-85] [a=b]
      Identifier(a) [82-83] [a]
      PathExpression [84-85] [b]
        Identifier(b) [84-85] [b]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER OPTIONS
  (a = b)
--
ALTERNATION GROUP: if not exists,,sql security invoker,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-122] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [100-105] [(y=z)]
    OptionsEntry [101-104] [y=z]
      Identifier(y) [101-102] [y]
      PathExpression [103-104] [z]
        Identifier(z) [103-104] [z]
  Identifier(testlang) [84-92] [testlang]
  Query [109-122] [select 1 as x]
    Select [109-122] [select 1 as x]
      SelectList [116-122] [1 as x]
        SelectColumn [116-122] [1 as x]
          IntLiteral(1) [116-117] [1]
          Alias [118-122] [as x]
            Identifier(x) [121-122] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,sql security invoker,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_if_not_exists) [0-105] [create...options(y=z)]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [100-105] [(y=z)]
    OptionsEntry [101-104] [y=z]
      Identifier(y) [101-102] [y]
      PathExpression [103-104] [z]
        Identifier(z) [103-104] [z]
  Identifier(testlang) [84-92] [testlang]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: if not exists,,sql security invoker,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-110] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  Identifier(testlang) [84-92] [testlang]
  Query [97-110] [select 1 as x]
    Select [97-110] [select 1 as x]
      SelectList [104-110] [1 as x]
        SelectColumn [104-110] [1 as x]
          IntLiteral(1) [104-105] [1]
          Alias [106-110] [as x]
            Identifier(x) [109-110] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,sql security invoker,,language testlang,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-92] [create...language testlang]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  Identifier(testlang) [84-92] [testlang]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER LANGUAGE testlang
--
ALTERNATION GROUP: if not exists,,sql security invoker,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-105] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [83-88] [(y=z)]
    OptionsEntry [84-87] [y=z]
      Identifier(y) [84-85] [y]
      PathExpression [86-87] [z]
        Identifier(z) [86-87] [z]
  Query [92-105] [select 1 as x]
    Select [92-105] [select 1 as x]
      SelectList [99-105] [1 as x]
        SelectColumn [99-105] [1 as x]
          IntLiteral(1) [99-100] [1]
          Alias [101-105] [as x]
            Identifier(x) [104-105] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,sql security invoker,,,options(y=z),
--
CreateTableFunctionStatement(is_if_not_exists) [0-88] [create...options(y=z)]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [83-88] [(y=z)]
    OptionsEntry [84-87] [y=z]
      Identifier(y) [84-85] [y]
      PathExpression [86-87] [z]
        Identifier(z) [86-87] [z]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER OPTIONS
  (y = z)
--
ALTERNATION GROUP: if not exists,,sql security invoker,,,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-93] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  Query [80-93] [select 1 as x]
    Select [80-93] [select 1 as x]
      SelectList [87-93] [1 as x]
        SelectColumn [87-93] [1 as x]
          IntLiteral(1) [87-88] [1]
          Alias [89-93] [as x]
            Identifier(x) [92-93] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,sql security invoker,,,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-73] [create...security invoker]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
SQL SECURITY INVOKER
--
ALTERNATION GROUP: if not exists,,,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-102] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [61-66] [(a=b)]
    OptionsEntry [62-65] [a=b]
      Identifier(a) [62-63] [a]
      PathExpression [64-65] [b]
        Identifier(b) [64-65] [b]
  Identifier(testlang) [76-84] [testlang]
  Query [89-102] [select 1 as x]
    Select [89-102] [select 1 as x]
      SelectList [96-102] [1 as x]
        SelectColumn [96-102] [1 as x]
          IntLiteral(1) [96-97] [1]
          Alias [98-102] [as x]
            Identifier(x) [101-102] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,,options(a=b),language testlang,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-84] [create...language testlang]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [61-66] [(a=b)]
    OptionsEntry [62-65] [a=b]
      Identifier(a) [62-63] [a]
      PathExpression [64-65] [b]
        Identifier(b) [64-65] [b]
  Identifier(testlang) [76-84] [testlang]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: if not exists,,,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-85] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [61-66] [(a=b)]
    OptionsEntry [62-65] [a=b]
      Identifier(a) [62-63] [a]
      PathExpression [64-65] [b]
        Identifier(b) [64-65] [b]
  Query [72-85] [select 1 as x]
    Select [72-85] [select 1 as x]
      SelectList [79-85] [1 as x]
        SelectColumn [79-85] [1 as x]
          IntLiteral(1) [79-80] [1]
          Alias [81-85] [as x]
            Identifier(x) [84-85] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,,options(a=b),,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-66] [create...options(a=b)]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [61-66] [(a=b)]
    OptionsEntry [62-65] [a=b]
      Identifier(a) [62-63] [a]
      PathExpression [64-65] [b]
        Identifier(b) [64-65] [b]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (a = b)
--
ALTERNATION GROUP: if not exists,,,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-102] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [80-85] [(y=z)]
    OptionsEntry [81-84] [y=z]
      Identifier(y) [81-82] [y]
      PathExpression [83-84] [z]
        Identifier(z) [83-84] [z]
  Identifier(testlang) [64-72] [testlang]
  Query [89-102] [select 1 as x]
    Select [89-102] [select 1 as x]
      SelectList [96-102] [1 as x]
        SelectColumn [96-102] [1 as x]
          IntLiteral(1) [96-97] [1]
          Alias [98-102] [as x]
            Identifier(x) [101-102] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,,,language testlang,options(y=z),
--
CreateTableFunctionStatement(is_if_not_exists) [0-85] [create...options(y=z)]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [80-85] [(y=z)]
    OptionsEntry [81-84] [y=z]
      Identifier(y) [81-82] [y]
      PathExpression [83-84] [z]
        Identifier(z) [83-84] [z]
  Identifier(testlang) [64-72] [testlang]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: if not exists,,,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-90] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  Identifier(testlang) [64-72] [testlang]
  Query [77-90] [select 1 as x]
    Select [77-90] [select 1 as x]
      SelectList [84-90] [1 as x]
        SelectColumn [84-90] [1 as x]
          IntLiteral(1) [84-85] [1]
          Alias [86-90] [as x]
            Identifier(x) [89-90] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,,,language testlang,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-72] [create...language testlang]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  Identifier(testlang) [64-72] [testlang]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: if not exists,,,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-85] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [63-68] [(y=z)]
    OptionsEntry [64-67] [y=z]
      Identifier(y) [64-65] [y]
      PathExpression [66-67] [z]
        Identifier(z) [66-67] [z]
  Query [72-85] [select 1 as x]
    Select [72-85] [select 1 as x]
      SelectList [79-85] [1 as x]
        SelectColumn [79-85] [1 as x]
          IntLiteral(1) [79-80] [1]
          Alias [81-85] [as x]
            Identifier(x) [84-85] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,,,,options(y=z),
--
CreateTableFunctionStatement(is_if_not_exists) [0-68] [create...options(y=z)]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  OptionsList [63-68] [(y=z)]
    OptionsEntry [64-67] [y=z]
      Identifier(y) [64-65] [y]
      PathExpression [66-67] [z]
        Identifier(z) [66-67] [z]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
OPTIONS
  (y = z)
--
ALTERNATION GROUP: if not exists,,,,,,as select 1 as x
--
CreateTableFunctionStatement(is_if_not_exists) [0-73] [create...select 1 as x]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
  Query [60-73] [select 1 as x]
    Select [60-73] [select 1 as x]
      SelectList [67-73] [1 as x]
        SelectColumn [67-73] [1 as x]
          IntLiteral(1) [67-68] [1]
          Alias [69-73] [as x]
            Identifier(x) [72-73] [x]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: if not exists,,,,,,
--
CreateTableFunctionStatement(is_if_not_exists) [0-51] [create...myfunction()]
  FunctionDeclaration [39-51] [myfunction()]
    PathExpression [39-49] [myfunction]
      Identifier(myfunction) [39-49] [myfunction]
    FunctionParameters [49-51] [()]
--
CREATE TABLE FUNCTION IF NOT EXISTS myfunction()
--
ALTERNATION GROUP: returns table<x int64>,sql security invoker,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement [0-131] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [90-95] [(a=b)]
    OptionsEntry [91-94] [a=b]
      Identifier(a) [91-92] [a]
      PathExpression [93-94] [b]
        Identifier(b) [93-94] [b]
  Identifier(testlang) [105-113] [testlang]
  Query [118-131] [select 1 as x]
    Select [118-131] [select 1 as x]
      SelectList [125-131] [1 as x]
        SelectColumn [125-131] [1 as x]
          IntLiteral(1) [125-126] [1]
          Alias [127-131] [as x]
            Identifier(x) [130-131] [x]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,sql security invoker,options(a=b),language testlang,,
--
CreateTableFunctionStatement [0-113] [create...language testlang]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [90-95] [(a=b)]
    OptionsEntry [91-94] [a=b]
      Identifier(a) [91-92] [a]
      PathExpression [93-94] [b]
        Identifier(b) [93-94] [b]
  Identifier(testlang) [105-113] [testlang]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: returns table<x int64>,sql security invoker,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement [0-114] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [90-95] [(a=b)]
    OptionsEntry [91-94] [a=b]
      Identifier(a) [91-92] [a]
      PathExpression [93-94] [b]
        Identifier(b) [93-94] [b]
  Query [101-114] [select 1 as x]
    Select [101-114] [select 1 as x]
      SelectList [108-114] [1 as x]
        SelectColumn [108-114] [1 as x]
          IntLiteral(1) [108-109] [1]
          Alias [110-114] [as x]
            Identifier(x) [113-114] [x]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,sql security invoker,options(a=b),,,
--
CreateTableFunctionStatement [0-95] [create...options(a=b)]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [90-95] [(a=b)]
    OptionsEntry [91-94] [a=b]
      Identifier(a) [91-92] [a]
      PathExpression [93-94] [b]
        Identifier(b) [93-94] [b]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (a = b)
--
ALTERNATION GROUP: returns table<x int64>,sql security invoker,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement [0-131] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [109-114] [(y=z)]
    OptionsEntry [110-113] [y=z]
      Identifier(y) [110-111] [y]
      PathExpression [112-113] [z]
        Identifier(z) [112-113] [z]
  Identifier(testlang) [93-101] [testlang]
  Query [118-131] [select 1 as x]
    Select [118-131] [select 1 as x]
      SelectList [125-131] [1 as x]
        SelectColumn [125-131] [1 as x]
          IntLiteral(1) [125-126] [1]
          Alias [127-131] [as x]
            Identifier(x) [130-131] [x]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,sql security invoker,,language testlang,options(y=z),
--
CreateTableFunctionStatement [0-114] [create...options(y=z)]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [109-114] [(y=z)]
    OptionsEntry [110-113] [y=z]
      Identifier(y) [110-111] [y]
      PathExpression [112-113] [z]
        Identifier(z) [112-113] [z]
  Identifier(testlang) [93-101] [testlang]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: returns table<x int64>,sql security invoker,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement [0-119] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  Identifier(testlang) [93-101] [testlang]
  Query [106-119] [select 1 as x]
    Select [106-119] [select 1 as x]
      SelectList [113-119] [1 as x]
        SelectColumn [113-119] [1 as x]
          IntLiteral(1) [113-114] [1]
          Alias [115-119] [as x]
            Identifier(x) [118-119] [x]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,sql security invoker,,language testlang,,
--
CreateTableFunctionStatement [0-101] [create...language testlang]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  Identifier(testlang) [93-101] [testlang]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER LANGUAGE testlang
--
ALTERNATION GROUP: returns table<x int64>,sql security invoker,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement [0-114] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [92-97] [(y=z)]
    OptionsEntry [93-96] [y=z]
      Identifier(y) [93-94] [y]
      PathExpression [95-96] [z]
        Identifier(z) [95-96] [z]
  Query [101-114] [select 1 as x]
    Select [101-114] [select 1 as x]
      SelectList [108-114] [1 as x]
        SelectColumn [108-114] [1 as x]
          IntLiteral(1) [108-109] [1]
          Alias [110-114] [as x]
            Identifier(x) [113-114] [x]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,sql security invoker,,,options(y=z),
--
CreateTableFunctionStatement [0-97] [create...options(y=z)]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [92-97] [(y=z)]
    OptionsEntry [93-96] [y=z]
      Identifier(y) [93-94] [y]
      PathExpression [95-96] [z]
        Identifier(z) [95-96] [z]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER OPTIONS
  (y = z)
--
ALTERNATION GROUP: returns table<x int64>,sql security invoker,,,,as select 1 as x
--
CreateTableFunctionStatement [0-102] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  Query [89-102] [select 1 as x]
    Select [89-102] [select 1 as x]
      SelectList [96-102] [1 as x]
        SelectColumn [96-102] [1 as x]
          IntLiteral(1) [96-97] [1]
          Alias [98-102] [as x]
            Identifier(x) [101-102] [x]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,sql security invoker,,,,
--
CreateTableFunctionStatement [0-82] [create...security invoker]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > SQL SECURITY INVOKER
--
ALTERNATION GROUP: returns table<x int64>,,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement [0-111] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [70-75] [(a=b)]
    OptionsEntry [71-74] [a=b]
      Identifier(a) [71-72] [a]
      PathExpression [73-74] [b]
        Identifier(b) [73-74] [b]
  Identifier(testlang) [85-93] [testlang]
  Query [98-111] [select 1 as x]
    Select [98-111] [select 1 as x]
      SelectList [105-111] [1 as x]
        SelectColumn [105-111] [1 as x]
          IntLiteral(1) [105-106] [1]
          Alias [107-111] [as x]
            Identifier(x) [110-111] [x]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,,options(a=b),language testlang,,
--
CreateTableFunctionStatement [0-93] [create...language testlang]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [70-75] [(a=b)]
    OptionsEntry [71-74] [a=b]
      Identifier(a) [71-72] [a]
      PathExpression [73-74] [b]
        Identifier(b) [73-74] [b]
  Identifier(testlang) [85-93] [testlang]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: returns table<x int64>,,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement [0-94] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [70-75] [(a=b)]
    OptionsEntry [71-74] [a=b]
      Identifier(a) [71-72] [a]
      PathExpression [73-74] [b]
        Identifier(b) [73-74] [b]
  Query [81-94] [select 1 as x]
    Select [81-94] [select 1 as x]
      SelectList [88-94] [1 as x]
        SelectColumn [88-94] [1 as x]
          IntLiteral(1) [88-89] [1]
          Alias [90-94] [as x]
            Identifier(x) [93-94] [x]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,,options(a=b),,,
--
CreateTableFunctionStatement [0-75] [create...options(a=b)]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [70-75] [(a=b)]
    OptionsEntry [71-74] [a=b]
      Identifier(a) [71-72] [a]
      PathExpression [73-74] [b]
        Identifier(b) [73-74] [b]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (a = b)
--
ALTERNATION GROUP: returns table<x int64>,,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement [0-111] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [89-94] [(y=z)]
    OptionsEntry [90-93] [y=z]
      Identifier(y) [90-91] [y]
      PathExpression [92-93] [z]
        Identifier(z) [92-93] [z]
  Identifier(testlang) [73-81] [testlang]
  Query [98-111] [select 1 as x]
    Select [98-111] [select 1 as x]
      SelectList [105-111] [1 as x]
        SelectColumn [105-111] [1 as x]
          IntLiteral(1) [105-106] [1]
          Alias [107-111] [as x]
            Identifier(x) [110-111] [x]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,,,language testlang,options(y=z),
--
CreateTableFunctionStatement [0-94] [create...options(y=z)]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [89-94] [(y=z)]
    OptionsEntry [90-93] [y=z]
      Identifier(y) [90-91] [y]
      PathExpression [92-93] [z]
        Identifier(z) [92-93] [z]
  Identifier(testlang) [73-81] [testlang]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: returns table<x int64>,,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement [0-99] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  Identifier(testlang) [73-81] [testlang]
  Query [86-99] [select 1 as x]
    Select [86-99] [select 1 as x]
      SelectList [93-99] [1 as x]
        SelectColumn [93-99] [1 as x]
          IntLiteral(1) [93-94] [1]
          Alias [95-99] [as x]
            Identifier(x) [98-99] [x]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,,,language testlang,,
--
CreateTableFunctionStatement [0-81] [create...language testlang]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  Identifier(testlang) [73-81] [testlang]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > LANGUAGE testlang
--
ALTERNATION GROUP: returns table<x int64>,,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement [0-94] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [72-77] [(y=z)]
    OptionsEntry [73-76] [y=z]
      Identifier(y) [73-74] [y]
      PathExpression [75-76] [z]
        Identifier(z) [75-76] [z]
  Query [81-94] [select 1 as x]
    Select [81-94] [select 1 as x]
      SelectList [88-94] [1 as x]
        SelectColumn [88-94] [1 as x]
          IntLiteral(1) [88-89] [1]
          Alias [90-94] [as x]
            Identifier(x) [93-94] [x]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,,,,options(y=z),
--
CreateTableFunctionStatement [0-77] [create...options(y=z)]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  OptionsList [72-77] [(y=z)]
    OptionsEntry [73-76] [y=z]
      Identifier(y) [73-74] [y]
      PathExpression [75-76] [z]
        Identifier(z) [75-76] [z]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > OPTIONS
  (y = z)
--
ALTERNATION GROUP: returns table<x int64>,,,,,as select 1 as x
--
CreateTableFunctionStatement [0-82] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
  Query [69-82] [select 1 as x]
    Select [69-82] [select 1 as x]
      SelectList [76-82] [1 as x]
        SelectColumn [76-82] [1 as x]
          IntLiteral(1) [76-77] [1]
          Alias [78-82] [as x]
            Identifier(x) [81-82] [x]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 > AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: returns table<x int64>,,,,,
--
CreateTableFunctionStatement [0-61] [create...table<x int64>]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  TVFSchema [47-61] [table<x int64>]
    TVFSchemaColumn [53-60] [x int64]
      Identifier(x) [53-54] [x]
      SimpleType [55-60] [int64]
        PathExpression [55-60] [int64]
          Identifier(int64) [55-60] [int64]
--
CREATE TABLE FUNCTION myfunction()
RETURNS TABLE< x int64 >
--
ALTERNATION GROUP: sql security invoker,options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement [0-109] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [68-73] [(a=b)]
    OptionsEntry [69-72] [a=b]
      Identifier(a) [69-70] [a]
      PathExpression [71-72] [b]
        Identifier(b) [71-72] [b]
  Identifier(testlang) [83-91] [testlang]
  Query [96-109] [select 1 as x]
    Select [96-109] [select 1 as x]
      SelectList [103-109] [1 as x]
        SelectColumn [103-109] [1 as x]
          IntLiteral(1) [103-104] [1]
          Alias [105-109] [as x]
            Identifier(x) [108-109] [x]
--
CREATE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: sql security invoker,options(a=b),language testlang,,
--
CreateTableFunctionStatement [0-91] [create...language testlang]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [68-73] [(a=b)]
    OptionsEntry [69-72] [a=b]
      Identifier(a) [69-70] [a]
      PathExpression [71-72] [b]
        Identifier(b) [71-72] [b]
  Identifier(testlang) [83-91] [testlang]
--
CREATE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: sql security invoker,options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement [0-92] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [68-73] [(a=b)]
    OptionsEntry [69-72] [a=b]
      Identifier(a) [69-70] [a]
      PathExpression [71-72] [b]
        Identifier(b) [71-72] [b]
  Query [79-92] [select 1 as x]
    Select [79-92] [select 1 as x]
      SelectList [86-92] [1 as x]
        SelectColumn [86-92] [1 as x]
          IntLiteral(1) [86-87] [1]
          Alias [88-92] [as x]
            Identifier(x) [91-92] [x]
--
CREATE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: sql security invoker,options(a=b),,,
--
CreateTableFunctionStatement [0-73] [create...options(a=b)]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [68-73] [(a=b)]
    OptionsEntry [69-72] [a=b]
      Identifier(a) [69-70] [a]
      PathExpression [71-72] [b]
        Identifier(b) [71-72] [b]
--
CREATE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER OPTIONS
  (a = b)
--
ALTERNATION GROUP: sql security invoker,,language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement [0-109] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [87-92] [(y=z)]
    OptionsEntry [88-91] [y=z]
      Identifier(y) [88-89] [y]
      PathExpression [90-91] [z]
        Identifier(z) [90-91] [z]
  Identifier(testlang) [71-79] [testlang]
  Query [96-109] [select 1 as x]
    Select [96-109] [select 1 as x]
      SelectList [103-109] [1 as x]
        SelectColumn [103-109] [1 as x]
          IntLiteral(1) [103-104] [1]
          Alias [105-109] [as x]
            Identifier(x) [108-109] [x]
--
CREATE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: sql security invoker,,language testlang,options(y=z),
--
CreateTableFunctionStatement [0-92] [create...options(y=z)]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [87-92] [(y=z)]
    OptionsEntry [88-91] [y=z]
      Identifier(y) [88-89] [y]
      PathExpression [90-91] [z]
        Identifier(z) [90-91] [z]
  Identifier(testlang) [71-79] [testlang]
--
CREATE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: sql security invoker,,language testlang,,as select 1 as x
--
CreateTableFunctionStatement [0-97] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  Identifier(testlang) [71-79] [testlang]
  Query [84-97] [select 1 as x]
    Select [84-97] [select 1 as x]
      SelectList [91-97] [1 as x]
        SelectColumn [91-97] [1 as x]
          IntLiteral(1) [91-92] [1]
          Alias [93-97] [as x]
            Identifier(x) [96-97] [x]
--
CREATE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: sql security invoker,,language testlang,,
--
CreateTableFunctionStatement [0-79] [create...language testlang]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  Identifier(testlang) [71-79] [testlang]
--
CREATE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER LANGUAGE testlang
--
ALTERNATION GROUP: sql security invoker,,,options(y=z),as select 1 as x
--
CreateTableFunctionStatement [0-92] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [70-75] [(y=z)]
    OptionsEntry [71-74] [y=z]
      Identifier(y) [71-72] [y]
      PathExpression [73-74] [z]
        Identifier(z) [73-74] [z]
  Query [79-92] [select 1 as x]
    Select [79-92] [select 1 as x]
      SelectList [86-92] [1 as x]
        SelectColumn [86-92] [1 as x]
          IntLiteral(1) [86-87] [1]
          Alias [88-92] [as x]
            Identifier(x) [91-92] [x]
--
CREATE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: sql security invoker,,,options(y=z),
--
CreateTableFunctionStatement [0-75] [create...options(y=z)]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [70-75] [(y=z)]
    OptionsEntry [71-74] [y=z]
      Identifier(y) [71-72] [y]
      PathExpression [73-74] [z]
        Identifier(z) [73-74] [z]
--
CREATE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER OPTIONS
  (y = z)
--
ALTERNATION GROUP: sql security invoker,,,,as select 1 as x
--
CreateTableFunctionStatement [0-80] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  Query [67-80] [select 1 as x]
    Select [67-80] [select 1 as x]
      SelectList [74-80] [1 as x]
        SelectColumn [74-80] [1 as x]
          IntLiteral(1) [74-75] [1]
          Alias [76-80] [as x]
            Identifier(x) [79-80] [x]
--
CREATE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: sql security invoker,,,,
--
CreateTableFunctionStatement [0-60] [create...security invoker]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
--
CREATE TABLE FUNCTION myfunction()
SQL SECURITY INVOKER
--
ALTERNATION GROUP: options(a=b),language testlang,,as select 1 as x
--
CreateTableFunctionStatement [0-89] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [48-53] [(a=b)]
    OptionsEntry [49-52] [a=b]
      Identifier(a) [49-50] [a]
      PathExpression [51-52] [b]
        Identifier(b) [51-52] [b]
  Identifier(testlang) [63-71] [testlang]
  Query [76-89] [select 1 as x]
    Select [76-89] [select 1 as x]
      SelectList [83-89] [1 as x]
        SelectColumn [83-89] [1 as x]
          IntLiteral(1) [83-84] [1]
          Alias [85-89] [as x]
            Identifier(x) [88-89] [x]
--
CREATE TABLE FUNCTION myfunction()
LANGUAGE testlang OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: options(a=b),language testlang,,
--
CreateTableFunctionStatement [0-71] [create...language testlang]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [48-53] [(a=b)]
    OptionsEntry [49-52] [a=b]
      Identifier(a) [49-50] [a]
      PathExpression [51-52] [b]
        Identifier(b) [51-52] [b]
  Identifier(testlang) [63-71] [testlang]
--
CREATE TABLE FUNCTION myfunction()
LANGUAGE testlang OPTIONS
  (a = b)
--
ALTERNATION GROUP: options(a=b),,,as select 1 as x
--
CreateTableFunctionStatement [0-72] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [48-53] [(a=b)]
    OptionsEntry [49-52] [a=b]
      Identifier(a) [49-50] [a]
      PathExpression [51-52] [b]
        Identifier(b) [51-52] [b]
  Query [59-72] [select 1 as x]
    Select [59-72] [select 1 as x]
      SelectList [66-72] [1 as x]
        SelectColumn [66-72] [1 as x]
          IntLiteral(1) [66-67] [1]
          Alias [68-72] [as x]
            Identifier(x) [71-72] [x]
--
CREATE TABLE FUNCTION myfunction()
OPTIONS
  (a = b) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: options(a=b),,,
--
CreateTableFunctionStatement [0-53] [create...options(a=b)]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [48-53] [(a=b)]
    OptionsEntry [49-52] [a=b]
      Identifier(a) [49-50] [a]
      PathExpression [51-52] [b]
        Identifier(b) [51-52] [b]
--
CREATE TABLE FUNCTION myfunction()
OPTIONS
  (a = b)
--
ALTERNATION GROUP: language testlang,options(y=z),as select 1 as x
--
CreateTableFunctionStatement [0-89] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [67-72] [(y=z)]
    OptionsEntry [68-71] [y=z]
      Identifier(y) [68-69] [y]
      PathExpression [70-71] [z]
        Identifier(z) [70-71] [z]
  Identifier(testlang) [51-59] [testlang]
  Query [76-89] [select 1 as x]
    Select [76-89] [select 1 as x]
      SelectList [83-89] [1 as x]
        SelectColumn [83-89] [1 as x]
          IntLiteral(1) [83-84] [1]
          Alias [85-89] [as x]
            Identifier(x) [88-89] [x]
--
CREATE TABLE FUNCTION myfunction()
LANGUAGE testlang OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: language testlang,options(y=z),
--
CreateTableFunctionStatement [0-72] [create...options(y=z)]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [67-72] [(y=z)]
    OptionsEntry [68-71] [y=z]
      Identifier(y) [68-69] [y]
      PathExpression [70-71] [z]
        Identifier(z) [70-71] [z]
  Identifier(testlang) [51-59] [testlang]
--
CREATE TABLE FUNCTION myfunction()
LANGUAGE testlang OPTIONS
  (y = z)
--
ALTERNATION GROUP: language testlang,,as select 1 as x
--
CreateTableFunctionStatement [0-77] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  Identifier(testlang) [51-59] [testlang]
  Query [64-77] [select 1 as x]
    Select [64-77] [select 1 as x]
      SelectList [71-77] [1 as x]
        SelectColumn [71-77] [1 as x]
          IntLiteral(1) [71-72] [1]
          Alias [73-77] [as x]
            Identifier(x) [76-77] [x]
--
CREATE TABLE FUNCTION myfunction()
LANGUAGE testlang AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: language testlang,,
--
CreateTableFunctionStatement [0-59] [create...language testlang]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  Identifier(testlang) [51-59] [testlang]
--
CREATE TABLE FUNCTION myfunction()
LANGUAGE testlang
--
ALTERNATION GROUP: options(y=z),as select 1 as x
--
CreateTableFunctionStatement [0-72] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [50-55] [(y=z)]
    OptionsEntry [51-54] [y=z]
      Identifier(y) [51-52] [y]
      PathExpression [53-54] [z]
        Identifier(z) [53-54] [z]
  Query [59-72] [select 1 as x]
    Select [59-72] [select 1 as x]
      SelectList [66-72] [1 as x]
        SelectColumn [66-72] [1 as x]
          IntLiteral(1) [66-67] [1]
          Alias [68-72] [as x]
            Identifier(x) [71-72] [x]
--
CREATE TABLE FUNCTION myfunction()
OPTIONS
  (y = z) AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: options(y=z),
--
CreateTableFunctionStatement [0-55] [create...options(y=z)]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  OptionsList [50-55] [(y=z)]
    OptionsEntry [51-54] [y=z]
      Identifier(y) [51-52] [y]
      PathExpression [53-54] [z]
        Identifier(z) [53-54] [z]
--
CREATE TABLE FUNCTION myfunction()
OPTIONS
  (y = z)
--
ALTERNATION GROUP: as select 1 as x
--
CreateTableFunctionStatement [0-60] [create...select 1 as x]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
  Query [47-60] [select 1 as x]
    Select [47-60] [select 1 as x]
      SelectList [54-60] [1 as x]
        SelectColumn [54-60] [1 as x]
          IntLiteral(1) [54-55] [1]
          Alias [56-60] [as x]
            Identifier(x) [59-60] [x]
--
CREATE TABLE FUNCTION myfunction()
AS
  SELECT
    1 AS x
--
ALTERNATION GROUP: <empty>
--
CreateTableFunctionStatement [0-38] [create...myfunction()]
  FunctionDeclaration [26-38] [myfunction()]
    PathExpression [26-36] [myfunction]
      Identifier(myfunction) [26-36] [myfunction]
    FunctionParameters [36-38] [()]
--
CREATE TABLE FUNCTION myfunction()
