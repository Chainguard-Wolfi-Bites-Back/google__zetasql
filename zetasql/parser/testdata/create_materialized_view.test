# PARTITION BY with multiple columns and expressions
create materialized view mv
partition by c1, c2 + cast(c3 as int64)
as select c1, c2, c3, c4 from t2
--
CreateMaterializedViewStatement [0-100] [create materializ...c4 from t2]
  PathExpression [25-27] [mv]
    Identifier(mv) [25-27] [mv]
  PartitionBy [28-67] [partition...as int64)]
    PathExpression [41-43] [c1]
      Identifier(c1) [41-43] [c1]
    BinaryExpression(+) [45-67] [c2 + cast(c3 as int64)]
      PathExpression [45-47] [c2]
        Identifier(c2) [45-47] [c2]
      CastExpression [50-67] [cast(c3 as int64)]
        PathExpression [55-57] [c3]
          Identifier(c3) [55-57] [c3]
        SimpleType [61-66] [int64]
          PathExpression [61-66] [int64]
            Identifier(int64) [61-66] [int64]
  Query [71-100] [select c1, c2, c3, c4 from t2]
    Select [71-100] [select c1, c2, c3, c4 from t2]
      SelectList [78-92] [c1, c2, c3, c4]
        SelectColumn [78-80] [c1]
          PathExpression [78-80] [c1]
            Identifier(c1) [78-80] [c1]
        SelectColumn [82-84] [c2]
          PathExpression [82-84] [c2]
            Identifier(c2) [82-84] [c2]
        SelectColumn [86-88] [c3]
          PathExpression [86-88] [c3]
            Identifier(c3) [86-88] [c3]
        SelectColumn [90-92] [c4]
          PathExpression [90-92] [c4]
            Identifier(c4) [90-92] [c4]
      FromClause [93-100] [from t2]
        TablePathExpression [98-100] [t2]
          PathExpression [98-100] [t2]
            Identifier(t2) [98-100] [t2]
--
CREATE MATERIALIZED VIEW mv PARTITION BY c1, c2 + CAST(c3 AS int64) AS
SELECT
  c1,
  c2,
  c3,
  c4
FROM
  t2
==

# PARTITION BY with multiple columns and expressions and select(*)
create materialized view mv
partition by c1, c2 + cast(c3 as int64)
as select * from t2
--
CreateMaterializedViewStatement [0-87] [create materializ...* from t2]
  PathExpression [25-27] [mv]
    Identifier(mv) [25-27] [mv]
  PartitionBy [28-67] [partition...as int64)]
    PathExpression [41-43] [c1]
      Identifier(c1) [41-43] [c1]
    BinaryExpression(+) [45-67] [c2 + cast(c3 as int64)]
      PathExpression [45-47] [c2]
        Identifier(c2) [45-47] [c2]
      CastExpression [50-67] [cast(c3 as int64)]
        PathExpression [55-57] [c3]
          Identifier(c3) [55-57] [c3]
        SimpleType [61-66] [int64]
          PathExpression [61-66] [int64]
            Identifier(int64) [61-66] [int64]
  Query [71-87] [select * from t2]
    Select [71-87] [select * from t2]
      SelectList [78-79] [*]
        SelectColumn [78-79] [*]
          Star(*) [78-79] [*]
      FromClause [80-87] [from t2]
        TablePathExpression [85-87] [t2]
          PathExpression [85-87] [t2]
            Identifier(t2) [85-87] [t2]
--
CREATE MATERIALIZED VIEW mv PARTITION BY c1, c2 + CAST(c3 AS int64) AS
SELECT
  *
FROM
  t2
==

# PARTITION BY with OPTIONS
create materialized view mv
partition by c1, c2 + cast(c3 as int64)
options (foo=true)
as select * from t2
--
CreateMaterializedViewStatement [0-106] [create materializ...* from t2]
  PathExpression [25-27] [mv]
    Identifier(mv) [25-27] [mv]
  PartitionBy [28-67] [partition...as int64)]
    PathExpression [41-43] [c1]
      Identifier(c1) [41-43] [c1]
    BinaryExpression(+) [45-67] [c2 + cast(c3 as int64)]
      PathExpression [45-47] [c2]
        Identifier(c2) [45-47] [c2]
      CastExpression [50-67] [cast(c3 as int64)]
        PathExpression [55-57] [c3]
          Identifier(c3) [55-57] [c3]
        SimpleType [61-66] [int64]
          PathExpression [61-66] [int64]
            Identifier(int64) [61-66] [int64]
  OptionsList [76-86] [(foo=true)]
    OptionsEntry [77-85] [foo=true]
      Identifier(foo) [77-80] [foo]
      BooleanLiteral(true) [81-85] [true]
  Query [90-106] [select * from t2]
    Select [90-106] [select * from t2]
      SelectList [97-98] [*]
        SelectColumn [97-98] [*]
          Star(*) [97-98] [*]
      FromClause [99-106] [from t2]
        TablePathExpression [104-106] [t2]
          PathExpression [104-106] [t2]
            Identifier(t2) [104-106] [t2]
--
CREATE MATERIALIZED VIEW mv PARTITION BY c1, c2 + CAST(c3 AS int64) OPTIONS(foo = true) AS
SELECT
  *
FROM
  t2
==

# PARTITION BY and CLUSTER BY with multiple columns and expressions
create materialized view mv
partition by c1, c2 + cast(c3 as int64)
cluster by mod(c1, 2)
as select * from t2
--
CreateMaterializedViewStatement [0-109] [create materializ...* from t2]
  PathExpression [25-27] [mv]
    Identifier(mv) [25-27] [mv]
  PartitionBy [28-67] [partition...as int64)]
    PathExpression [41-43] [c1]
      Identifier(c1) [41-43] [c1]
    BinaryExpression(+) [45-67] [c2 + cast(c3 as int64)]
      PathExpression [45-47] [c2]
        Identifier(c2) [45-47] [c2]
      CastExpression [50-67] [cast(c3 as int64)]
        PathExpression [55-57] [c3]
          Identifier(c3) [55-57] [c3]
        SimpleType [61-66] [int64]
          PathExpression [61-66] [int64]
            Identifier(int64) [61-66] [int64]
  ClusterBy [68-89] [cluster by mod(c1, 2)]
    FunctionCall [79-89] [mod(c1, 2)]
      PathExpression [79-82] [mod]
        Identifier(mod) [79-82] [mod]
      PathExpression [83-85] [c1]
        Identifier(c1) [83-85] [c1]
      IntLiteral(2) [87-88] [2]
  Query [93-109] [select * from t2]
    Select [93-109] [select * from t2]
      SelectList [100-101] [*]
        SelectColumn [100-101] [*]
          Star(*) [100-101] [*]
      FromClause [102-109] [from t2]
        TablePathExpression [107-109] [t2]
          PathExpression [107-109] [t2]
            Identifier(t2) [107-109] [t2]
--
CREATE MATERIALIZED VIEW mv PARTITION BY c1, c2 + CAST(c3 AS int64) CLUSTER BY mod(c1, 2) AS
SELECT
  *
FROM
  t2
==

# CLUSTER BY without PARTITION BY
create materialized view mv
cluster by c1
as select * from t2
--
CreateMaterializedViewStatement [0-61] [create materializ...* from t2]
  PathExpression [25-27] [mv]
    Identifier(mv) [25-27] [mv]
  ClusterBy [28-41] [cluster by c1]
    PathExpression [39-41] [c1]
      Identifier(c1) [39-41] [c1]
  Query [45-61] [select * from t2]
    Select [45-61] [select * from t2]
      SelectList [52-53] [*]
        SelectColumn [52-53] [*]
          Star(*) [52-53] [*]
      FromClause [54-61] [from t2]
        TablePathExpression [59-61] [t2]
          PathExpression [59-61] [t2]
            Identifier(t2) [59-61] [t2]
--
CREATE MATERIALIZED VIEW mv CLUSTER BY c1 AS
SELECT
  *
FROM
  t2
==

# PARTITION BY and CLUSTER BY in wrong order
create materialized view mv
cluster by mod(c1, 2)
partition by c1, c2 + cast(c3 as int64)
as select * from t2
--
ERROR: Syntax error: Expected keyword AS but got keyword PARTITION [at 3:1]
partition by c1, c2 + cast(c3 as int64)
^
==

# PARTITION BY with hints - disallowed
create materialized view mv
partition @{hint_name=5} by c1, c2 + cast(c3 as int64);
as select * from t2
--
ERROR: Syntax error: Expected keyword BY but got "@" [at 2:11]
partition @{hint_name=5} by c1, c2 + cast(c3 as int64);
          ^
==

# CLUSTER BY with hints - disallowed
create materialized view mv
cluster @{hint_name=5} by c1
as select * from t2
--
ERROR: Syntax error: Expected keyword BY but got "@" [at 2:9]
cluster @{hint_name=5} by c1
        ^
==

# PARTITION BY without expression
create materialized view mv
partition by
as select * from t2
--
ERROR: Syntax error: Unexpected keyword AS [at 3:1]
as select * from t2
^
==

# CLUSTER BY without expression
create materialized view mv
cluster by
as select * from t2
--
ERROR: Syntax error: Unexpected keyword AS [at 3:1]
as select * from t2
^
==

create materialized view mv
partition by c1
cluster by c2
as select timestamp as c1, string as c2, int32 as c3 from SimpleTypes
--
CreateMaterializedViewStatement [0-127] [create materializ...impleTypes]
  PathExpression [25-27] [mv]
    Identifier(mv) [25-27] [mv]
  PartitionBy [28-43] [partition by c1]
    PathExpression [41-43] [c1]
      Identifier(c1) [41-43] [c1]
  ClusterBy [44-57] [cluster by c2]
    PathExpression [55-57] [c2]
      Identifier(c2) [55-57] [c2]
  Query [61-127] [select timestamp...SimpleTypes]
    Select [61-127] [select timestamp...SimpleTypes]
      SelectList [68-110] [timestamp...int32 as c3]
        SelectColumn [68-83] [timestamp as c1]
          PathExpression [68-77] [timestamp]
            Identifier(timestamp) [68-77] [timestamp]
          Alias [78-83] [as c1]
            Identifier(c1) [81-83] [c1]
        SelectColumn [85-97] [string as c2]
          PathExpression [85-91] [string]
            Identifier(string) [85-91] [string]
          Alias [92-97] [as c2]
            Identifier(c2) [95-97] [c2]
        SelectColumn [99-110] [int32 as c3]
          PathExpression [99-104] [int32]
            Identifier(int32) [99-104] [int32]
          Alias [105-110] [as c3]
            Identifier(c3) [108-110] [c3]
      FromClause [111-127] [from SimpleTypes]
        TablePathExpression [116-127] [SimpleTypes]
          PathExpression [116-127] [SimpleTypes]
            Identifier(SimpleTypes) [116-127] [SimpleTypes]
--
CREATE MATERIALIZED VIEW mv PARTITION BY c1 CLUSTER BY c2 AS
SELECT
  timestamp AS c1,
  string AS c2,
  int32 AS c3
FROM
  SimpleTypes
==

CREATE MATERIALIZED VIEW mv
--
ERROR: Syntax error: Expected keyword AS but got end of statement [at 1:28]
CREATE MATERIALIZED VIEW mv
                           ^
==

CREATE MATERIALIZED VIEW rm1 AS REPLICA OF src_ds.src
--
CreateMaterializedViewStatement [0-53] [CREATE MATERIALIZ...src_ds.src]
  PathExpression [25-28] [rm1]
    Identifier(rm1) [25-28] [rm1]
  PathExpression [43-53] [src_ds.src]
    Identifier(src_ds) [43-49] [src_ds]
    Identifier(src) [50-53] [src]
--
CREATE MATERIALIZED VIEW rm1 AS REPLICA OF
src_ds.src
==

CREATE MATERIALIZED VIEW rm1 OPTIONS (replica_interval_minutes = 300) AS REPLICA OF src_ds.src
--
CreateMaterializedViewStatement [0-94] [CREATE MATERIALIZ...src_ds.src]
  PathExpression [25-28] [rm1]
    Identifier(rm1) [25-28] [rm1]
  OptionsList [37-69] [(replica_interval...tes = 300)]
    OptionsEntry [38-68] [replica_interval_minutes = 300]
      Identifier(replica_interval_minutes) [38-62] [replica_interval_minutes]
      IntLiteral(300) [65-68] [300]
  PathExpression [84-94] [src_ds.src]
    Identifier(src_ds) [84-90] [src_ds]
    Identifier(src) [91-94] [src]
--
CREATE MATERIALIZED VIEW rm1 OPTIONS(replica_interval_minutes = 300) AS REPLICA OF
src_ds.src
==

CREATE MATERIALIZED VIEW rm1 AS REPLICA OF src_ds.src WHERE id = 'foo'
--
ERROR: Syntax error: Expected end of input but got keyword WHERE [at 1:55]
CREATE MATERIALIZED VIEW rm1 AS REPLICA OF src_ds.src WHERE id = 'foo'
                                                      ^
==

CREATE MATERIALIZED VIEW rm1
CLUSTER BY c1
AS REPLICA OF src_ds.src WHERE id = 'foo'
--
ERROR: Syntax error: Expected end of input but got keyword WHERE [at 3:26]
AS REPLICA OF src_ds.src WHERE id = 'foo'
                         ^
==

CREATE MATERIALIZED VIEW rm1
PARTITION BY c1
AS REPLICA OF src_ds.src
--
CreateMaterializedViewStatement [0-69] [CREATE MATERIALIZ...src_ds.src]
  PathExpression [25-28] [rm1]
    Identifier(rm1) [25-28] [rm1]
  PartitionBy [29-44] [PARTITION BY c1]
    PathExpression [42-44] [c1]
      Identifier(c1) [42-44] [c1]
  PathExpression [59-69] [src_ds.src]
    Identifier(src_ds) [59-65] [src_ds]
    Identifier(src) [66-69] [src]
--
CREATE MATERIALIZED VIEW rm1 PARTITION BY c1 AS REPLICA OF
src_ds.src
==

CREATE MATERIALIZED VIEW rm1
SQL SECURITY INVOKER
AS REPLICA OF src_ds.src
--
CreateMaterializedViewStatement(SQL SECURITY INVOKER) [0-74] [CREATE MATERIALIZ...src_ds.src]
  PathExpression [25-28] [rm1]
    Identifier(rm1) [25-28] [rm1]
  PathExpression [64-74] [src_ds.src]
    Identifier(src_ds) [64-70] [src_ds]
    Identifier(src) [71-74] [src]
--
CREATE MATERIALIZED VIEW rm1 SQL SECURITY INVOKER AS REPLICA OF
src_ds.src
