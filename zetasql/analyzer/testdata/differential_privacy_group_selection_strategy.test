[default also_show_signature_mismatch_details]
[default language_features=DIFFERENTIAL_PRIVACY,NAMED_ARGUMENTS,DIFFERENTIAL_PRIVACY_PUBLIC_GROUPS,V_1_1_WITH_ON_SUBQUERY]
[default enabled_ast_rewrites=DEFAULTS,+ANONYMIZATION]
[default no_run_unparser]
# When no group_selection_strategy is set, default to laplace thresholding.
select with differential_privacy
{{|options(group_selection_strategy=LAPLACE_THRESHOLD)}}
count(*)
from SimpleTypesWithAnonymizationUid;
--
ALTERNATION GROUP: <empty>
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
          +-$agg1#13 :=
            +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
              +-Literal(type=STRUCT<INT64, INT64>, value=NULL)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   +-input_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   +-group_by_list=
        |   | +-$uid#17 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#16 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#16)
        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        | +-$group_selection_threshold_col#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
        | +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#20)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=LAPLACE_THRESHOLD)
--
ALTERNATION GROUP: options(group_selection_strategy=LAPLACE_THRESHOLD)
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=LAPLACE_THRESHOLD)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   +-input_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   +-group_by_list=
        |   | +-$uid#17 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#16 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#16)
        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        | +-$group_selection_threshold_col#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
        | +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#20)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=LAPLACE_THRESHOLD)
==

[language_features=DIFFERENTIAL_PRIVACY,NAMED_ARGUMENTS,DIFFERENTIAL_PRIVACY_PUBLIC_GROUPS,V_1_1_WITH_ON_SUBQUERY,TABLESAMPLE]
# Forbidden operations after public groups joins are allowed outside of the
# dp aggregate scan with per-group contribution bounding.
SELECT string, anon_users
FROM
(
  SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
    max_groups_contributed=NULL,
    group_selection_strategy = PUBLIC_GROUPS
  ) string, COUNT(*) AS anon_users
  FROM
    SimpleTypesWithAnonymizationUid
    RIGHT OUTER JOIN
    (SELECT DISTINCT string FROM SimpleTypes)
      USING (string)
  GROUP BY string
)
TABLESAMPLE BERNOULLI(1 PERCENT)
WHERE anon_users > 10
LIMIT 11;
--
QueryStmt
+-output_column_list=
| +-$groupby.string#33 AS string [STRING]
| +-$aggregate.anon_users#32 AS anon_users [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |   +-input_scan=
    |     +-FilterScan
    |       +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |       +-input_scan=
    |       | +-SampleScan
    |       |   +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |       |   +-input_scan=
    |       |   | +-ProjectScan
    |       |   |   +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |       |   |   +-input_scan=
    |       |   |     +-DifferentialPrivacyAggregateScan
    |       |   |       +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |       |   |       +-input_scan=
    |       |   |       | +-JoinScan
    |       |   |       |   +-column_list=[SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
    |       |   |       |   +-join_type=RIGHT
    |       |   |       |   +-left_scan=
    |       |   |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[4])
    |       |   |       |   +-right_scan=
    |       |   |       |   | +-AggregateScan
    |       |   |       |   |   +-column_list=[$distinct.string#31]
    |       |   |       |   |   +-input_scan=
    |       |   |       |   |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
    |       |   |       |   |   +-group_by_list=
    |       |   |       |   |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
    |       |   |       |   +-join_expr=
    |       |   |       |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |       |   |       |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
    |       |   |       |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
    |       |   |       |   +-has_using=TRUE
    |       |   |       +-group_by_list=
    |       |   |       | +-string#33 := ColumnRef(type=STRING, column=$distinct.string#31)
    |       |   |       +-aggregate_list=
    |       |   |       | +-anon_users#32 :=
    |       |   |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    |       |   |       |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
    |       |   |       +-option_list=
    |       |   |         +-max_groups_contributed := Literal(type=INT64, value=NULL)
    |       |   |         +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
    |       |   +-method="bernoulli"
    |       |   +-size=
    |       |   | +-Literal(type=INT64, value=1)
    |       |   +-unit=PERCENT
    |       +-filter_expr=
    |         +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |           +-ColumnRef(type=INT64, column=$aggregate.anon_users#32)
    |           +-Literal(type=INT64, value=10)
    +-limit=
      +-Literal(type=INT64, value=11)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#33 AS string [STRING]
| +-$aggregate.anon_users#32 AS anon_users [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |   +-input_scan=
    |     +-FilterScan
    |       +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |       +-input_scan=
    |       | +-SampleScan
    |       |   +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |       |   +-input_scan=
    |       |   | +-ProjectScan
    |       |   |   +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |       |   |   +-input_scan=
    |       |   |     +-DifferentialPrivacyAggregateScan
    |       |   |       +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |       |   |       +-input_scan=
    |       |   |       | +-AggregateScan
    |       |   |       |   +-column_list=[$aggregate.anon_users_partial#36, $groupby.string_partial#37, $group_by.$uid#38]
    |       |   |       |   +-input_scan=
    |       |   |       |   | +-JoinScan
    |       |   |       |   |   +-column_list=[SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31, SimpleTypesWithAnonymizationUid.uid#34]
    |       |   |       |   |   +-join_type=RIGHT
    |       |   |       |   |   +-left_scan=
    |       |   |       |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#34], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
    |       |   |       |   |   +-right_scan=
    |       |   |       |   |   | +-AggregateScan
    |       |   |       |   |   |   +-column_list=[$distinct.string#31]
    |       |   |       |   |   |   +-input_scan=
    |       |   |       |   |   |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
    |       |   |       |   |   |   +-group_by_list=
    |       |   |       |   |   |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
    |       |   |       |   |   +-join_expr=
    |       |   |       |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |       |   |       |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
    |       |   |       |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
    |       |   |       |   |   +-has_using=TRUE
    |       |   |       |   +-group_by_list=
    |       |   |       |   | +-string_partial#37 := ColumnRef(type=STRING, column=$distinct.string#31)
    |       |   |       |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#34)
    |       |   |       |   +-aggregate_list=
    |       |   |       |     +-anon_users_partial#36 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    |       |   |       +-group_by_list=
    |       |   |       | +-string#33 := ColumnRef(type=STRING, column=$groupby.string_partial#37)
    |       |   |       +-aggregate_list=
    |       |   |       | +-anon_users#32 :=
    |       |   |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    |       |   |       |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |       |   |       |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
    |       |   |       |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#38)
    |       |   |       |     | +-Literal(type=INT64, value=NULL)
    |       |   |       |     | +-ColumnRef(type=INT64, column=$aggregate.anon_users_partial#36)
    |       |   |       |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
    |       |   |       +-option_list=
    |       |   |         +-max_groups_contributed := Literal(type=INT64, value=NULL)
    |       |   |         +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
    |       |   +-method="bernoulli"
    |       |   +-size=
    |       |   | +-Literal(type=INT64, value=1)
    |       |   +-unit=PERCENT
    |       +-filter_expr=
    |         +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |           +-ColumnRef(type=INT64, column=$aggregate.anon_users#32)
    |           +-Literal(type=INT64, value=10)
    +-limit=
      +-Literal(type=INT64, value=11)
==

# Use case without max_groups_contributed and without public groups.
select with differential_privacy options(group_selection_strategy=LAPLACE_THRESHOLD, max_groups_contributed=null)
count(*)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=LAPLACE_THRESHOLD)
          +-max_groups_contributed := Literal(type=INT64, value=NULL)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   +-input_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   +-group_by_list=
        |   | +-$uid#17 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#16 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#16)
        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        | +-$group_selection_threshold_col#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
        | +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#20)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=LAPLACE_THRESHOLD)
          +-max_groups_contributed := Literal(type=INT64, value=NULL)
==

# Use case with max_groups_contributed, but without public groups.
select with differential_privacy options(
  group_selection_strategy=LAPLACE_THRESHOLD,
  max_groups_contributed=3
) count(*)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=LAPLACE_THRESHOLD)
          +-max_groups_contributed := Literal(type=INT64, value=3)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-SampleScan
        |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |   +-group_by_list=
        |   |   | +-$uid#17 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        |   |   +-aggregate_list=
        |   |     +-$agg1_partial#16 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   +-method="RESERVOIR"
        |   +-size=
        |   | +-Literal(type=INT64, value=3)
        |   +-unit=ROWS
        |   +-partition_by_list=
        |     +-ColumnRef(type=INT64, column=$group_by.$uid#17)
        +-aggregate_list=
        | +-$agg1#13 :=
        | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#16)
        | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        | +-$group_selection_threshold_col#20 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=INT64, value=1)
        |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
        +-group_selection_threshold_expr=
        | +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#20)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=LAPLACE_THRESHOLD)
          +-max_groups_contributed := Literal(type=INT64, value=3)
==

# public groups requires feature flag
[language_features=DIFFERENTIAL_PRIVACY,NAMED_ARGUMENTS]
select with differential_privacy options(group_selection_strategy=PUBLIC_GROUPS)
count(*)
from SimpleTypesWithAnonymizationUid;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


Rewrite ERROR: Differential privacy option group_selection_strategy PUBLIC_GROUPS has not been enabled
==

# public groups requires V_1_1_WITH_ON_SUBQUERY feature
[language_features=DIFFERENTIAL_PRIVACY,NAMED_ARGUMENTS,DIFFERENTIAL_PRIVACY_PUBLIC_GROUPS]
select with differential_privacy options(group_selection_strategy=PUBLIC_GROUPS)
count(*)
from SimpleTypesWithAnonymizationUid;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


Rewrite ERROR: Differential privacy option group_selection_strategy PUBLIC_GROUPS is not supported without support for WITH subqueries
==

# Happy path without max_groups_contributed and no GROUP BY.
select with differential_privacy options(group_selection_strategy=PUBLIC_GROUPS)
count(*)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   +-input_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   +-group_by_list=
        |   | +-$uid#17 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        |   +-aggregate_list=
        |     +-$agg1_partial#16 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
        |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
        |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#17)
        |     | +-Literal(type=INT64, value=NULL)
        |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#16)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
==

# Happy path with max_groups_contributed and no GROUP BY.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) count(*)
from SimpleTypesWithAnonymizationUid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(table=SimpleTypesWithAnonymizationUid)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-SampleScan
        |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   +-input_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$aggregate.$agg1_partial#16, $group_by.$uid#17]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |   +-group_by_list=
        |   |   | +-$uid#17 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#14)
        |   |   +-aggregate_list=
        |   |     +-$agg1_partial#16 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |   +-method="RESERVOIR"
        |   +-size=
        |   | +-Literal(type=INT64, value=3)
        |   +-unit=ROWS
        |   +-partition_by_list=
        |     +-ColumnRef(type=INT64, column=$group_by.$uid#17)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
        |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
        |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#17)
        |     | +-Literal(type=INT64, value=NULL)
        |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#16)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)
==

# Happy path without max_groups_contributed with GROUP BY.  This only requires
# an outer join before the per-user aggregate scan.
select with differential_privacy options(group_selection_strategy=PUBLIC_GROUPS)
count(*)
from SimpleTypesWithAnonymizationUid
right outer join (select distinct int64 from SimpleTypes)
  using (int64)
group by int64;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.int64#31]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   |   +-group_by_list=
        |   |     +-int64#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#33 := ColumnRef(type=INT64, column=$distinct.int64#31)
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31, SimpleTypesWithAnonymizationUid.uid#34]
        |   |   +-join_type=RIGHT
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#34], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        |   |   +-right_scan=
        |   |   | +-AggregateScan
        |   |   |   +-column_list=[$distinct.int64#31]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   |   |   +-group_by_list=
        |   |   |     +-int64#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   |   +-join_expr=
        |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
        |   |   +-has_using=TRUE
        |   +-group_by_list=
        |   | +-int64_partial#37 := ColumnRef(type=INT64, column=$distinct.int64#31)
        |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#34)
        |   +-aggregate_list=
        |     +-$agg1_partial#36 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-group_by_list=
        | +-int64#33 := ColumnRef(type=INT64, column=$groupby.int64_partial#37)
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
        |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
        |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#38)
        |     | +-Literal(type=INT64, value=NULL)
        |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#36)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
==

# Happy path with max_groups_contributed, GROUP BY, and RIGHT OUTER JOIN.  This
# introduces an additional join and adds a WithScan for the public groups.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) count(*)
from SimpleTypesWithAnonymizationUid
right outer join (select distinct int64 from SimpleTypes)
  using (int64)
group by int64;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.int64#31]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   |   +-group_by_list=
        |   |     +-int64#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#33 := ColumnRef(type=INT64, column=$distinct.int64#31)
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-WithScan
        +-column_list=[$aggregate.$agg1#32]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="$public_groups0"
        |   +-with_subquery=
        |     +-AggregateScan
        |       +-column_list=[$distinct.int64#41]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypes.int64#42], table=SimpleTypes, column_index_list=[1])
        |       +-group_by_list=
        |         +-int64#41 := ColumnRef(type=INT64, column=SimpleTypes.int64#42)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$aggregate.$agg1#32]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups0.int64#40, $aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   |   |   +-input_scan=
            |   |   |   | +-JoinScan
            |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31, SimpleTypesWithAnonymizationUid.uid#34]
            |   |   |   |   +-left_scan=
            |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#34], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
            |   |   |   |   +-right_scan=
            |   |   |   |   | +-WithRefScan(column_list=[$distinct.int64#31], with_query_name="$public_groups0")
            |   |   |   |   +-join_expr=
            |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
            |   |   |   |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
            |   |   |   |   +-has_using=TRUE
            |   |   |   +-group_by_list=
            |   |   |   | +-int64_partial#37 := ColumnRef(type=INT64, column=$distinct.int64#31)
            |   |   |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#34)
            |   |   |   +-aggregate_list=
            |   |   |     +-$agg1_partial#36 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#38)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups0.int64#40], with_query_name="$public_groups0")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |       +-ColumnRef(type=INT64, column=$groupby.int64_partial#37)
            |       +-ColumnRef(type=INT64, column=$public_groups0.int64#40)
            +-group_by_list=
            | +-int64#33 := ColumnRef(type=INT64, column=$public_groups0.int64#40)
            +-aggregate_list=
            | +-$agg1#32 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#38)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#36)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)
==

# Happy path with max_groups_contributed set via default value, GROUP BY, and
# RIGHT OUTER JOIN.  This introduces an additional join and adds a WithScan for
# the public groups.
[default_anon_kappa_value=3]
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS
) count(*)
from SimpleTypesWithAnonymizationUid
right outer join (select distinct int64 from SimpleTypes)
  using (int64)
group by int64;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.int64#31]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   |   +-group_by_list=
        |   |     +-int64#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#33 := ColumnRef(type=INT64, column=$distinct.int64#31)
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-WithScan
        +-column_list=[$aggregate.$agg1#32]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="$public_groups0"
        |   +-with_subquery=
        |     +-AggregateScan
        |       +-column_list=[$distinct.int64#41]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypes.int64#42], table=SimpleTypes, column_index_list=[1])
        |       +-group_by_list=
        |         +-int64#41 := ColumnRef(type=INT64, column=SimpleTypes.int64#42)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$aggregate.$agg1#32]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups0.int64#40, $aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   |   |   +-input_scan=
            |   |   |   | +-JoinScan
            |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31, SimpleTypesWithAnonymizationUid.uid#34]
            |   |   |   |   +-left_scan=
            |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#34], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
            |   |   |   |   +-right_scan=
            |   |   |   |   | +-WithRefScan(column_list=[$distinct.int64#31], with_query_name="$public_groups0")
            |   |   |   |   +-join_expr=
            |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
            |   |   |   |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
            |   |   |   |   +-has_using=TRUE
            |   |   |   +-group_by_list=
            |   |   |   | +-int64_partial#37 := ColumnRef(type=INT64, column=$distinct.int64#31)
            |   |   |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#34)
            |   |   |   +-aggregate_list=
            |   |   |     +-$agg1_partial#36 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#38)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups0.int64#40], with_query_name="$public_groups0")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |       +-ColumnRef(type=INT64, column=$groupby.int64_partial#37)
            |       +-ColumnRef(type=INT64, column=$public_groups0.int64#40)
            +-group_by_list=
            | +-int64#33 := ColumnRef(type=INT64, column=$public_groups0.int64#40)
            +-aggregate_list=
            | +-$agg1#32 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#38)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#36)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)
==

# Happy path with max_groups_contributed explicitly unset via the user, despite
# a default value. This should *not* add a second join.
[default_anon_kappa_value=3]
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=NULL
) count(*)
from SimpleTypesWithAnonymizationUid
right outer join (select distinct int64 from SimpleTypes)
  using (int64)
group by int64;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.int64#31]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   |   +-group_by_list=
        |   |     +-int64#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#33 := ColumnRef(type=INT64, column=$distinct.int64#31)
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=NULL)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31, SimpleTypesWithAnonymizationUid.uid#34]
        |   |   +-join_type=RIGHT
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#34], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        |   |   +-right_scan=
        |   |   | +-AggregateScan
        |   |   |   +-column_list=[$distinct.int64#31]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   |   |   +-group_by_list=
        |   |   |     +-int64#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   |   +-join_expr=
        |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
        |   |   +-has_using=TRUE
        |   +-group_by_list=
        |   | +-int64_partial#37 := ColumnRef(type=INT64, column=$distinct.int64#31)
        |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#34)
        |   +-aggregate_list=
        |     +-$agg1_partial#36 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-group_by_list=
        | +-int64#33 := ColumnRef(type=INT64, column=$groupby.int64_partial#37)
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
        |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
        |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#38)
        |     | +-Literal(type=INT64, value=NULL)
        |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#36)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=NULL)
==

# Using the uid column as a public groups column is allowed, but does not
# provide any useful results.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) count(*)
from
SimpleTypesWithAnonymizationUid
right join (select distinct int64 as uid from SimpleTypes) using (uid)
group by uid;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, $distinct.int64#31]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.int64#31]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   |   +-group_by_list=
        |   |     +-int64#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-uid#33 := ColumnRef(type=INT64, column=$distinct.int64#31)
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-WithScan
        +-column_list=[$aggregate.$agg1#32]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="$public_groups0"
        |   +-with_subquery=
        |     +-AggregateScan
        |       +-column_list=[$distinct.int64#40]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypes.int64#41], table=SimpleTypes, column_index_list=[1])
        |       +-group_by_list=
        |         +-int64#40 := ColumnRef(type=INT64, column=SimpleTypes.int64#41)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$aggregate.$agg1#32]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups0.int64#39, $aggregate.$agg1_partial#35, $groupby.uid_partial#36, $group_by.$uid#37]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.$agg1_partial#35, $groupby.uid_partial#36, $group_by.$uid#37]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.$agg1_partial#35, $groupby.uid_partial#36, $group_by.$uid#37]
            |   |   |   +-input_scan=
            |   |   |   | +-JoinScan
            |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, $distinct.int64#31]
            |   |   |   |   +-left_scan=
            |   |   |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
            |   |   |   |   +-right_scan=
            |   |   |   |   | +-WithRefScan(column_list=[$distinct.int64#31], with_query_name="$public_groups0")
            |   |   |   |   +-join_expr=
            |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
            |   |   |   |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
            |   |   |   |   +-has_using=TRUE
            |   |   |   +-group_by_list=
            |   |   |   | +-uid_partial#36 := ColumnRef(type=INT64, column=$distinct.int64#31)
            |   |   |   | +-$uid#37 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
            |   |   |   +-aggregate_list=
            |   |   |     +-$agg1_partial#35 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#37)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups0.int64#39], with_query_name="$public_groups0")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |       +-ColumnRef(type=INT64, column=$groupby.uid_partial#36)
            |       +-ColumnRef(type=INT64, column=$group_by.$uid#37)
            +-group_by_list=
            | +-uid#33 := ColumnRef(type=INT64, column=$public_groups0.int64#39)
            +-aggregate_list=
            | +-$agg1#32 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#37)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#35)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)
==

# Happy path with max_groups_contributed, GROUP BY, and LEFT OUTER JOIN.  This
# introduces an additional join and adds a WithScan for the public groups.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) count(*)
from
(select distinct int64 from SimpleTypes)
left outer join
SimpleTypesWithAnonymizationUid using (int64)
group by int64;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[$distinct.int64#19, SimpleTypesWithAnonymizationUid.int64#21]
        |   +-join_type=LEFT
        |   +-left_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.int64#19]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
        |   |   +-group_by_list=
        |   |     +-int64#19 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   +-right_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#21], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=$distinct.int64#19)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#21)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#33 := ColumnRef(type=INT64, column=$distinct.int64#19)
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-WithScan
        +-column_list=[$aggregate.$agg1#32]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="$public_groups0"
        |   +-with_subquery=
        |     +-AggregateScan
        |       +-column_list=[$distinct.int64#41]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypes.int64#42], table=SimpleTypes, column_index_list=[1])
        |       +-group_by_list=
        |         +-int64#41 := ColumnRef(type=INT64, column=SimpleTypes.int64#42)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$aggregate.$agg1#32]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups0.int64#40, $aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   |   |   +-input_scan=
            |   |   |   | +-JoinScan
            |   |   |   |   +-column_list=[$distinct.int64#19, SimpleTypesWithAnonymizationUid.int64#21, SimpleTypesWithAnonymizationUid.uid#34]
            |   |   |   |   +-left_scan=
            |   |   |   |   | +-WithRefScan(column_list=[$distinct.int64#19], with_query_name="$public_groups0")
            |   |   |   |   +-right_scan=
            |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#21, uid#34], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
            |   |   |   |   +-join_expr=
            |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   |   |   |   +-ColumnRef(type=INT64, column=$distinct.int64#19)
            |   |   |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#21)
            |   |   |   |   +-has_using=TRUE
            |   |   |   +-group_by_list=
            |   |   |   | +-int64_partial#37 := ColumnRef(type=INT64, column=$distinct.int64#19)
            |   |   |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#34)
            |   |   |   +-aggregate_list=
            |   |   |     +-$agg1_partial#36 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#38)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups0.int64#40], with_query_name="$public_groups0")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |       +-ColumnRef(type=INT64, column=$public_groups0.int64#40)
            |       +-ColumnRef(type=INT64, column=$groupby.int64_partial#37)
            +-group_by_list=
            | +-int64#33 := ColumnRef(type=INT64, column=$public_groups0.int64#40)
            +-aggregate_list=
            | +-$agg1#32 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#38)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#36)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)
==

# Happy path without SELECT DISTINCT, but an equivalent query.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) int64, count(*)
from
(select int64 from SimpleTypes group by int64)
left outer join
SimpleTypesWithAnonymizationUid using (int64)
group by int64;
--
QueryStmt
+-output_column_list=
| +-$groupby.int64#33 AS int64 [INT64]
| +-$aggregate.$agg1#32 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int64#33, $aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.int64#33, $aggregate.$agg1#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[$groupby.int64#19, SimpleTypesWithAnonymizationUid.int64#21]
        |   +-join_type=LEFT
        |   +-left_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[$groupby.int64#19]
        |   |   +-input_scan=
        |   |     +-AggregateScan
        |   |       +-column_list=[$groupby.int64#19]
        |   |       +-input_scan=
        |   |       | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
        |   |       +-group_by_list=
        |   |         +-int64#19 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   +-right_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#21], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=$groupby.int64#19)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#21)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#33 := ColumnRef(type=INT64, column=$groupby.int64#19)
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.int64#33 AS int64 [INT64]
| +-$aggregate.$agg1#32 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int64#33, $aggregate.$agg1#32]
    +-input_scan=
      +-WithScan
        +-column_list=[$groupby.int64#33, $aggregate.$agg1#32]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="$public_groups0"
        |   +-with_subquery=
        |     +-ProjectScan
        |       +-column_list=[$groupby.int64#41]
        |       +-input_scan=
        |         +-AggregateScan
        |           +-column_list=[$groupby.int64#41]
        |           +-input_scan=
        |           | +-TableScan(column_list=[SimpleTypes.int64#42], table=SimpleTypes, column_index_list=[1])
        |           +-group_by_list=
        |             +-int64#41 := ColumnRef(type=INT64, column=SimpleTypes.int64#42)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$groupby.int64#33, $aggregate.$agg1#32]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups0.int64#40, $aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   |   |   +-input_scan=
            |   |   |   | +-JoinScan
            |   |   |   |   +-column_list=[$groupby.int64#19, SimpleTypesWithAnonymizationUid.int64#21, SimpleTypesWithAnonymizationUid.uid#34]
            |   |   |   |   +-left_scan=
            |   |   |   |   | +-WithRefScan(column_list=[$groupby.int64#19], with_query_name="$public_groups0")
            |   |   |   |   +-right_scan=
            |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#21, uid#34], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
            |   |   |   |   +-join_expr=
            |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   |   |   |   +-ColumnRef(type=INT64, column=$groupby.int64#19)
            |   |   |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#21)
            |   |   |   |   +-has_using=TRUE
            |   |   |   +-group_by_list=
            |   |   |   | +-int64_partial#37 := ColumnRef(type=INT64, column=$groupby.int64#19)
            |   |   |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#34)
            |   |   |   +-aggregate_list=
            |   |   |     +-$agg1_partial#36 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#38)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups0.int64#40], with_query_name="$public_groups0")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |       +-ColumnRef(type=INT64, column=$public_groups0.int64#40)
            |       +-ColumnRef(type=INT64, column=$groupby.int64_partial#37)
            +-group_by_list=
            | +-int64#33 := ColumnRef(type=INT64, column=$public_groups0.int64#40)
            +-aggregate_list=
            | +-$agg1#32 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#38)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#36)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)
==

# Happy path with max_groups_contributed and a valid non-public-group join.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) int64, count(*)
from (
  select b.uid, b.int64
  from SimpleTypesWithAnonymizationUid a
  right outer join SimpleTypesWithAnonymizationUid b using (uid)
) right outer join (
  select distinct int64
  from SimpleTypes
) using (int64)
group by int64;
--
QueryStmt
+-output_column_list=
| +-$groupby.int64#45 AS int64 [INT64]
| +-$aggregate.$agg1#44 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int64#45, $aggregate.$agg1#44]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.int64#45, $aggregate.$agg1#44]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#23, SimpleTypesWithAnonymizationUid.int64#14, $distinct.int64#43]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-ProjectScan
        |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#23, int64#14]
        |   |   +-input_scan=
        |   |     +-JoinScan
        |   |       +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, int64#14, uid#23]
        |   |       +-join_type=RIGHT
        |   |       +-left_scan=
        |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
        |   |       +-right_scan=
        |   |       | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#14, uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10], alias="b")
        |   |       +-join_expr=
        |   |       | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |       |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |       |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        |   |       +-has_using=TRUE
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.int64#43]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.int64#26], table=SimpleTypes, column_index_list=[1])
        |   |   +-group_by_list=
        |   |     +-int64#43 := ColumnRef(type=INT64, column=SimpleTypes.int64#26)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#14)
        |   |   +-ColumnRef(type=INT64, column=$distinct.int64#43)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#45 := ColumnRef(type=INT64, column=$distinct.int64#43)
        +-aggregate_list=
        | +-$agg1#44 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.int64#45 AS int64 [INT64]
| +-$aggregate.$agg1#44 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int64#45, $aggregate.$agg1#44]
    +-input_scan=
      +-WithScan
        +-column_list=[$groupby.int64#45, $aggregate.$agg1#44]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="$public_groups0"
        |   +-with_subquery=
        |     +-AggregateScan
        |       +-column_list=[$distinct.int64#52]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypes.int64#53], table=SimpleTypes, column_index_list=[1])
        |       +-group_by_list=
        |         +-int64#52 := ColumnRef(type=INT64, column=SimpleTypes.int64#53)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$groupby.int64#45, $aggregate.$agg1#44]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups0.int64#51, $aggregate.$agg1_partial#47, $groupby.int64_partial#48, $group_by.$uid#49]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.$agg1_partial#47, $groupby.int64_partial#48, $group_by.$uid#49]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.$agg1_partial#47, $groupby.int64_partial#48, $group_by.$uid#49]
            |   |   |   +-input_scan=
            |   |   |   | +-JoinScan
            |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#23, SimpleTypesWithAnonymizationUid.int64#14, $distinct.int64#43]
            |   |   |   |   +-left_scan=
            |   |   |   |   | +-ProjectScan
            |   |   |   |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#23, int64#14]
            |   |   |   |   |   +-input_scan=
            |   |   |   |   |     +-JoinScan
            |   |   |   |   |       +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, int64#14, uid#23]
            |   |   |   |   |       +-join_type=RIGHT
            |   |   |   |   |       +-left_scan=
            |   |   |   |   |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10], alias="a")
            |   |   |   |   |       +-right_scan=
            |   |   |   |   |       | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#14, uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10], alias="b")
            |   |   |   |   |       +-join_expr=
            |   |   |   |   |       | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   |   |   |       |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
            |   |   |   |   |       |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
            |   |   |   |   |       +-has_using=TRUE
            |   |   |   |   +-right_scan=
            |   |   |   |   | +-WithRefScan(column_list=[$distinct.int64#43], with_query_name="$public_groups0")
            |   |   |   |   +-join_expr=
            |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#14)
            |   |   |   |   |   +-ColumnRef(type=INT64, column=$distinct.int64#43)
            |   |   |   |   +-has_using=TRUE
            |   |   |   +-group_by_list=
            |   |   |   | +-int64_partial#48 := ColumnRef(type=INT64, column=$distinct.int64#43)
            |   |   |   | +-$uid#49 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
            |   |   |   +-aggregate_list=
            |   |   |     +-$agg1_partial#47 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#49)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups0.int64#51], with_query_name="$public_groups0")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |       +-ColumnRef(type=INT64, column=$groupby.int64_partial#48)
            |       +-ColumnRef(type=INT64, column=$public_groups0.int64#51)
            +-group_by_list=
            | +-int64#45 := ColumnRef(type=INT64, column=$public_groups0.int64#51)
            +-aggregate_list=
            | +-$agg1#44 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#49)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#47)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)
==

# Happy path with multiple public group columns from the same table.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) count(*)
from SimpleTypesWithAnonymizationUid
right outer join (select distinct int64, string from SimpleTypes)
  using (int64, string)
group by int64, string;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#33 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#33]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#33]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.string#5, $distinct.int64#31, $distinct.string#32]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4])
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=$distinct.[int64#31, string#32]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=SimpleTypes.[int64#14, string#17], table=SimpleTypes, column_index_list=[1, 4])
        |   |   +-group_by_list=
        |   |     +-int64#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   |     +-string#32 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   | +-ColumnRef(type=INT64, column=$distinct.int64#31)
        |   |   +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |     +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |     +-ColumnRef(type=STRING, column=$distinct.string#32)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#34 := ColumnRef(type=INT64, column=$distinct.int64#31)
        | +-string#35 := ColumnRef(type=STRING, column=$distinct.string#32)
        +-aggregate_list=
        | +-$agg1#33 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#33 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#33]
    +-input_scan=
      +-WithScan
        +-column_list=[$aggregate.$agg1#33]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="$public_groups0"
        |   +-with_subquery=
        |     +-AggregateScan
        |       +-column_list=$distinct.[int64#45, string#46]
        |       +-input_scan=
        |       | +-TableScan(column_list=SimpleTypes.[int64#47, string#48], table=SimpleTypes, column_index_list=[1, 4])
        |       +-group_by_list=
        |         +-int64#45 := ColumnRef(type=INT64, column=SimpleTypes.int64#47)
        |         +-string#46 := ColumnRef(type=STRING, column=SimpleTypes.string#48)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$aggregate.$agg1#33]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups0.int64#43, $public_groups0.string#44, $aggregate.$agg1_partial#38, $groupby.int64_partial#39, $groupby.string_partial#40, $group_by.$uid#41]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.$agg1_partial#38, $groupby.int64_partial#39, $groupby.string_partial#40, $group_by.$uid#41]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.$agg1_partial#38, $groupby.int64_partial#39, $groupby.string_partial#40, $group_by.$uid#41]
            |   |   |   +-input_scan=
            |   |   |   | +-JoinScan
            |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.string#5, $distinct.int64#31, $distinct.string#32, SimpleTypesWithAnonymizationUid.uid#36]
            |   |   |   |   +-left_scan=
            |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5, uid#36], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4, 10])
            |   |   |   |   +-right_scan=
            |   |   |   |   | +-WithRefScan(column_list=$distinct.[int64#31, string#32], with_query_name="$public_groups0")
            |   |   |   |   +-join_expr=
            |   |   |   |   | +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
            |   |   |   |   |   +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   |   |   |   | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
            |   |   |   |   |   | +-ColumnRef(type=INT64, column=$distinct.int64#31)
            |   |   |   |   |   +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |   |   |   |   |     +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
            |   |   |   |   |     +-ColumnRef(type=STRING, column=$distinct.string#32)
            |   |   |   |   +-has_using=TRUE
            |   |   |   +-group_by_list=
            |   |   |   | +-int64_partial#39 := ColumnRef(type=INT64, column=$distinct.int64#31)
            |   |   |   | +-string_partial#40 := ColumnRef(type=STRING, column=$distinct.string#32)
            |   |   |   | +-$uid#41 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#36)
            |   |   |   +-aggregate_list=
            |   |   |     +-$agg1_partial#38 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#41)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=$public_groups0.[int64#43, string#44], with_query_name="$public_groups0")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
            |       +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |       | +-ColumnRef(type=INT64, column=$groupby.int64_partial#39)
            |       | +-ColumnRef(type=INT64, column=$public_groups0.int64#43)
            |       +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |         +-ColumnRef(type=STRING, column=$groupby.string_partial#40)
            |         +-ColumnRef(type=STRING, column=$public_groups0.string#44)
            +-group_by_list=
            | +-int64#34 := ColumnRef(type=INT64, column=$public_groups0.int64#43)
            | +-string#35 := ColumnRef(type=STRING, column=$public_groups0.string#44)
            +-aggregate_list=
            | +-$agg1#33 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#41)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#38)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)
==

# group_selection_strategy must be one of the defined types.
select with differential_privacy options(group_selection_strategy=UNDEFINED_STRATEGY)
count(*)
from SimpleTypesWithAnonymizationUid
right outer join (select distinct int64 from SimpleTypes) using (int64)
group by int64;
--
ERROR: Could not cast literal "UNDEFINED_STRATEGY" to type DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY [at 1:67]
...options(group_selection_strategy=UNDEFINED_STRATEGY)
                                    ^
==

# group_selection_strategy can also be a string.
select with differential_privacy options(group_selection_strategy="PUBLIC_GROUPS")
count(*)
from SimpleTypesWithAnonymizationUid
right outer join (select distinct int64 from SimpleTypes) using (int64)
group by int64;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.int64#31]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   |   +-group_by_list=
        |   |     +-int64#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#33 := ColumnRef(type=INT64, column=$distinct.int64#31)
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31, SimpleTypesWithAnonymizationUid.uid#34]
        |   |   +-join_type=RIGHT
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#34], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        |   |   +-right_scan=
        |   |   | +-AggregateScan
        |   |   |   +-column_list=[$distinct.int64#31]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   |   |   +-group_by_list=
        |   |   |     +-int64#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   |   +-join_expr=
        |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
        |   |   +-has_using=TRUE
        |   +-group_by_list=
        |   | +-int64_partial#37 := ColumnRef(type=INT64, column=$distinct.int64#31)
        |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#34)
        |   +-aggregate_list=
        |     +-$agg1_partial#36 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-group_by_list=
        | +-int64#33 := ColumnRef(type=INT64, column=$groupby.int64_partial#37)
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
        |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
        |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#38)
        |     | +-Literal(type=INT64, value=NULL)
        |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#36)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
==

# group_selection_strategy must be a literal.
select with differential_privacy options(group_selection_strategy=@test_param_string)
count(*)
from SimpleTypesWithAnonymizationUid
right outer join (select distinct int64 from SimpleTypes) using (int64)
group by int64;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.int64#31]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   |   +-group_by_list=
        |   |     +-int64#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#33 := ColumnRef(type=INT64, column=$distinct.int64#31)
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy :=
            +-Cast(STRING -> ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>)
              +-Parameter(type=STRING, name="test_param_string")


Rewrite ERROR: Differential privacy option group_selection_strategy must be an enum literal
==

# group_selection_strategy can only be set once.
select with differential_privacy options(
  group_selection_strategy=LAPLACE_THRESHOLD,
  group_selection_strategy=PUBLIC_GROUPS)
count(*)
from SimpleTypesWithAnonymizationUid
right outer join (select distinct int64 from SimpleTypes) using (int64)
group by int64;
--
ERROR: Duplicate differential privacy option specified for 'group_selection_strategy' [at 3:3]
  group_selection_strategy=PUBLIC_GROUPS)
  ^
==

# There must be an outer join for all columns in the group-by-list.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) count(*)
from SimpleTypesWithAnonymizationUid
group by int64;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#13 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        +-group_by_list=
        | +-int64#14 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


Rewrite ERROR: Differential privacy option group_selection_strategy PUBLIC_GROUPS expects an outer join with a SELECT DISTINCT subquery over a non-uid table for all columns in the GROUP BY, but did not find such a join for the following columns: int64
==

# Full outer join is not recognized as a public groups join.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) count(*)
from SimpleTypesWithAnonymizationUid
full outer join (select distinct int64 from SimpleTypes)
  using (int64)
group by int64;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#33 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#33]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#33]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31, $full_join.int64#32]
        |   +-expr_list=
        |   | +-int64#32 :=
        |   |   +-FunctionCall(ZetaSQL:coalesce(repeated(2) INT64) -> INT64)
        |   |     +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |     +-ColumnRef(type=INT64, column=$distinct.int64#31)
        |   +-input_scan=
        |     +-JoinScan
        |       +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31]
        |       +-join_type=FULL
        |       +-left_scan=
        |       | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |       +-right_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$distinct.int64#31]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |       |   +-group_by_list=
        |       |     +-int64#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |       +-join_expr=
        |       | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |       |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
        |       +-has_using=TRUE
        +-group_by_list=
        | +-int64#34 := ColumnRef(type=INT64, column=$full_join.int64#32)
        +-aggregate_list=
        | +-$agg1#33 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


Rewrite ERROR: Both tables in a FULL OUTER join must contain user data
==

# Cannot use public groups with a user id table.
select with differential_privacy options(group_selection_strategy=PUBLIC_GROUPS)
count(*)
from SimpleTypesWithAnonymizationUid
right outer join (select distinct uid from SimpleTypesWithAnonymizationUid) using (uid)
group by uid;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#26 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#26]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#26]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, $distinct.uid#25]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.uid#25]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |   +-group_by_list=
        |   |     +-uid#25 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |   |   +-ColumnRef(type=INT64, column=$distinct.uid#25)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-uid#27 := ColumnRef(type=INT64, column=$distinct.uid#25)
        +-aggregate_list=
        | +-$agg1#26 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


Rewrite ERROR: Differential privacy option group_selection_strategy PUBLIC_GROUPS expects an outer join with a SELECT DISTINCT subquery over a non-uid table for all columns in the GROUP BY, but did not find such a join for the following columns: uid
==

# Cannot use the uid column as publci group column.
# TODO:  Improve the error message
select with differential_privacy options(group_selection_strategy=PUBLIC_GROUPS)
count(*)
from SimpleTypesWithAnonymizationUid a
right outer join (select distinct uid from SimpleTypesWithAnonymizationUid) b
  on b.uid = a.int64 and a.uid = b.uid
group by a.int64;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#26 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#26]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#26]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.uid#11, $distinct.uid#25]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10], alias="a")
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.uid#25]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[10])
        |   |   +-group_by_list=
        |   |     +-uid#25 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        |       +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       | +-ColumnRef(type=INT64, column=$distinct.uid#25)
        |       | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |       +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |         +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |         +-ColumnRef(type=INT64, column=$distinct.uid#25)
        +-group_by_list=
        | +-int64#27 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        +-aggregate_list=
        | +-$agg1#26 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


Rewrite ERROR: Differential privacy option group_selection_strategy PUBLIC_GROUPS expects an outer join with a SELECT DISTINCT subquery over a non-uid table for all columns in the GROUP BY, but did not find such a join for the following columns: int64
==

# Cannot use public groups with a user id table.
select with differential_privacy options(group_selection_strategy=PUBLIC_GROUPS)
count(*)
from SimpleTypesWithAnonymizationUid a
right outer join (select distinct int64, uid from SimpleTypesWithAnonymizationUid) b on a.int64 = b.int64 and a.uid = b.uid
group by b.int64;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#27 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#27]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#27]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.uid#11, $distinct.int64#25, $distinct.uid#26]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10], alias="a")
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=$distinct.[int64#25, uid#26]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#14, uid#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
        |   |   +-group_by_list=
        |   |     +-int64#25 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#14)
        |   |     +-uid#26 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#23)
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$and(BOOL, repeated(1) BOOL) -> BOOL)
        |       +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |       | +-ColumnRef(type=INT64, column=$distinct.int64#25)
        |       +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |         +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
        |         +-ColumnRef(type=INT64, column=$distinct.uid#26)
        +-group_by_list=
        | +-int64#28 := ColumnRef(type=INT64, column=$distinct.int64#25)
        +-aggregate_list=
        | +-$agg1#27 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


Rewrite ERROR: Differential privacy option group_selection_strategy PUBLIC_GROUPS expects an outer join with a SELECT DISTINCT subquery over a non-uid table for all columns in the GROUP BY, but did not find such a join for the following columns: int64
==

# Cannot use public groups with a nested user id table.
select with differential_privacy options(group_selection_strategy=PUBLIC_GROUPS)
count(*)
from SimpleTypesWithAnonymizationUid
right outer join (
  select distinct int64 from (
    select distinct int64 from SimpleTypesWithAnonymizationUid
  )
) using (int64)
group by int64;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#27 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#27]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#27]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#26]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.int64#26]
        |   |   +-input_scan=
        |   |   | +-AggregateScan
        |   |   |   +-column_list=[$distinct.int64#25]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |   |   |   +-group_by_list=
        |   |   |     +-int64#25 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#14)
        |   |   +-group_by_list=
        |   |     +-int64#26 := ColumnRef(type=INT64, column=$distinct.int64#25)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   +-ColumnRef(type=INT64, column=$distinct.int64#26)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#28 := ColumnRef(type=INT64, column=$distinct.int64#26)
        +-aggregate_list=
        | +-$agg1#27 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


Rewrite ERROR: Joins between tables containing private data must also explicitly join on the user id column in each table, add 'AND uid=uid' to the join ON expression
==

# Cannot use public groups in a RIGHT OUTER JOIN without a subquery.
select with differential_privacy options(group_selection_strategy=PUBLIC_GROUPS)
int64, count(*)
from SimpleTypesWithAnonymizationUid
right outer join SimpleTypes using (int64)
group by int64;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$groupby.int64#32 AS int64 [INT64]
| +-$aggregate.$agg1#31 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int64#32, $aggregate.$agg1#31]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.int64#32, $aggregate.$agg1#31]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypes.int64#14]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |   +-right_scan=
        |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#32 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        +-aggregate_list=
        | +-$agg1#31 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


Rewrite ERROR: The right table in a RIGHT OUTER join must contain user data
==

# Cannot use public groups in a LEFT OUTER JOIN without a subquery.
select with differential_privacy options(group_selection_strategy=PUBLIC_GROUPS)
int64, count(*)
from SimpleTypes
left outer join SimpleTypesWithAnonymizationUid using (int64)
group by int64;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$groupby.int64#32 AS int64 [INT64]
| +-$aggregate.$agg1#31 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int64#32, $aggregate.$agg1#31]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.int64#32, $aggregate.$agg1#31]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypes.int64#2, SimpleTypesWithAnonymizationUid.int64#20]
        |   +-join_type=LEFT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
        |   +-right_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#20], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#20)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#32 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-aggregate_list=
        | +-$agg1#31 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


Rewrite ERROR: The left table in a LEFT OUTER join must contain user data
==

# Cannot use public groups without DISTINCT or GROUP BY.
select with differential_privacy options(group_selection_strategy=PUBLIC_GROUPS)
int64, count(*)
from (select int64 from SimpleTypes)
left outer join SimpleTypesWithAnonymizationUid using (int64)
group by int64;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$groupby.int64#32 AS int64 [INT64]
| +-$aggregate.$agg1#31 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int64#32, $aggregate.$agg1#31]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.int64#32, $aggregate.$agg1#31]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypes.int64#2, SimpleTypesWithAnonymizationUid.int64#20]
        |   +-join_type=LEFT
        |   +-left_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[SimpleTypes.int64#2]
        |   |   +-input_scan=
        |   |     +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
        |   +-right_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#20], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#20)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#32 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        +-aggregate_list=
        | +-$agg1#31 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


Rewrite ERROR: The left table in a LEFT OUTER join must contain user data
==

# Happy path with alias.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) count(*)
from SimpleTypesWithAnonymizationUid as user_data
right outer join (select distinct int64 from SimpleTypes) as public_groups
  using (int64)
group by int64;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1], alias="user_data")
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.int64#31]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   |   +-group_by_list=
        |   |     +-int64#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#33 := ColumnRef(type=INT64, column=$distinct.int64#31)
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-WithScan
        +-column_list=[$aggregate.$agg1#32]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="$public_groups0"
        |   +-with_subquery=
        |     +-AggregateScan
        |       +-column_list=[$distinct.int64#41]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypes.int64#42], table=SimpleTypes, column_index_list=[1])
        |       +-group_by_list=
        |         +-int64#41 := ColumnRef(type=INT64, column=SimpleTypes.int64#42)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$aggregate.$agg1#32]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups0.int64#40, $aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   |   |   +-input_scan=
            |   |   |   | +-JoinScan
            |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31, SimpleTypesWithAnonymizationUid.uid#34]
            |   |   |   |   +-left_scan=
            |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#34], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10], alias="user_data")
            |   |   |   |   +-right_scan=
            |   |   |   |   | +-WithRefScan(column_list=[$distinct.int64#31], with_query_name="$public_groups0")
            |   |   |   |   +-join_expr=
            |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
            |   |   |   |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
            |   |   |   |   +-has_using=TRUE
            |   |   |   +-group_by_list=
            |   |   |   | +-int64_partial#37 := ColumnRef(type=INT64, column=$distinct.int64#31)
            |   |   |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#34)
            |   |   |   +-aggregate_list=
            |   |   |     +-$agg1_partial#36 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#38)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups0.int64#40], with_query_name="$public_groups0")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |       +-ColumnRef(type=INT64, column=$groupby.int64_partial#37)
            |       +-ColumnRef(type=INT64, column=$public_groups0.int64#40)
            +-group_by_list=
            | +-int64#33 := ColumnRef(type=INT64, column=$public_groups0.int64#40)
            +-aggregate_list=
            | +-$agg1#32 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#38)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#36)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)
==

# Happy path with alias and ON join condition.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) count(*)
from SimpleTypesWithAnonymizationUid as user_data
right outer join (select distinct int64 from SimpleTypes) as public_groups
on user_data.int64 = public_groups.int64
group by public_groups.int64;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1], alias="user_data")
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.int64#31]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   |   +-group_by_list=
        |   |     +-int64#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |       +-ColumnRef(type=INT64, column=$distinct.int64#31)
        +-group_by_list=
        | +-int64#33 := ColumnRef(type=INT64, column=$distinct.int64#31)
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-WithScan
        +-column_list=[$aggregate.$agg1#32]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="$public_groups0"
        |   +-with_subquery=
        |     +-AggregateScan
        |       +-column_list=[$distinct.int64#41]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypes.int64#42], table=SimpleTypes, column_index_list=[1])
        |       +-group_by_list=
        |         +-int64#41 := ColumnRef(type=INT64, column=SimpleTypes.int64#42)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$aggregate.$agg1#32]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups0.int64#40, $aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.$agg1_partial#36, $groupby.int64_partial#37, $group_by.$uid#38]
            |   |   |   +-input_scan=
            |   |   |   | +-JoinScan
            |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31, SimpleTypesWithAnonymizationUid.uid#34]
            |   |   |   |   +-left_scan=
            |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#34], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10], alias="user_data")
            |   |   |   |   +-right_scan=
            |   |   |   |   | +-WithRefScan(column_list=[$distinct.int64#31], with_query_name="$public_groups0")
            |   |   |   |   +-join_expr=
            |   |   |   |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   |   |       +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
            |   |   |   |       +-ColumnRef(type=INT64, column=$distinct.int64#31)
            |   |   |   +-group_by_list=
            |   |   |   | +-int64_partial#37 := ColumnRef(type=INT64, column=$distinct.int64#31)
            |   |   |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#34)
            |   |   |   +-aggregate_list=
            |   |   |     +-$agg1_partial#36 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#38)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups0.int64#40], with_query_name="$public_groups0")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |       +-ColumnRef(type=INT64, column=$groupby.int64_partial#37)
            |       +-ColumnRef(type=INT64, column=$public_groups0.int64#40)
            +-group_by_list=
            | +-int64#33 := ColumnRef(type=INT64, column=$public_groups0.int64#40)
            +-aggregate_list=
            | +-$agg1#32 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#38)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#36)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)
==

# Happy path for a typical use case using the days of the week as public
# groups using a right outer join.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) public_dayofweek, count(*)
from SimpleTypesWithAnonymizationUid
right outer join
  (select distinct public_dayofweek
  from unnest(generate_array(1, 7)) as public_dayofweek)
  on public_dayofweek = extract(
    dayofweek from timestamp_from_unix_seconds(int64))
group by public_dayofweek;
--
QueryStmt
+-output_column_list=
| +-$groupby.public_dayofweek#16 AS public_dayofweek [INT64]
| +-$aggregate.$agg1#15 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.public_dayofweek#16, $aggregate.$agg1#15]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.public_dayofweek#16, $aggregate.$agg1#15]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.public_dayofweek#14]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.public_dayofweek#14]
        |   |   +-input_scan=
        |   |   | +-ArrayScan
        |   |   |   +-column_list=[$array.public_dayofweek#13]
        |   |   |   +-array_expr_list=
        |   |   |   | +-FunctionCall(ZetaSQL:generate_array(INT64, INT64, optional(0) INT64) -> ARRAY<INT64>)
        |   |   |   |   +-Literal(type=INT64, value=1)
        |   |   |   |   +-Literal(type=INT64, value=7)
        |   |   |   +-element_column_list=[$array.public_dayofweek#13]
        |   |   +-group_by_list=
        |   |     +-public_dayofweek#14 := ColumnRef(type=INT64, column=$array.public_dayofweek#13)
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=$distinct.public_dayofweek#14)
        |       +-FunctionCall(ZetaSQL:$extract(TIMESTAMP, ENUM<zetasql.functions.DateTimestampPart>, optional(0) STRING) -> INT64)
        |         +-FunctionCall(ZetaSQL:timestamp_from_unix_seconds(INT64) -> TIMESTAMP)
        |         | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |         +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAYOFWEEK)
        +-group_by_list=
        | +-public_dayofweek#16 := ColumnRef(type=INT64, column=$distinct.public_dayofweek#14)
        +-aggregate_list=
        | +-$agg1#15 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.public_dayofweek#16 AS public_dayofweek [INT64]
| +-$aggregate.$agg1#15 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.public_dayofweek#16, $aggregate.$agg1#15]
    +-input_scan=
      +-WithScan
        +-column_list=[$groupby.public_dayofweek#16, $aggregate.$agg1#15]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="$public_groups0"
        |   +-with_subquery=
        |     +-AggregateScan
        |       +-column_list=[$distinct.public_dayofweek#24]
        |       +-input_scan=
        |       | +-ArrayScan
        |       |   +-column_list=[$array.public_dayofweek#25]
        |       |   +-array_expr_list=
        |       |   | +-FunctionCall(ZetaSQL:generate_array(INT64, INT64, optional(0) INT64) -> ARRAY<INT64>)
        |       |   |   +-Literal(type=INT64, value=1)
        |       |   |   +-Literal(type=INT64, value=7)
        |       |   +-element_column_list=[$array.public_dayofweek#25]
        |       +-group_by_list=
        |         +-public_dayofweek#24 := ColumnRef(type=INT64, column=$array.public_dayofweek#25)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$groupby.public_dayofweek#16, $aggregate.$agg1#15]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups0.public_dayofweek#23, $aggregate.$agg1_partial#19, $groupby.public_dayofweek_partial#20, $group_by.$uid#21]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.$agg1_partial#19, $groupby.public_dayofweek_partial#20, $group_by.$uid#21]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.$agg1_partial#19, $groupby.public_dayofweek_partial#20, $group_by.$uid#21]
            |   |   |   +-input_scan=
            |   |   |   | +-JoinScan
            |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.public_dayofweek#14, SimpleTypesWithAnonymizationUid.uid#17]
            |   |   |   |   +-left_scan=
            |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#17], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
            |   |   |   |   +-right_scan=
            |   |   |   |   | +-WithRefScan(column_list=[$distinct.public_dayofweek#14], with_query_name="$public_groups0")
            |   |   |   |   +-join_expr=
            |   |   |   |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   |   |       +-ColumnRef(type=INT64, column=$distinct.public_dayofweek#14)
            |   |   |   |       +-FunctionCall(ZetaSQL:$extract(TIMESTAMP, ENUM<zetasql.functions.DateTimestampPart>, optional(0) STRING) -> INT64)
            |   |   |   |         +-FunctionCall(ZetaSQL:timestamp_from_unix_seconds(INT64) -> TIMESTAMP)
            |   |   |   |         | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
            |   |   |   |         +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAYOFWEEK)
            |   |   |   +-group_by_list=
            |   |   |   | +-public_dayofweek_partial#20 := ColumnRef(type=INT64, column=$distinct.public_dayofweek#14)
            |   |   |   | +-$uid#21 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#17)
            |   |   |   +-aggregate_list=
            |   |   |     +-$agg1_partial#19 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#21)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups0.public_dayofweek#23], with_query_name="$public_groups0")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |       +-ColumnRef(type=INT64, column=$public_groups0.public_dayofweek#23)
            |       +-FunctionCall(ZetaSQL:$extract(TIMESTAMP, ENUM<zetasql.functions.DateTimestampPart>, optional(0) STRING) -> INT64)
            |         +-FunctionCall(ZetaSQL:timestamp_from_unix_seconds(INT64) -> TIMESTAMP)
            |         | +-ColumnRef(type=INT64, column=$groupby.public_dayofweek_partial#20)
            |         +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAYOFWEEK)
            +-group_by_list=
            | +-public_dayofweek#16 := ColumnRef(type=INT64, column=$public_groups0.public_dayofweek#23)
            +-aggregate_list=
            | +-$agg1#15 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#21)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#19)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)
==

# Happy path for a typical use case using the days of the week as public
# groups using a left outer join.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) public_dayofweek, count(*)
from (select distinct public_dayofweek
  from unnest(generate_array(1, 7)) as public_dayofweek)
  left join SimpleTypesWithAnonymizationUid
    on public_dayofweek = extract(
      dayofweek from timestamp_from_unix_seconds(int64))
group by public_dayofweek;
--
QueryStmt
+-output_column_list=
| +-$groupby.public_dayofweek#16 AS public_dayofweek [INT64]
| +-$aggregate.$agg1#15 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.public_dayofweek#16, $aggregate.$agg1#15]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.public_dayofweek#16, $aggregate.$agg1#15]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[$distinct.public_dayofweek#2, SimpleTypesWithAnonymizationUid.int64#4]
        |   +-join_type=LEFT
        |   +-left_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.public_dayofweek#2]
        |   |   +-input_scan=
        |   |   | +-ArrayScan
        |   |   |   +-column_list=[$array.public_dayofweek#1]
        |   |   |   +-array_expr_list=
        |   |   |   | +-FunctionCall(ZetaSQL:generate_array(INT64, INT64, optional(0) INT64) -> ARRAY<INT64>)
        |   |   |   |   +-Literal(type=INT64, value=1)
        |   |   |   |   +-Literal(type=INT64, value=7)
        |   |   |   +-element_column_list=[$array.public_dayofweek#1]
        |   |   +-group_by_list=
        |   |     +-public_dayofweek#2 := ColumnRef(type=INT64, column=$array.public_dayofweek#1)
        |   +-right_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#4], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |   +-join_expr=
        |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |       +-ColumnRef(type=INT64, column=$distinct.public_dayofweek#2)
        |       +-FunctionCall(ZetaSQL:$extract(TIMESTAMP, ENUM<zetasql.functions.DateTimestampPart>, optional(0) STRING) -> INT64)
        |         +-FunctionCall(ZetaSQL:timestamp_from_unix_seconds(INT64) -> TIMESTAMP)
        |         | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#4)
        |         +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAYOFWEEK)
        +-group_by_list=
        | +-public_dayofweek#16 := ColumnRef(type=INT64, column=$distinct.public_dayofweek#2)
        +-aggregate_list=
        | +-$agg1#15 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.public_dayofweek#16 AS public_dayofweek [INT64]
| +-$aggregate.$agg1#15 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.public_dayofweek#16, $aggregate.$agg1#15]
    +-input_scan=
      +-WithScan
        +-column_list=[$groupby.public_dayofweek#16, $aggregate.$agg1#15]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="$public_groups0"
        |   +-with_subquery=
        |     +-AggregateScan
        |       +-column_list=[$distinct.public_dayofweek#24]
        |       +-input_scan=
        |       | +-ArrayScan
        |       |   +-column_list=[$array.public_dayofweek#25]
        |       |   +-array_expr_list=
        |       |   | +-FunctionCall(ZetaSQL:generate_array(INT64, INT64, optional(0) INT64) -> ARRAY<INT64>)
        |       |   |   +-Literal(type=INT64, value=1)
        |       |   |   +-Literal(type=INT64, value=7)
        |       |   +-element_column_list=[$array.public_dayofweek#25]
        |       +-group_by_list=
        |         +-public_dayofweek#24 := ColumnRef(type=INT64, column=$array.public_dayofweek#25)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$groupby.public_dayofweek#16, $aggregate.$agg1#15]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups0.public_dayofweek#23, $aggregate.$agg1_partial#19, $groupby.public_dayofweek_partial#20, $group_by.$uid#21]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.$agg1_partial#19, $groupby.public_dayofweek_partial#20, $group_by.$uid#21]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.$agg1_partial#19, $groupby.public_dayofweek_partial#20, $group_by.$uid#21]
            |   |   |   +-input_scan=
            |   |   |   | +-JoinScan
            |   |   |   |   +-column_list=[$distinct.public_dayofweek#2, SimpleTypesWithAnonymizationUid.int64#4, SimpleTypesWithAnonymizationUid.uid#17]
            |   |   |   |   +-left_scan=
            |   |   |   |   | +-WithRefScan(column_list=[$distinct.public_dayofweek#2], with_query_name="$public_groups0")
            |   |   |   |   +-right_scan=
            |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#4, uid#17], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
            |   |   |   |   +-join_expr=
            |   |   |   |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   |   |       +-ColumnRef(type=INT64, column=$distinct.public_dayofweek#2)
            |   |   |   |       +-FunctionCall(ZetaSQL:$extract(TIMESTAMP, ENUM<zetasql.functions.DateTimestampPart>, optional(0) STRING) -> INT64)
            |   |   |   |         +-FunctionCall(ZetaSQL:timestamp_from_unix_seconds(INT64) -> TIMESTAMP)
            |   |   |   |         | +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#4)
            |   |   |   |         +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAYOFWEEK)
            |   |   |   +-group_by_list=
            |   |   |   | +-public_dayofweek_partial#20 := ColumnRef(type=INT64, column=$distinct.public_dayofweek#2)
            |   |   |   | +-$uid#21 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#17)
            |   |   |   +-aggregate_list=
            |   |   |     +-$agg1_partial#19 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#21)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups0.public_dayofweek#23], with_query_name="$public_groups0")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |       +-ColumnRef(type=INT64, column=$public_groups0.public_dayofweek#23)
            |       +-FunctionCall(ZetaSQL:$extract(TIMESTAMP, ENUM<zetasql.functions.DateTimestampPart>, optional(0) STRING) -> INT64)
            |         +-FunctionCall(ZetaSQL:timestamp_from_unix_seconds(INT64) -> TIMESTAMP)
            |         | +-ColumnRef(type=INT64, column=$groupby.public_dayofweek_partial#20)
            |         +-Literal(type=ENUM<zetasql.functions.DateTimestampPart>, value=DAYOFWEEK)
            +-group_by_list=
            | +-public_dayofweek#16 := ColumnRef(type=INT64, column=$public_groups0.public_dayofweek#23)
            +-aggregate_list=
            | +-$agg1#15 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#21)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#19)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)
==

# Function calls in group-by list are not allowed
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) count(*)
from
  SimpleTypesWithAnonymizationUid
  right join (select distinct int64 from SimpleTypes)
    using (int64)
group by int64 + 1;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, $distinct.int64#31]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.int64#31]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   |   +-group_by_list=
        |   |     +-int64#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-$groupbycol1#33 :=
        |   +-FunctionCall(ZetaSQL:$add(INT64, INT64) -> INT64)
        |     +-ColumnRef(type=INT64, column=$distinct.int64#31)
        |     +-Literal(type=INT64, value=1)
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


Rewrite ERROR: Differential privacy option group_selection_strategy PUBLIC_GROUPS only allows column names out of the public group SELECT DISTINCT subquery in the GROUP BY list.
==

# Happy path for multiple public group joins, both right.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) count(*)
from SimpleTypesWithAnonymizationUid
right outer join (select distinct int64 from SimpleTypes)
  using (int64)
right outer join (select distinct string from SimpleTypes)
  using (string)
group by int64, string;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#51 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#51]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#51]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.string#5, $distinct.int64#31, $distinct.string#50]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-JoinScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.string#5, $distinct.int64#31]
        |   |   +-join_type=RIGHT
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4])
        |   |   +-right_scan=
        |   |   | +-AggregateScan
        |   |   |   +-column_list=[$distinct.int64#31]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[SimpleTypes.int64#14], table=SimpleTypes, column_index_list=[1])
        |   |   |   +-group_by_list=
        |   |   |     +-int64#31 := ColumnRef(type=INT64, column=SimpleTypes.int64#14)
        |   |   +-join_expr=
        |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
        |   |   +-has_using=TRUE
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.string#50]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.string#36], table=SimpleTypes, column_index_list=[4])
        |   |   +-group_by_list=
        |   |     +-string#50 := ColumnRef(type=STRING, column=SimpleTypes.string#36)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |   +-ColumnRef(type=STRING, column=$distinct.string#50)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#52 := ColumnRef(type=INT64, column=$distinct.int64#31)
        | +-string#53 := ColumnRef(type=STRING, column=$distinct.string#50)
        +-aggregate_list=
        | +-$agg1#51 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#51 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#51]
    +-input_scan=
      +-WithScan
        +-column_list=[$aggregate.$agg1#51]
        +-with_entry_list=
        | +-WithEntry
        | | +-with_query_name="$public_groups0"
        | | +-with_subquery=
        | |   +-AggregateScan
        | |     +-column_list=[$distinct.int64#63]
        | |     +-input_scan=
        | |     | +-TableScan(column_list=[SimpleTypes.int64#64], table=SimpleTypes, column_index_list=[1])
        | |     +-group_by_list=
        | |       +-int64#63 := ColumnRef(type=INT64, column=SimpleTypes.int64#64)
        | +-WithEntry
        |   +-with_query_name="$public_groups1"
        |   +-with_subquery=
        |     +-AggregateScan
        |       +-column_list=[$distinct.string#65]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypes.string#66], table=SimpleTypes, column_index_list=[4])
        |       +-group_by_list=
        |         +-string#65 := ColumnRef(type=STRING, column=SimpleTypes.string#66)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$aggregate.$agg1#51]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups1.string#62, $public_groups0.int64#61, $aggregate.$agg1_partial#56, $groupby.int64_partial#57, $groupby.string_partial#58, $group_by.$uid#59]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-JoinScan
            |   |   +-column_list=[$public_groups0.int64#61, $aggregate.$agg1_partial#56, $groupby.int64_partial#57, $groupby.string_partial#58, $group_by.$uid#59]
            |   |   +-join_type=RIGHT
            |   |   +-left_scan=
            |   |   | +-SampleScan
            |   |   |   +-column_list=[$aggregate.$agg1_partial#56, $groupby.int64_partial#57, $groupby.string_partial#58, $group_by.$uid#59]
            |   |   |   +-input_scan=
            |   |   |   | +-AggregateScan
            |   |   |   |   +-column_list=[$aggregate.$agg1_partial#56, $groupby.int64_partial#57, $groupby.string_partial#58, $group_by.$uid#59]
            |   |   |   |   +-input_scan=
            |   |   |   |   | +-JoinScan
            |   |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.string#5, $distinct.int64#31, $distinct.string#50, SimpleTypesWithAnonymizationUid.uid#54]
            |   |   |   |   |   +-left_scan=
            |   |   |   |   |   | +-JoinScan
            |   |   |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.string#5, $distinct.int64#31, SimpleTypesWithAnonymizationUid.uid#54]
            |   |   |   |   |   |   +-left_scan=
            |   |   |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5, uid#54], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4, 10])
            |   |   |   |   |   |   +-right_scan=
            |   |   |   |   |   |   | +-WithRefScan(column_list=[$distinct.int64#31], with_query_name="$public_groups0")
            |   |   |   |   |   |   +-join_expr=
            |   |   |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   |   |   |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
            |   |   |   |   |   |   |   +-ColumnRef(type=INT64, column=$distinct.int64#31)
            |   |   |   |   |   |   +-has_using=TRUE
            |   |   |   |   |   +-right_scan=
            |   |   |   |   |   | +-WithRefScan(column_list=[$distinct.string#50], with_query_name="$public_groups1")
            |   |   |   |   |   +-join_expr=
            |   |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |   |   |   |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
            |   |   |   |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#50)
            |   |   |   |   |   +-has_using=TRUE
            |   |   |   |   +-group_by_list=
            |   |   |   |   | +-int64_partial#57 := ColumnRef(type=INT64, column=$distinct.int64#31)
            |   |   |   |   | +-string_partial#58 := ColumnRef(type=STRING, column=$distinct.string#50)
            |   |   |   |   | +-$uid#59 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#54)
            |   |   |   |   +-aggregate_list=
            |   |   |   |     +-$agg1_partial#56 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   |   +-method="RESERVOIR"
            |   |   |   +-size=
            |   |   |   | +-Literal(type=INT64, value=3)
            |   |   |   +-unit=ROWS
            |   |   |   +-partition_by_list=
            |   |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#59)
            |   |   +-right_scan=
            |   |   | +-WithRefScan(column_list=[$public_groups0.int64#61], with_query_name="$public_groups0")
            |   |   +-join_expr=
            |   |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |       +-ColumnRef(type=INT64, column=$groupby.int64_partial#57)
            |   |       +-ColumnRef(type=INT64, column=$public_groups0.int64#61)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups1.string#62], with_query_name="$public_groups1")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |       +-ColumnRef(type=STRING, column=$groupby.string_partial#58)
            |       +-ColumnRef(type=STRING, column=$public_groups1.string#62)
            +-group_by_list=
            | +-int64#52 := ColumnRef(type=INT64, column=$public_groups0.int64#61)
            | +-string#53 := ColumnRef(type=STRING, column=$public_groups1.string#62)
            +-aggregate_list=
            | +-$agg1#51 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#59)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#56)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)
==

# Happy path for multiple public group joins, one left and one right.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) count(*)
from
  (select distinct int64 from SimpleTypes)
  left outer join SimpleTypesWithAnonymizationUid
    using (int64)
  right outer join (select distinct string from SimpleTypes)
    using (string)
group by int64, string;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#51 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#51]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#51]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[$distinct.int64#19, SimpleTypesWithAnonymizationUid.int64#21, SimpleTypesWithAnonymizationUid.string#24, $distinct.string#50]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-JoinScan
        |   |   +-column_list=[$distinct.int64#19, SimpleTypesWithAnonymizationUid.int64#21, SimpleTypesWithAnonymizationUid.string#24]
        |   |   +-join_type=LEFT
        |   |   +-left_scan=
        |   |   | +-AggregateScan
        |   |   |   +-column_list=[$distinct.int64#19]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
        |   |   |   +-group_by_list=
        |   |   |     +-int64#19 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   |   +-right_scan=
        |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#21, string#24], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4])
        |   |   +-join_expr=
        |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   |   +-ColumnRef(type=INT64, column=$distinct.int64#19)
        |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#21)
        |   |   +-has_using=TRUE
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.string#50]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.string#36], table=SimpleTypes, column_index_list=[4])
        |   |   +-group_by_list=
        |   |     +-string#50 := ColumnRef(type=STRING, column=SimpleTypes.string#36)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#24)
        |   |   +-ColumnRef(type=STRING, column=$distinct.string#50)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#52 := ColumnRef(type=INT64, column=$distinct.int64#19)
        | +-string#53 := ColumnRef(type=STRING, column=$distinct.string#50)
        +-aggregate_list=
        | +-$agg1#51 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#51 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#51]
    +-input_scan=
      +-WithScan
        +-column_list=[$aggregate.$agg1#51]
        +-with_entry_list=
        | +-WithEntry
        | | +-with_query_name="$public_groups0"
        | | +-with_subquery=
        | |   +-AggregateScan
        | |     +-column_list=[$distinct.int64#63]
        | |     +-input_scan=
        | |     | +-TableScan(column_list=[SimpleTypes.int64#64], table=SimpleTypes, column_index_list=[1])
        | |     +-group_by_list=
        | |       +-int64#63 := ColumnRef(type=INT64, column=SimpleTypes.int64#64)
        | +-WithEntry
        |   +-with_query_name="$public_groups1"
        |   +-with_subquery=
        |     +-AggregateScan
        |       +-column_list=[$distinct.string#65]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypes.string#66], table=SimpleTypes, column_index_list=[4])
        |       +-group_by_list=
        |         +-string#65 := ColumnRef(type=STRING, column=SimpleTypes.string#66)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$aggregate.$agg1#51]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups1.string#62, $public_groups0.int64#61, $aggregate.$agg1_partial#56, $groupby.int64_partial#57, $groupby.string_partial#58, $group_by.$uid#59]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-JoinScan
            |   |   +-column_list=[$public_groups0.int64#61, $aggregate.$agg1_partial#56, $groupby.int64_partial#57, $groupby.string_partial#58, $group_by.$uid#59]
            |   |   +-join_type=RIGHT
            |   |   +-left_scan=
            |   |   | +-SampleScan
            |   |   |   +-column_list=[$aggregate.$agg1_partial#56, $groupby.int64_partial#57, $groupby.string_partial#58, $group_by.$uid#59]
            |   |   |   +-input_scan=
            |   |   |   | +-AggregateScan
            |   |   |   |   +-column_list=[$aggregate.$agg1_partial#56, $groupby.int64_partial#57, $groupby.string_partial#58, $group_by.$uid#59]
            |   |   |   |   +-input_scan=
            |   |   |   |   | +-JoinScan
            |   |   |   |   |   +-column_list=[$distinct.int64#19, SimpleTypesWithAnonymizationUid.int64#21, SimpleTypesWithAnonymizationUid.string#24, $distinct.string#50, SimpleTypesWithAnonymizationUid.uid#54]
            |   |   |   |   |   +-left_scan=
            |   |   |   |   |   | +-JoinScan
            |   |   |   |   |   |   +-column_list=[$distinct.int64#19, SimpleTypesWithAnonymizationUid.int64#21, SimpleTypesWithAnonymizationUid.string#24, SimpleTypesWithAnonymizationUid.uid#54]
            |   |   |   |   |   |   +-left_scan=
            |   |   |   |   |   |   | +-WithRefScan(column_list=[$distinct.int64#19], with_query_name="$public_groups0")
            |   |   |   |   |   |   +-right_scan=
            |   |   |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#21, string#24, uid#54], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4, 10])
            |   |   |   |   |   |   +-join_expr=
            |   |   |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   |   |   |   |   |   +-ColumnRef(type=INT64, column=$distinct.int64#19)
            |   |   |   |   |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#21)
            |   |   |   |   |   |   +-has_using=TRUE
            |   |   |   |   |   +-right_scan=
            |   |   |   |   |   | +-WithRefScan(column_list=[$distinct.string#50], with_query_name="$public_groups1")
            |   |   |   |   |   +-join_expr=
            |   |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |   |   |   |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#24)
            |   |   |   |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#50)
            |   |   |   |   |   +-has_using=TRUE
            |   |   |   |   +-group_by_list=
            |   |   |   |   | +-int64_partial#57 := ColumnRef(type=INT64, column=$distinct.int64#19)
            |   |   |   |   | +-string_partial#58 := ColumnRef(type=STRING, column=$distinct.string#50)
            |   |   |   |   | +-$uid#59 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#54)
            |   |   |   |   +-aggregate_list=
            |   |   |   |     +-$agg1_partial#56 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   |   +-method="RESERVOIR"
            |   |   |   +-size=
            |   |   |   | +-Literal(type=INT64, value=3)
            |   |   |   +-unit=ROWS
            |   |   |   +-partition_by_list=
            |   |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#59)
            |   |   +-right_scan=
            |   |   | +-WithRefScan(column_list=[$public_groups0.int64#61], with_query_name="$public_groups0")
            |   |   +-join_expr=
            |   |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |       +-ColumnRef(type=INT64, column=$public_groups0.int64#61)
            |   |       +-ColumnRef(type=INT64, column=$groupby.int64_partial#57)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups1.string#62], with_query_name="$public_groups1")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |       +-ColumnRef(type=STRING, column=$groupby.string_partial#58)
            |       +-ColumnRef(type=STRING, column=$public_groups1.string#62)
            +-group_by_list=
            | +-int64#52 := ColumnRef(type=INT64, column=$public_groups0.int64#61)
            | +-string#53 := ColumnRef(type=STRING, column=$public_groups1.string#62)
            +-aggregate_list=
            | +-$agg1#51 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#59)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#56)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)
==

# Happy path for multiple public group joins, both left.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) count(*)
from
  (select distinct int64 from SimpleTypes)
  left outer join (
    (select distinct string from SimpleTypes)
    left outer join SimpleTypesWithAnonymizationUid
      using (string)
  ) using (int64)
group by int64, string;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#51 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#51]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$aggregate.$agg1#51]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[$distinct.int64#19, $distinct.string#38, SimpleTypesWithAnonymizationUid.int64#40, SimpleTypesWithAnonymizationUid.string#43]
        |   +-join_type=LEFT
        |   +-left_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.int64#19]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
        |   |   +-group_by_list=
        |   |     +-int64#19 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   +-right_scan=
        |   | +-JoinScan
        |   |   +-column_list=[$distinct.string#38, SimpleTypesWithAnonymizationUid.int64#40, SimpleTypesWithAnonymizationUid.string#43]
        |   |   +-join_type=LEFT
        |   |   +-left_scan=
        |   |   | +-AggregateScan
        |   |   |   +-column_list=[$distinct.string#38]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[SimpleTypes.string#24], table=SimpleTypes, column_index_list=[4])
        |   |   |   +-group_by_list=
        |   |   |     +-string#38 := ColumnRef(type=STRING, column=SimpleTypes.string#24)
        |   |   +-right_scan=
        |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#40, string#43], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4])
        |   |   +-join_expr=
        |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#38)
        |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#43)
        |   |   +-has_using=TRUE
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=$distinct.int64#19)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#40)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#52 := ColumnRef(type=INT64, column=$distinct.int64#19)
        | +-string#53 := ColumnRef(type=STRING, column=$distinct.string#38)
        +-aggregate_list=
        | +-$agg1#51 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#51 AS `$col1` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$aggregate.$agg1#51]
    +-input_scan=
      +-WithScan
        +-column_list=[$aggregate.$agg1#51]
        +-with_entry_list=
        | +-WithEntry
        | | +-with_query_name="$public_groups0"
        | | +-with_subquery=
        | |   +-AggregateScan
        | |     +-column_list=[$distinct.string#63]
        | |     +-input_scan=
        | |     | +-TableScan(column_list=[SimpleTypes.string#64], table=SimpleTypes, column_index_list=[4])
        | |     +-group_by_list=
        | |       +-string#63 := ColumnRef(type=STRING, column=SimpleTypes.string#64)
        | +-WithEntry
        |   +-with_query_name="$public_groups1"
        |   +-with_subquery=
        |     +-AggregateScan
        |       +-column_list=[$distinct.int64#65]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypes.int64#66], table=SimpleTypes, column_index_list=[1])
        |       +-group_by_list=
        |         +-int64#65 := ColumnRef(type=INT64, column=SimpleTypes.int64#66)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$aggregate.$agg1#51]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups1.int64#62, $public_groups0.string#61, $aggregate.$agg1_partial#56, $groupby.int64_partial#57, $groupby.string_partial#58, $group_by.$uid#59]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-JoinScan
            |   |   +-column_list=[$public_groups0.string#61, $aggregate.$agg1_partial#56, $groupby.int64_partial#57, $groupby.string_partial#58, $group_by.$uid#59]
            |   |   +-join_type=RIGHT
            |   |   +-left_scan=
            |   |   | +-SampleScan
            |   |   |   +-column_list=[$aggregate.$agg1_partial#56, $groupby.int64_partial#57, $groupby.string_partial#58, $group_by.$uid#59]
            |   |   |   +-input_scan=
            |   |   |   | +-AggregateScan
            |   |   |   |   +-column_list=[$aggregate.$agg1_partial#56, $groupby.int64_partial#57, $groupby.string_partial#58, $group_by.$uid#59]
            |   |   |   |   +-input_scan=
            |   |   |   |   | +-JoinScan
            |   |   |   |   |   +-column_list=[$distinct.int64#19, $distinct.string#38, SimpleTypesWithAnonymizationUid.int64#40, SimpleTypesWithAnonymizationUid.string#43, SimpleTypesWithAnonymizationUid.uid#54]
            |   |   |   |   |   +-left_scan=
            |   |   |   |   |   | +-WithRefScan(column_list=[$distinct.int64#19], with_query_name="$public_groups1")
            |   |   |   |   |   +-right_scan=
            |   |   |   |   |   | +-JoinScan
            |   |   |   |   |   |   +-column_list=[$distinct.string#38, SimpleTypesWithAnonymizationUid.int64#40, SimpleTypesWithAnonymizationUid.string#43, SimpleTypesWithAnonymizationUid.uid#54]
            |   |   |   |   |   |   +-left_scan=
            |   |   |   |   |   |   | +-WithRefScan(column_list=[$distinct.string#38], with_query_name="$public_groups0")
            |   |   |   |   |   |   +-right_scan=
            |   |   |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#40, string#43, uid#54], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4, 10])
            |   |   |   |   |   |   +-join_expr=
            |   |   |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |   |   |   |   |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#38)
            |   |   |   |   |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#43)
            |   |   |   |   |   |   +-has_using=TRUE
            |   |   |   |   |   +-join_expr=
            |   |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   |   |   |   |   +-ColumnRef(type=INT64, column=$distinct.int64#19)
            |   |   |   |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#40)
            |   |   |   |   |   +-has_using=TRUE
            |   |   |   |   +-group_by_list=
            |   |   |   |   | +-int64_partial#57 := ColumnRef(type=INT64, column=$distinct.int64#19)
            |   |   |   |   | +-string_partial#58 := ColumnRef(type=STRING, column=$distinct.string#38)
            |   |   |   |   | +-$uid#59 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#54)
            |   |   |   |   +-aggregate_list=
            |   |   |   |     +-$agg1_partial#56 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   |   +-method="RESERVOIR"
            |   |   |   +-size=
            |   |   |   | +-Literal(type=INT64, value=3)
            |   |   |   +-unit=ROWS
            |   |   |   +-partition_by_list=
            |   |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#59)
            |   |   +-right_scan=
            |   |   | +-WithRefScan(column_list=[$public_groups0.string#61], with_query_name="$public_groups0")
            |   |   +-join_expr=
            |   |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |   |       +-ColumnRef(type=STRING, column=$public_groups0.string#61)
            |   |       +-ColumnRef(type=STRING, column=$groupby.string_partial#58)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups1.int64#62], with_query_name="$public_groups1")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |       +-ColumnRef(type=INT64, column=$public_groups1.int64#62)
            |       +-ColumnRef(type=INT64, column=$groupby.int64_partial#57)
            +-group_by_list=
            | +-int64#52 := ColumnRef(type=INT64, column=$public_groups1.int64#62)
            | +-string#53 := ColumnRef(type=STRING, column=$public_groups0.string#61)
            +-aggregate_list=
            | +-$agg1#51 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#59)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#56)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)
==

# Fails as two public group joins are required, but none is provided.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) int64, string, count(*)
from SimpleTypesWithAnonymizationUid
group by int64, string;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$groupby.int64#14 AS int64 [INT64]
| +-$groupby.string#15 AS string [STRING]
| +-$aggregate.$agg1#13 AS `$col3` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int64#14, $groupby.string#15, $aggregate.$agg1#13]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.int64#14, $groupby.string#15, $aggregate.$agg1#13]
        +-input_scan=
        | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4])
        +-group_by_list=
        | +-int64#14 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        | +-string#15 := ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        +-aggregate_list=
        | +-$agg1#13 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


Rewrite ERROR: Differential privacy option group_selection_strategy PUBLIC_GROUPS expects an outer join with a SELECT DISTINCT subquery over a non-uid table for all columns in the GROUP BY, but did not find such a join for the following columns: int64, string
==

# Fails as two public group joins are required, but only one is provided.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) int64, string, count(*)
from SimpleTypesWithAnonymizationUid
right outer join (select distinct string from SimpleTypes)
  using (string)
group by int64, string;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$groupby.int64#33 AS int64 [INT64]
| +-$groupby.string#34 AS string [STRING]
| +-$aggregate.$agg1#32 AS `$col3` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int64#33, $groupby.string#34, $aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.int64#33, $groupby.string#34, $aggregate.$agg1#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4])
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.string#31]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
        |   |   +-group_by_list=
        |   |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#33 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        | +-string#34 := ColumnRef(type=STRING, column=$distinct.string#31)
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


Rewrite ERROR: Differential privacy option group_selection_strategy PUBLIC_GROUPS expects an outer join with a SELECT DISTINCT subquery over a non-uid table for all columns in the GROUP BY, but did not find such a join for the following columns: int64
==

# Fails as two public group joins are required, but one uses a table with uid.
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) int64, string, count(*)
from SimpleTypesWithAnonymizationUid
right outer join (select distinct int64 from SimpleTypesWithAnonymizationUid)
  using (int64)
right outer join (select distinct string from SimpleTypes)
  using (string)
group by int64, string;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$groupby.int64#46 AS int64 [INT64]
| +-$groupby.string#47 AS string [STRING]
| +-$aggregate.$agg1#45 AS `$col3` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.int64#46, $groupby.string#47, $aggregate.$agg1#45]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.int64#46, $groupby.string#47, $aggregate.$agg1#45]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.string#5, $distinct.int64#25, $distinct.string#44]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-JoinScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.string#5, $distinct.int64#25]
        |   |   +-join_type=RIGHT
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4])
        |   |   +-right_scan=
        |   |   | +-AggregateScan
        |   |   |   +-column_list=[$distinct.int64#25]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#14], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
        |   |   |   +-group_by_list=
        |   |   |     +-int64#25 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#14)
        |   |   +-join_expr=
        |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   |   +-ColumnRef(type=INT64, column=$distinct.int64#25)
        |   |   +-has_using=TRUE
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.string#44]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.string#30], table=SimpleTypes, column_index_list=[4])
        |   |   +-group_by_list=
        |   |     +-string#44 := ColumnRef(type=STRING, column=SimpleTypes.string#30)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |   +-ColumnRef(type=STRING, column=$distinct.string#44)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-int64#46 := ColumnRef(type=INT64, column=$distinct.int64#25)
        | +-string#47 := ColumnRef(type=STRING, column=$distinct.string#44)
        +-aggregate_list=
        | +-$agg1#45 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


Rewrite ERROR: Joins between tables containing private data must also explicitly join on the user id column in each table, add 'AND uid=uid' to the join ON expression
==

# Happy path with public groups defined in a WithScan.
with
  public_int64s as (select distinct int64 from SimpleTypes)
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) count(*)
from
  SimpleTypesWithAnonymizationUid
  right join public_int64s using (int64)
group by int64;
--
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#33 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#33]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="public_int64s"
    |   +-with_subquery=
    |     +-AggregateScan
    |       +-column_list=[$distinct.int64#19]
    |       +-input_scan=
    |       | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
    |       +-group_by_list=
    |         +-int64#19 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#33]
        +-input_scan=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$aggregate.$agg1#33]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#21, public_int64s.int64#32]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#21], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[public_int64s.int64#32], with_query_name="public_int64s")
            |   +-join_expr=
            |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#21)
            |   |   +-ColumnRef(type=INT64, column=public_int64s.int64#32)
            |   +-has_using=TRUE
            +-group_by_list=
            | +-int64#34 := ColumnRef(type=INT64, column=public_int64s.int64#32)
            +-aggregate_list=
            | +-$agg1#33 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#33 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#33]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="public_int64s"
    |   +-with_subquery=
    |     +-AggregateScan
    |       +-column_list=[$distinct.int64#19]
    |       +-input_scan=
    |       | +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
    |       +-group_by_list=
    |         +-int64#19 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#33]
        +-input_scan=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$aggregate.$agg1#33]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[public_int64s.int64#41, $aggregate.$agg1_partial#37, $groupby.int64_partial#38, $group_by.$uid#39]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.$agg1_partial#37, $groupby.int64_partial#38, $group_by.$uid#39]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.$agg1_partial#37, $groupby.int64_partial#38, $group_by.$uid#39]
            |   |   |   +-input_scan=
            |   |   |   | +-JoinScan
            |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#21, public_int64s.int64#32, SimpleTypesWithAnonymizationUid.uid#35]
            |   |   |   |   +-left_scan=
            |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#21, uid#35], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
            |   |   |   |   +-right_scan=
            |   |   |   |   | +-WithRefScan(column_list=[public_int64s.int64#32], with_query_name="public_int64s")
            |   |   |   |   +-join_expr=
            |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#21)
            |   |   |   |   |   +-ColumnRef(type=INT64, column=public_int64s.int64#32)
            |   |   |   |   +-has_using=TRUE
            |   |   |   +-group_by_list=
            |   |   |   | +-int64_partial#38 := ColumnRef(type=INT64, column=public_int64s.int64#32)
            |   |   |   | +-$uid#39 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#35)
            |   |   |   +-aggregate_list=
            |   |   |     +-$agg1_partial#37 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#39)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[public_int64s.int64#41], with_query_name="public_int64s")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |       +-ColumnRef(type=INT64, column=$groupby.int64_partial#38)
            |       +-ColumnRef(type=INT64, column=public_int64s.int64#41)
            +-group_by_list=
            | +-int64#34 := ColumnRef(type=INT64, column=public_int64s.int64#41)
            +-aggregate_list=
            | +-$agg1#33 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#39)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#37)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)
==

# With scan without SELECT DISTINCT subquery fails.
with
  public_int64s as (select int64 from SimpleTypes)
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) count(*)
from
  SimpleTypesWithAnonymizationUid
  right join public_int64s using (int64)
group by int64;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$aggregate.$agg1#32 AS `$col1` [INT64]
+-query=
  +-WithScan
    +-column_list=[$aggregate.$agg1#32]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="public_int64s"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[SimpleTypes.int64#2]
    |       +-input_scan=
    |         +-TableScan(column_list=[SimpleTypes.int64#2], table=SimpleTypes, column_index_list=[1])
    +-query=
      +-ProjectScan
        +-column_list=[$aggregate.$agg1#32]
        +-input_scan=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$aggregate.$agg1#32]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#20, public_int64s.int64#31]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#20], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[public_int64s.int64#31], with_query_name="public_int64s")
            |   +-join_expr=
            |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#20)
            |   |   +-ColumnRef(type=INT64, column=public_int64s.int64#31)
            |   +-has_using=TRUE
            +-group_by_list=
            | +-int64#33 := ColumnRef(type=INT64, column=public_int64s.int64#31)
            +-aggregate_list=
            | +-$agg1#32 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)


Rewrite ERROR: The right table in a RIGHT OUTER join must contain user data
==

# anon_sum happy path
select with differential_privacy options(
  group_selection_strategy=PUBLIC_GROUPS,
  max_groups_contributed=3
) string, sum(int64)
from SimpleTypesWithAnonymizationUid
right join (select distinct string from SimpleTypes) using(string)
GROUP BY string;
--
QueryStmt
+-output_column_list=
| +-$groupby.string#33 AS string [STRING]
| +-$aggregate.$agg1#32 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#33, $aggregate.$agg1#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.string#33, $aggregate.$agg1#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4])
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.string#31]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
        |   |   +-group_by_list=
        |   |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-string#33 := ColumnRef(type=STRING, column=$distinct.string#31)
        +-aggregate_list=
        | +-$agg1#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
          +-max_groups_contributed := Literal(type=INT64, value=3)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#33 AS string [STRING]
| +-$aggregate.$agg1#32 AS `$col2` [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#33, $aggregate.$agg1#32]
    +-input_scan=
      +-WithScan
        +-column_list=[$groupby.string#33, $aggregate.$agg1#32]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="$public_groups0"
        |   +-with_subquery=
        |     +-AggregateScan
        |       +-column_list=[$distinct.string#41]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypes.string#42], table=SimpleTypes, column_index_list=[4])
        |       +-group_by_list=
        |         +-string#41 := ColumnRef(type=STRING, column=SimpleTypes.string#42)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$groupby.string#33, $aggregate.$agg1#32]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups0.string#40, $aggregate.$agg1_partial#36, $groupby.string_partial#37, $group_by.$uid#38]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.$agg1_partial#36, $groupby.string_partial#37, $group_by.$uid#38]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.$agg1_partial#36, $groupby.string_partial#37, $group_by.$uid#38]
            |   |   |   +-input_scan=
            |   |   |   | +-JoinScan
            |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31, SimpleTypesWithAnonymizationUid.uid#34]
            |   |   |   |   +-left_scan=
            |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5, uid#34], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4, 10])
            |   |   |   |   +-right_scan=
            |   |   |   |   | +-WithRefScan(column_list=[$distinct.string#31], with_query_name="$public_groups0")
            |   |   |   |   +-join_expr=
            |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |   |   |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
            |   |   |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
            |   |   |   |   +-has_using=TRUE
            |   |   |   +-group_by_list=
            |   |   |   | +-string_partial#37 := ColumnRef(type=STRING, column=$distinct.string#31)
            |   |   |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#34)
            |   |   |   +-aggregate_list=
            |   |   |     +-$agg1_partial#36 :=
            |   |   |       +-AggregateFunctionCall(ZetaSQL:sum(INT64) -> INT64)
            |   |   |         +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#38)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups0.string#40], with_query_name="$public_groups0")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |       +-ColumnRef(type=STRING, column=$groupby.string_partial#37)
            |       +-ColumnRef(type=STRING, column=$public_groups0.string#40)
            +-group_by_list=
            | +-string#33 := ColumnRef(type=STRING, column=$public_groups0.string#40)
            +-aggregate_list=
            | +-$agg1#32 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#38)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#36)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
              +-max_groups_contributed := Literal(type=INT64, value=3)
==

# Inner join after public groups join is not allowed.
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
  max_groups_contributed=3,
  group_selection_strategy = PUBLIC_GROUPS
) string, COUNT(*) AS anon_users
FROM
  SimpleTypesWithAnonymizationUid
RIGHT OUTER JOIN
  (SELECT DISTINCT string FROM SimpleTypes)
    USING (string)
INNER JOIN
  SimpleTypes using(string)
GROUP BY string;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#51 AS string [STRING]
| +-$aggregate.anon_users#50 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#51, $aggregate.anon_users#50]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.string#51, $aggregate.anon_users#50]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31, SimpleTypes.string#36]
        |   +-left_scan=
        |   | +-JoinScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
        |   |   +-join_type=RIGHT
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[4])
        |   |   +-right_scan=
        |   |   | +-AggregateScan
        |   |   |   +-column_list=[$distinct.string#31]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
        |   |   |   +-group_by_list=
        |   |   |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
        |   |   +-join_expr=
        |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
        |   |   +-has_using=TRUE
        |   +-right_scan=
        |   | +-TableScan(column_list=[SimpleTypes.string#36], table=SimpleTypes, column_index_list=[4])
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
        |   |   +-ColumnRef(type=STRING, column=SimpleTypes.string#36)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-string#51 := ColumnRef(type=STRING, column=$distinct.string#31)
        +-aggregate_list=
        | +-anon_users#50 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-max_groups_contributed := Literal(type=INT64, value=3)
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


Rewrite ERROR: group_selection_strategy = PUBLIC_GROUPS does not allow JOIN operations between the public groups join and the aggregation, because they could suppress public groups from the result. Try moving the operation to an input subquery of the public groups join.
==

# Filter scan between public groups join and aggregation is not allowed.
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
  max_groups_contributed=3,
  group_selection_strategy = PUBLIC_GROUPS
) string, COUNT(*) AS anon_users
FROM
  SimpleTypesWithAnonymizationUid
RIGHT OUTER JOIN
  (SELECT DISTINCT string FROM SimpleTypes)
    USING (string)
WHERE STARTS_WITH(string, 'abc')
GROUP BY string;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#33 AS string [STRING]
| +-$aggregate.anon_users#32 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
        +-input_scan=
        | +-FilterScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
        |   |   +-join_type=RIGHT
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[4])
        |   |   +-right_scan=
        |   |   | +-AggregateScan
        |   |   |   +-column_list=[$distinct.string#31]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
        |   |   |   +-group_by_list=
        |   |   |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
        |   |   +-join_expr=
        |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
        |   |   +-has_using=TRUE
        |   +-filter_expr=
        |     +-FunctionCall(ZetaSQL:starts_with(STRING, STRING) -> BOOL)
        |       +-ColumnRef(type=STRING, column=$distinct.string#31)
        |       +-Literal(type=STRING, value="abc")
        +-group_by_list=
        | +-string#33 := ColumnRef(type=STRING, column=$distinct.string#31)
        +-aggregate_list=
        | +-anon_users#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-max_groups_contributed := Literal(type=INT64, value=3)
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


Rewrite ERROR: group_selection_strategy = PUBLIC_GROUPS does not allow operations between the public groups join and the aggregation, because they could suppress public groups from the result. Try moving the operation to an input subquery of the public groups join.
==

# Filter scan after aggregation is allowed.
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
  max_groups_contributed=3,
  group_selection_strategy = PUBLIC_GROUPS
) string, COUNT(*) AS anon_users
FROM
  SimpleTypesWithAnonymizationUid
RIGHT OUTER JOIN
  (SELECT DISTINCT string FROM SimpleTypes)
    USING (string)
GROUP BY string
HAVING STARTS_WITH(string, 'abc');
--
QueryStmt
+-output_column_list=
| +-$groupby.string#33 AS string [STRING]
| +-$aggregate.anon_users#32 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
        +-input_scan=
        | +-DifferentialPrivacyAggregateScan
        |   +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
        |   |   +-join_type=RIGHT
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[4])
        |   |   +-right_scan=
        |   |   | +-AggregateScan
        |   |   |   +-column_list=[$distinct.string#31]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
        |   |   |   +-group_by_list=
        |   |   |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
        |   |   +-join_expr=
        |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
        |   |   +-has_using=TRUE
        |   +-group_by_list=
        |   | +-string#33 := ColumnRef(type=STRING, column=$distinct.string#31)
        |   +-aggregate_list=
        |   | +-anon_users#32 :=
        |   |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |   |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        |   +-option_list=
        |     +-max_groups_contributed := Literal(type=INT64, value=3)
        |     +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:starts_with(STRING, STRING) -> BOOL)
            +-ColumnRef(type=STRING, column=$groupby.string#33)
            +-Literal(type=STRING, value="abc")


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#33 AS string [STRING]
| +-$aggregate.anon_users#32 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    +-input_scan=
      +-FilterScan
        +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
        +-input_scan=
        | +-WithScan
        |   +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
        |   +-with_entry_list=
        |   | +-WithEntry
        |   |   +-with_query_name="$public_groups0"
        |   |   +-with_subquery=
        |   |     +-AggregateScan
        |   |       +-column_list=[$distinct.string#41]
        |   |       +-input_scan=
        |   |       | +-TableScan(column_list=[SimpleTypes.string#42], table=SimpleTypes, column_index_list=[4])
        |   |       +-group_by_list=
        |   |         +-string#41 := ColumnRef(type=STRING, column=SimpleTypes.string#42)
        |   +-query=
        |     +-DifferentialPrivacyAggregateScan
        |       +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
        |       +-input_scan=
        |       | +-JoinScan
        |       |   +-column_list=[$public_groups0.string#40, $aggregate.anon_users_partial#36, $groupby.string_partial#37, $group_by.$uid#38]
        |       |   +-join_type=RIGHT
        |       |   +-left_scan=
        |       |   | +-SampleScan
        |       |   |   +-column_list=[$aggregate.anon_users_partial#36, $groupby.string_partial#37, $group_by.$uid#38]
        |       |   |   +-input_scan=
        |       |   |   | +-AggregateScan
        |       |   |   |   +-column_list=[$aggregate.anon_users_partial#36, $groupby.string_partial#37, $group_by.$uid#38]
        |       |   |   |   +-input_scan=
        |       |   |   |   | +-JoinScan
        |       |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31, SimpleTypesWithAnonymizationUid.uid#34]
        |       |   |   |   |   +-left_scan=
        |       |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#34], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
        |       |   |   |   |   +-right_scan=
        |       |   |   |   |   | +-WithRefScan(column_list=[$distinct.string#31], with_query_name="$public_groups0")
        |       |   |   |   |   +-join_expr=
        |       |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |       |   |   |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |       |   |   |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
        |       |   |   |   |   +-has_using=TRUE
        |       |   |   |   +-group_by_list=
        |       |   |   |   | +-string_partial#37 := ColumnRef(type=STRING, column=$distinct.string#31)
        |       |   |   |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#34)
        |       |   |   |   +-aggregate_list=
        |       |   |   |     +-anon_users_partial#36 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |       |   |   +-method="RESERVOIR"
        |       |   |   +-size=
        |       |   |   | +-Literal(type=INT64, value=3)
        |       |   |   +-unit=ROWS
        |       |   |   +-partition_by_list=
        |       |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#38)
        |       |   +-right_scan=
        |       |   | +-WithRefScan(column_list=[$public_groups0.string#40], with_query_name="$public_groups0")
        |       |   +-join_expr=
        |       |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |       |       +-ColumnRef(type=STRING, column=$groupby.string_partial#37)
        |       |       +-ColumnRef(type=STRING, column=$public_groups0.string#40)
        |       +-group_by_list=
        |       | +-string#33 := ColumnRef(type=STRING, column=$public_groups0.string#40)
        |       +-aggregate_list=
        |       | +-anon_users#32 :=
        |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |       |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
        |       |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
        |       |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#38)
        |       |     | +-Literal(type=INT64, value=NULL)
        |       |     | +-ColumnRef(type=INT64, column=$aggregate.anon_users_partial#36)
        |       |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        |       +-option_list=
        |         +-max_groups_contributed := Literal(type=INT64, value=3)
        |         +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
        +-filter_expr=
          +-FunctionCall(ZetaSQL:starts_with(STRING, STRING) -> BOOL)
            +-ColumnRef(type=STRING, column=$groupby.string#33)
            +-Literal(type=STRING, value="abc")
==

# Filter scans in input scans of public group joins are allowed.
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
  max_groups_contributed=3,
  group_selection_strategy = PUBLIC_GROUPS
) string, COUNT(*) AS anon_users
FROM
  (SELECT uid, string FROM SimpleTypesWithAnonymizationUid WHERE int64 > 10)
RIGHT OUTER JOIN
  (SELECT DISTINCT string FROM SimpleTypes WHERE STARTS_WITH(string, 'abc'))
    USING (string)
GROUP BY string;
--
QueryStmt
+-output_column_list=
| +-$groupby.string#33 AS string [STRING]
| +-$aggregate.anon_users#32 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-ProjectScan
        |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, string#5]
        |   |   +-input_scan=
        |   |     +-FilterScan
        |   |       +-column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5, uid#11]
        |   |       +-input_scan=
        |   |       | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4, 10])
        |   |       +-filter_expr=
        |   |         +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
        |   |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |           +-Literal(type=INT64, value=10)
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.string#31]
        |   |   +-input_scan=
        |   |   | +-FilterScan
        |   |   |   +-column_list=[SimpleTypes.string#17]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
        |   |   |   +-filter_expr=
        |   |   |     +-FunctionCall(ZetaSQL:starts_with(STRING, STRING) -> BOOL)
        |   |   |       +-ColumnRef(type=STRING, column=SimpleTypes.string#17)
        |   |   |       +-Literal(type=STRING, value="abc")
        |   |   +-group_by_list=
        |   |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-string#33 := ColumnRef(type=STRING, column=$distinct.string#31)
        +-aggregate_list=
        | +-anon_users#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-max_groups_contributed := Literal(type=INT64, value=3)
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#33 AS string [STRING]
| +-$aggregate.anon_users#32 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    +-input_scan=
      +-WithScan
        +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="$public_groups0"
        |   +-with_subquery=
        |     +-AggregateScan
        |       +-column_list=[$distinct.string#40]
        |       +-input_scan=
        |       | +-FilterScan
        |       |   +-column_list=[SimpleTypes.string#41]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypes.string#41], table=SimpleTypes, column_index_list=[4])
        |       |   +-filter_expr=
        |       |     +-FunctionCall(ZetaSQL:starts_with(STRING, STRING) -> BOOL)
        |       |       +-ColumnRef(type=STRING, column=SimpleTypes.string#41)
        |       |       +-Literal(type=STRING, value="abc")
        |       +-group_by_list=
        |         +-string#40 := ColumnRef(type=STRING, column=SimpleTypes.string#41)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups0.string#39, $aggregate.anon_users_partial#35, $groupby.string_partial#36, $group_by.$uid#37]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.anon_users_partial#35, $groupby.string_partial#36, $group_by.$uid#37]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.anon_users_partial#35, $groupby.string_partial#36, $group_by.$uid#37]
            |   |   |   +-input_scan=
            |   |   |   | +-JoinScan
            |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
            |   |   |   |   +-left_scan=
            |   |   |   |   | +-ProjectScan
            |   |   |   |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, string#5]
            |   |   |   |   |   +-input_scan=
            |   |   |   |   |     +-FilterScan
            |   |   |   |   |       +-column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5, uid#11]
            |   |   |   |   |       +-input_scan=
            |   |   |   |   |       | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, string#5, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 4, 10])
            |   |   |   |   |       +-filter_expr=
            |   |   |   |   |         +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
            |   |   |   |   |           +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
            |   |   |   |   |           +-Literal(type=INT64, value=10)
            |   |   |   |   +-right_scan=
            |   |   |   |   | +-WithRefScan(column_list=[$distinct.string#31], with_query_name="$public_groups0")
            |   |   |   |   +-join_expr=
            |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |   |   |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
            |   |   |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
            |   |   |   |   +-has_using=TRUE
            |   |   |   +-group_by_list=
            |   |   |   | +-string_partial#36 := ColumnRef(type=STRING, column=$distinct.string#31)
            |   |   |   | +-$uid#37 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
            |   |   |   +-aggregate_list=
            |   |   |     +-anon_users_partial#35 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#37)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups0.string#39], with_query_name="$public_groups0")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |       +-ColumnRef(type=STRING, column=$groupby.string_partial#36)
            |       +-ColumnRef(type=STRING, column=$public_groups0.string#39)
            +-group_by_list=
            | +-string#33 := ColumnRef(type=STRING, column=$public_groups0.string#39)
            +-aggregate_list=
            | +-anon_users#32 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#37)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.anon_users_partial#35)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-max_groups_contributed := Literal(type=INT64, value=3)
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
==

# Limit scans after public groups joins are not allowed.
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
  max_groups_contributed=3,
  group_selection_strategy = PUBLIC_GROUPS
) string, COUNT(*) AS anon_users
FROM (
  SELECT uid, string FROM
    SimpleTypesWithAnonymizationUid
  RIGHT OUTER JOIN
    (SELECT DISTINCT string FROM SimpleTypes)
      USING (string)
  LIMIT 10
) GROUP BY string;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#33 AS string [STRING]
| +-$aggregate.anon_users#32 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
        +-input_scan=
        | +-LimitOffsetScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, $distinct.string#31]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, $distinct.string#31]
        |   |   +-input_scan=
        |   |     +-JoinScan
        |   |       +-column_list=[SimpleTypesWithAnonymizationUid.string#5, SimpleTypesWithAnonymizationUid.uid#11, $distinct.string#31]
        |   |       +-join_type=RIGHT
        |   |       +-left_scan=
        |   |       | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
        |   |       +-right_scan=
        |   |       | +-AggregateScan
        |   |       |   +-column_list=[$distinct.string#31]
        |   |       |   +-input_scan=
        |   |       |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
        |   |       |   +-group_by_list=
        |   |       |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
        |   |       +-join_expr=
        |   |       | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |       |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |       |   +-ColumnRef(type=STRING, column=$distinct.string#31)
        |   |       +-has_using=TRUE
        |   +-limit=
        |     +-Literal(type=INT64, value=10)
        +-group_by_list=
        | +-string#33 := ColumnRef(type=STRING, column=$distinct.string#31)
        +-aggregate_list=
        | +-anon_users#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-max_groups_contributed := Literal(type=INT64, value=3)
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


Rewrite ERROR: group_selection_strategy = PUBLIC_GROUPS does not allow operations between the public groups join and the aggregation, because they could suppress public groups from the result. Try moving the operation to an input subquery of the public groups join.
==

# Limit scans in input scans of public groups joins are allowed
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
  max_groups_contributed=3,
  group_selection_strategy = PUBLIC_GROUPS
) string, COUNT(*) AS anon_users
FROM
  (SELECT uid, string FROM SimpleTypesWithAnonymizationUid LIMIT 10)
RIGHT OUTER JOIN
  (SELECT DISTINCT string FROM SimpleTypes LIMIT 11)
    USING (string)
GROUP BY string;
--
QueryStmt
+-output_column_list=
| +-$groupby.string#33 AS string [STRING]
| +-$aggregate.anon_users#32 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-LimitOffsetScan
        |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, string#5]
        |   |   +-input_scan=
        |   |   | +-ProjectScan
        |   |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, string#5]
        |   |   |   +-input_scan=
        |   |   |     +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
        |   |   +-limit=
        |   |     +-Literal(type=INT64, value=10)
        |   +-right_scan=
        |   | +-LimitOffsetScan
        |   |   +-column_list=[$distinct.string#31]
        |   |   +-input_scan=
        |   |   | +-AggregateScan
        |   |   |   +-column_list=[$distinct.string#31]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
        |   |   |   +-group_by_list=
        |   |   |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
        |   |   +-limit=
        |   |     +-Literal(type=INT64, value=11)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-string#33 := ColumnRef(type=STRING, column=$distinct.string#31)
        +-aggregate_list=
        | +-anon_users#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-max_groups_contributed := Literal(type=INT64, value=3)
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#33 AS string [STRING]
| +-$aggregate.anon_users#32 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    +-input_scan=
      +-WithScan
        +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="$public_groups0"
        |   +-with_subquery=
        |     +-LimitOffsetScan
        |       +-column_list=[$distinct.string#40]
        |       +-input_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$distinct.string#40]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypes.string#41], table=SimpleTypes, column_index_list=[4])
        |       |   +-group_by_list=
        |       |     +-string#40 := ColumnRef(type=STRING, column=SimpleTypes.string#41)
        |       +-limit=
        |         +-Literal(type=INT64, value=11)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups0.string#39, $aggregate.anon_users_partial#35, $groupby.string_partial#36, $group_by.$uid#37]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.anon_users_partial#35, $groupby.string_partial#36, $group_by.$uid#37]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.anon_users_partial#35, $groupby.string_partial#36, $group_by.$uid#37]
            |   |   |   +-input_scan=
            |   |   |   | +-JoinScan
            |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
            |   |   |   |   +-left_scan=
            |   |   |   |   | +-LimitOffsetScan
            |   |   |   |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, string#5]
            |   |   |   |   |   +-input_scan=
            |   |   |   |   |   | +-ProjectScan
            |   |   |   |   |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, string#5]
            |   |   |   |   |   |   +-input_scan=
            |   |   |   |   |   |     +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
            |   |   |   |   |   +-limit=
            |   |   |   |   |     +-Literal(type=INT64, value=10)
            |   |   |   |   +-right_scan=
            |   |   |   |   | +-WithRefScan(column_list=[$distinct.string#31], with_query_name="$public_groups0")
            |   |   |   |   +-join_expr=
            |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |   |   |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
            |   |   |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
            |   |   |   |   +-has_using=TRUE
            |   |   |   +-group_by_list=
            |   |   |   | +-string_partial#36 := ColumnRef(type=STRING, column=$distinct.string#31)
            |   |   |   | +-$uid#37 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
            |   |   |   +-aggregate_list=
            |   |   |     +-anon_users_partial#35 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#37)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups0.string#39], with_query_name="$public_groups0")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |       +-ColumnRef(type=STRING, column=$groupby.string_partial#36)
            |       +-ColumnRef(type=STRING, column=$public_groups0.string#39)
            +-group_by_list=
            | +-string#33 := ColumnRef(type=STRING, column=$public_groups0.string#39)
            +-aggregate_list=
            | +-anon_users#32 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#37)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.anon_users_partial#35)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-max_groups_contributed := Literal(type=INT64, value=3)
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
==

[language_features=DIFFERENTIAL_PRIVACY,NAMED_ARGUMENTS,DIFFERENTIAL_PRIVACY_PUBLIC_GROUPS,V_1_1_WITH_ON_SUBQUERY,TABLESAMPLE]
# Sample scans between public groups join and aggregation are not allowed.
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
  max_groups_contributed=3,
  group_selection_strategy = PUBLIC_GROUPS
) string, COUNT(*) AS anon_users
FROM (
  SELECT uid, string
  FROM SimpleTypesWithAnonymizationUid
  RIGHT OUTER JOIN
    (SELECT DISTINCT string FROM SimpleTypes)
      USING (string)
) TABLESAMPLE BERNOULLI(1 PERCENT)
GROUP BY string;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#33 AS string [STRING]
| +-$aggregate.anon_users#32 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
        +-input_scan=
        | +-SampleScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, $distinct.string#31]
        |   +-input_scan=
        |   | +-ProjectScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, $distinct.string#31]
        |   |   +-input_scan=
        |   |     +-JoinScan
        |   |       +-column_list=[SimpleTypesWithAnonymizationUid.string#5, SimpleTypesWithAnonymizationUid.uid#11, $distinct.string#31]
        |   |       +-join_type=RIGHT
        |   |       +-left_scan=
        |   |       | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
        |   |       +-right_scan=
        |   |       | +-AggregateScan
        |   |       |   +-column_list=[$distinct.string#31]
        |   |       |   +-input_scan=
        |   |       |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
        |   |       |   +-group_by_list=
        |   |       |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
        |   |       +-join_expr=
        |   |       | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |       |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |       |   +-ColumnRef(type=STRING, column=$distinct.string#31)
        |   |       +-has_using=TRUE
        |   +-method="bernoulli"
        |   +-size=
        |   | +-Literal(type=INT64, value=1)
        |   +-unit=PERCENT
        +-group_by_list=
        | +-string#33 := ColumnRef(type=STRING, column=$distinct.string#31)
        +-aggregate_list=
        | +-anon_users#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-max_groups_contributed := Literal(type=INT64, value=3)
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


Rewrite ERROR: group_selection_strategy = PUBLIC_GROUPS does not allow operations between the public groups join and the aggregation, because they could suppress public groups from the result. Try moving the operation to an input subquery of the public groups join.
==

[language_features=DIFFERENTIAL_PRIVACY,NAMED_ARGUMENTS,DIFFERENTIAL_PRIVACY_PUBLIC_GROUPS,V_1_1_WITH_ON_SUBQUERY,TABLESAMPLE]
# Sample scans in input to public groups joins are allowed.
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
  max_groups_contributed=3,
  group_selection_strategy = PUBLIC_GROUPS
) string, COUNT(*) AS anon_users
FROM
  (
    SELECT uid, string
    FROM SimpleTypesWithAnonymizationUid
  ) TABLESAMPLE BERNOULLI(1 PERCENT)
  RIGHT OUTER JOIN
    (SELECT DISTINCT string FROM SimpleTypes)
    TABLESAMPLE BERNOULLI(2 PERCENT)
      USING (string)
GROUP BY string;
--
QueryStmt
+-output_column_list=
| +-$groupby.string#33 AS string [STRING]
| +-$aggregate.anon_users#32 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-SampleScan
        |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, string#5]
        |   |   +-input_scan=
        |   |   | +-ProjectScan
        |   |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, string#5]
        |   |   |   +-input_scan=
        |   |   |     +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
        |   |   +-method="bernoulli"
        |   |   +-size=
        |   |   | +-Literal(type=INT64, value=1)
        |   |   +-unit=PERCENT
        |   +-right_scan=
        |   | +-SampleScan
        |   |   +-column_list=[$distinct.string#31]
        |   |   +-input_scan=
        |   |   | +-AggregateScan
        |   |   |   +-column_list=[$distinct.string#31]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
        |   |   |   +-group_by_list=
        |   |   |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
        |   |   +-method="bernoulli"
        |   |   +-size=
        |   |   | +-Literal(type=INT64, value=2)
        |   |   +-unit=PERCENT
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-string#33 := ColumnRef(type=STRING, column=$distinct.string#31)
        +-aggregate_list=
        | +-anon_users#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-max_groups_contributed := Literal(type=INT64, value=3)
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#33 AS string [STRING]
| +-$aggregate.anon_users#32 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    +-input_scan=
      +-WithScan
        +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="$public_groups0"
        |   +-with_subquery=
        |     +-SampleScan
        |       +-column_list=[$distinct.string#40]
        |       +-input_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$distinct.string#40]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypes.string#41], table=SimpleTypes, column_index_list=[4])
        |       |   +-group_by_list=
        |       |     +-string#40 := ColumnRef(type=STRING, column=SimpleTypes.string#41)
        |       +-method="bernoulli"
        |       +-size=
        |       | +-Literal(type=INT64, value=2)
        |       +-unit=PERCENT
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups0.string#39, $aggregate.anon_users_partial#35, $groupby.string_partial#36, $group_by.$uid#37]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.anon_users_partial#35, $groupby.string_partial#36, $group_by.$uid#37]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.anon_users_partial#35, $groupby.string_partial#36, $group_by.$uid#37]
            |   |   |   +-input_scan=
            |   |   |   | +-JoinScan
            |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
            |   |   |   |   +-left_scan=
            |   |   |   |   | +-SampleScan
            |   |   |   |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, string#5]
            |   |   |   |   |   +-input_scan=
            |   |   |   |   |   | +-ProjectScan
            |   |   |   |   |   |   +-column_list=SimpleTypesWithAnonymizationUid.[uid#11, string#5]
            |   |   |   |   |   |   +-input_scan=
            |   |   |   |   |   |     +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
            |   |   |   |   |   +-method="bernoulli"
            |   |   |   |   |   +-size=
            |   |   |   |   |   | +-Literal(type=INT64, value=1)
            |   |   |   |   |   +-unit=PERCENT
            |   |   |   |   +-right_scan=
            |   |   |   |   | +-WithRefScan(column_list=[$distinct.string#31], with_query_name="$public_groups0")
            |   |   |   |   +-join_expr=
            |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |   |   |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
            |   |   |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
            |   |   |   |   +-has_using=TRUE
            |   |   |   +-group_by_list=
            |   |   |   | +-string_partial#36 := ColumnRef(type=STRING, column=$distinct.string#31)
            |   |   |   | +-$uid#37 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
            |   |   |   +-aggregate_list=
            |   |   |     +-anon_users_partial#35 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#37)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups0.string#39], with_query_name="$public_groups0")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |       +-ColumnRef(type=STRING, column=$groupby.string_partial#36)
            |       +-ColumnRef(type=STRING, column=$public_groups0.string#39)
            +-group_by_list=
            | +-string#33 := ColumnRef(type=STRING, column=$public_groups0.string#39)
            +-aggregate_list=
            | +-anon_users#32 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#37)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.anon_users_partial#35)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-max_groups_contributed := Literal(type=INT64, value=3)
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
==

# Project scans with a computed column are not allowed.
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
  max_groups_contributed=3,
  group_selection_strategy = PUBLIC_GROUPS
) string, COUNT(*) AS anon_users
FROM
(
  SELECT uid, string, SUBSTR(string, 0, 3)
  FROM SimpleTypesWithAnonymizationUid
    RIGHT OUTER JOIN
    (SELECT DISTINCT string FROM SimpleTypes)
      USING (string)
)
GROUP BY string;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#34 AS string [STRING]
| +-$aggregate.anon_users#33 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#34, $aggregate.anon_users#33]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.string#34, $aggregate.anon_users#33]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, $distinct.string#31, $subquery1.$col3#32]
        |   +-expr_list=
        |   | +-$col3#32 :=
        |   |   +-FunctionCall(ZetaSQL:substr(STRING, INT64, optional(1) INT64) -> STRING)
        |   |     +-ColumnRef(type=STRING, column=$distinct.string#31)
        |   |     +-Literal(type=INT64, value=0)
        |   |     +-Literal(type=INT64, value=3)
        |   +-input_scan=
        |     +-JoinScan
        |       +-column_list=[SimpleTypesWithAnonymizationUid.string#5, SimpleTypesWithAnonymizationUid.uid#11, $distinct.string#31]
        |       +-join_type=RIGHT
        |       +-left_scan=
        |       | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
        |       +-right_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$distinct.string#31]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
        |       |   +-group_by_list=
        |       |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
        |       +-join_expr=
        |       | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |       |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |       |   +-ColumnRef(type=STRING, column=$distinct.string#31)
        |       +-has_using=TRUE
        +-group_by_list=
        | +-string#34 := ColumnRef(type=STRING, column=$distinct.string#31)
        +-aggregate_list=
        | +-anon_users#33 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-max_groups_contributed := Literal(type=INT64, value=3)
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


Rewrite ERROR: group_selection_strategy = PUBLIC_GROUPS does not allow operations between the public groups join and the aggregation, because they could suppress public groups from the result. Try moving the operation to an input subquery of the public groups join.
==

# Project scans without a computed column are allowed.
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
  max_groups_contributed=3,
  group_selection_strategy = PUBLIC_GROUPS
) string2, COUNT(*) AS anon_users
FROM
(
  SELECT uid, string AS string2
  FROM SimpleTypesWithAnonymizationUid
    RIGHT OUTER JOIN
    (SELECT DISTINCT string FROM SimpleTypes)
      USING (string)
)
GROUP BY string2;
--
QueryStmt
+-output_column_list=
| +-$groupby.string2#33 AS string2 [STRING]
| +-$aggregate.anon_users#32 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string2#33, $aggregate.anon_users#32]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.string2#33, $aggregate.anon_users#32]
        +-input_scan=
        | +-ProjectScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, $distinct.string#31]
        |   +-input_scan=
        |     +-JoinScan
        |       +-column_list=[SimpleTypesWithAnonymizationUid.string#5, SimpleTypesWithAnonymizationUid.uid#11, $distinct.string#31]
        |       +-join_type=RIGHT
        |       +-left_scan=
        |       | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
        |       +-right_scan=
        |       | +-AggregateScan
        |       |   +-column_list=[$distinct.string#31]
        |       |   +-input_scan=
        |       |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
        |       |   +-group_by_list=
        |       |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
        |       +-join_expr=
        |       | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |       |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |       |   +-ColumnRef(type=STRING, column=$distinct.string#31)
        |       +-has_using=TRUE
        +-group_by_list=
        | +-string2#33 := ColumnRef(type=STRING, column=$distinct.string#31)
        +-aggregate_list=
        | +-anon_users#32 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-max_groups_contributed := Literal(type=INT64, value=3)
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.string2#33 AS string2 [STRING]
| +-$aggregate.anon_users#32 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string2#33, $aggregate.anon_users#32]
    +-input_scan=
      +-WithScan
        +-column_list=[$groupby.string2#33, $aggregate.anon_users#32]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="$public_groups0"
        |   +-with_subquery=
        |     +-AggregateScan
        |       +-column_list=[$distinct.string#40]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypes.string#41], table=SimpleTypes, column_index_list=[4])
        |       +-group_by_list=
        |         +-string#40 := ColumnRef(type=STRING, column=SimpleTypes.string#41)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$groupby.string2#33, $aggregate.anon_users#32]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups0.string#39, $aggregate.anon_users_partial#35, $groupby.string2_partial#36, $group_by.$uid#37]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.anon_users_partial#35, $groupby.string2_partial#36, $group_by.$uid#37]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.anon_users_partial#35, $groupby.string2_partial#36, $group_by.$uid#37]
            |   |   |   +-input_scan=
            |   |   |   | +-ProjectScan
            |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.uid#11, $distinct.string#31]
            |   |   |   |   +-input_scan=
            |   |   |   |     +-JoinScan
            |   |   |   |       +-column_list=[SimpleTypesWithAnonymizationUid.string#5, SimpleTypesWithAnonymizationUid.uid#11, $distinct.string#31]
            |   |   |   |       +-left_scan=
            |   |   |   |       | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#11], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
            |   |   |   |       +-right_scan=
            |   |   |   |       | +-WithRefScan(column_list=[$distinct.string#31], with_query_name="$public_groups0")
            |   |   |   |       +-join_expr=
            |   |   |   |       | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |   |   |   |       |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
            |   |   |   |       |   +-ColumnRef(type=STRING, column=$distinct.string#31)
            |   |   |   |       +-has_using=TRUE
            |   |   |   +-group_by_list=
            |   |   |   | +-string2_partial#36 := ColumnRef(type=STRING, column=$distinct.string#31)
            |   |   |   | +-$uid#37 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#11)
            |   |   |   +-aggregate_list=
            |   |   |     +-anon_users_partial#35 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#37)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups0.string#39], with_query_name="$public_groups0")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |       +-ColumnRef(type=STRING, column=$groupby.string2_partial#36)
            |       +-ColumnRef(type=STRING, column=$public_groups0.string#39)
            +-group_by_list=
            | +-string2#33 := ColumnRef(type=STRING, column=$public_groups0.string#39)
            +-aggregate_list=
            | +-anon_users#32 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#37)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.anon_users_partial#35)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-max_groups_contributed := Literal(type=INT64, value=3)
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
==

# Disallowed operator between two public group joins is not allowed.
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
  max_groups_contributed=3,
  group_selection_strategy = PUBLIC_GROUPS
) string, int64, COUNT(*) AS anon_users
FROM
  SimpleTypesWithAnonymizationUid
  RIGHT OUTER JOIN
    (SELECT DISTINCT string FROM SimpleTypes)
      USING (string)
  # The following inner join is not allowed.
  INNER JOIN (SELECT int32 FROM SimpleTypes) USING (int32)
  RIGHT OUTER JOIN
    (SELECT DISTINCT int64 FROM SimpleTypes)
      USING (int64)
GROUP BY string, int64;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#70 AS string [STRING]
| +-$groupby.int64#71 AS int64 [INT64]
| +-$aggregate.anon_users#69 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#70, $groupby.int64#71, $aggregate.anon_users#69]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.string#70, $groupby.int64#71, $aggregate.anon_users#69]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int32#1, SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31, SimpleTypes.int32#32, $distinct.int64#68]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-JoinScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int32#1, SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31, SimpleTypes.int32#32]
        |   |   +-left_scan=
        |   |   | +-JoinScan
        |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int32#1, SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
        |   |   |   +-join_type=RIGHT
        |   |   |   +-left_scan=
        |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 4])
        |   |   |   +-right_scan=
        |   |   |   | +-AggregateScan
        |   |   |   |   +-column_list=[$distinct.string#31]
        |   |   |   |   +-input_scan=
        |   |   |   |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
        |   |   |   |   +-group_by_list=
        |   |   |   |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
        |   |   |   +-join_expr=
        |   |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
        |   |   |   +-has_using=TRUE
        |   |   +-right_scan=
        |   |   | +-ProjectScan
        |   |   |   +-column_list=[SimpleTypes.int32#32]
        |   |   |   +-input_scan=
        |   |   |     +-TableScan(column_list=[SimpleTypes.int32#32], table=SimpleTypes, column_index_list=[0])
        |   |   +-join_expr=
        |   |   | +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
        |   |   |   +-ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#1)
        |   |   |   +-ColumnRef(type=INT32, column=SimpleTypes.int32#32)
        |   |   +-has_using=TRUE
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.int64#68]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.int64#51], table=SimpleTypes, column_index_list=[1])
        |   |   +-group_by_list=
        |   |     +-int64#68 := ColumnRef(type=INT64, column=SimpleTypes.int64#51)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   +-ColumnRef(type=INT64, column=$distinct.int64#68)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-string#70 := ColumnRef(type=STRING, column=$distinct.string#31)
        | +-int64#71 := ColumnRef(type=INT64, column=$distinct.int64#68)
        +-aggregate_list=
        | +-anon_users#69 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-max_groups_contributed := Literal(type=INT64, value=3)
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


Rewrite ERROR: group_selection_strategy = PUBLIC_GROUPS does not allow JOIN operations between the public groups join and the aggregation, because they could suppress public groups from the result. Try moving the operation to an input subquery of the public groups join.
==

# Disallowed operator between two public group joins is not allowed with
# per-group contribution bounding.
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
  max_groups_contributed = NULL,
  group_selection_strategy = PUBLIC_GROUPS
) string, int64, COUNT(*) AS anon_users
FROM
  SimpleTypesWithAnonymizationUid
  RIGHT OUTER JOIN
    (SELECT DISTINCT string FROM SimpleTypes)
      USING (string)
  # The following inner join is not allowed.
  INNER JOIN (SELECT int32 FROM SimpleTypes) USING (int32)
  RIGHT OUTER JOIN
    (SELECT DISTINCT int64 FROM SimpleTypes)
      USING (int64)
GROUP BY string, int64;
--
[PRE-REWRITE AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#70 AS string [STRING]
| +-$groupby.int64#71 AS int64 [INT64]
| +-$aggregate.anon_users#69 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#70, $groupby.int64#71, $aggregate.anon_users#69]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.string#70, $groupby.int64#71, $aggregate.anon_users#69]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypesWithAnonymizationUid.int32#1, SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31, SimpleTypes.int32#32, $distinct.int64#68]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-JoinScan
        |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int32#1, SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31, SimpleTypes.int32#32]
        |   |   +-left_scan=
        |   |   | +-JoinScan
        |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int32#1, SimpleTypesWithAnonymizationUid.int64#2, SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
        |   |   |   +-join_type=RIGHT
        |   |   |   +-left_scan=
        |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#1, int64#2, string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 1, 4])
        |   |   |   +-right_scan=
        |   |   |   | +-AggregateScan
        |   |   |   |   +-column_list=[$distinct.string#31]
        |   |   |   |   +-input_scan=
        |   |   |   |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
        |   |   |   |   +-group_by_list=
        |   |   |   |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
        |   |   |   +-join_expr=
        |   |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
        |   |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
        |   |   |   +-has_using=TRUE
        |   |   +-right_scan=
        |   |   | +-ProjectScan
        |   |   |   +-column_list=[SimpleTypes.int32#32]
        |   |   |   +-input_scan=
        |   |   |     +-TableScan(column_list=[SimpleTypes.int32#32], table=SimpleTypes, column_index_list=[0])
        |   |   +-join_expr=
        |   |   | +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
        |   |   |   +-ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#1)
        |   |   |   +-ColumnRef(type=INT32, column=SimpleTypes.int32#32)
        |   |   +-has_using=TRUE
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.int64#68]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.int64#51], table=SimpleTypes, column_index_list=[1])
        |   |   +-group_by_list=
        |   |     +-int64#68 := ColumnRef(type=INT64, column=SimpleTypes.int64#51)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
        |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
        |   |   +-ColumnRef(type=INT64, column=$distinct.int64#68)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-string#70 := ColumnRef(type=STRING, column=$distinct.string#31)
        | +-int64#71 := ColumnRef(type=INT64, column=$distinct.int64#68)
        +-aggregate_list=
        | +-anon_users#69 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-max_groups_contributed := Literal(type=INT64, value=NULL)
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


Rewrite ERROR: group_selection_strategy = PUBLIC_GROUPS does not allow JOIN operations between the public groups join and the aggregation, because they could suppress public groups from the result. Try moving the operation to an input subquery of the public groups join.
==

[language_features=DIFFERENTIAL_PRIVACY,NAMED_ARGUMENTS,DIFFERENTIAL_PRIVACY_PUBLIC_GROUPS,V_1_1_WITH_ON_SUBQUERY,TABLESAMPLE]
# Forbidden operations after public groups joins are allowed outside of the
# dp aggregate scan.
SELECT string, anon_users
FROM
(
  SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
    max_groups_contributed=3,
    group_selection_strategy = PUBLIC_GROUPS
  ) string, COUNT(*) AS anon_users
  FROM
    SimpleTypesWithAnonymizationUid
    RIGHT OUTER JOIN
    (SELECT DISTINCT string FROM SimpleTypes)
      USING (string)
  GROUP BY string
)
TABLESAMPLE BERNOULLI(1 PERCENT)
WHERE anon_users > 10
LIMIT 11;
--
QueryStmt
+-output_column_list=
| +-$groupby.string#33 AS string [STRING]
| +-$aggregate.anon_users#32 AS anon_users [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |   +-input_scan=
    |     +-FilterScan
    |       +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |       +-input_scan=
    |       | +-SampleScan
    |       |   +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |       |   +-input_scan=
    |       |   | +-ProjectScan
    |       |   |   +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |       |   |   +-input_scan=
    |       |   |     +-DifferentialPrivacyAggregateScan
    |       |   |       +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |       |   |       +-input_scan=
    |       |   |       | +-JoinScan
    |       |   |       |   +-column_list=[SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
    |       |   |       |   +-join_type=RIGHT
    |       |   |       |   +-left_scan=
    |       |   |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[4])
    |       |   |       |   +-right_scan=
    |       |   |       |   | +-AggregateScan
    |       |   |       |   |   +-column_list=[$distinct.string#31]
    |       |   |       |   |   +-input_scan=
    |       |   |       |   |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
    |       |   |       |   |   +-group_by_list=
    |       |   |       |   |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
    |       |   |       |   +-join_expr=
    |       |   |       |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |       |   |       |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
    |       |   |       |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
    |       |   |       |   +-has_using=TRUE
    |       |   |       +-group_by_list=
    |       |   |       | +-string#33 := ColumnRef(type=STRING, column=$distinct.string#31)
    |       |   |       +-aggregate_list=
    |       |   |       | +-anon_users#32 :=
    |       |   |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    |       |   |       |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
    |       |   |       +-option_list=
    |       |   |         +-max_groups_contributed := Literal(type=INT64, value=3)
    |       |   |         +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
    |       |   +-method="bernoulli"
    |       |   +-size=
    |       |   | +-Literal(type=INT64, value=1)
    |       |   +-unit=PERCENT
    |       +-filter_expr=
    |         +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |           +-ColumnRef(type=INT64, column=$aggregate.anon_users#32)
    |           +-Literal(type=INT64, value=10)
    +-limit=
      +-Literal(type=INT64, value=11)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#33 AS string [STRING]
| +-$aggregate.anon_users#32 AS anon_users [INT64]
+-query=
  +-LimitOffsetScan
    +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    +-input_scan=
    | +-ProjectScan
    |   +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |   +-input_scan=
    |     +-FilterScan
    |       +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |       +-input_scan=
    |       | +-SampleScan
    |       |   +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |       |   +-input_scan=
    |       |   | +-ProjectScan
    |       |   |   +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |       |   |   +-input_scan=
    |       |   |     +-WithScan
    |       |   |       +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |       |   |       +-with_entry_list=
    |       |   |       | +-WithEntry
    |       |   |       |   +-with_query_name="$public_groups0"
    |       |   |       |   +-with_subquery=
    |       |   |       |     +-AggregateScan
    |       |   |       |       +-column_list=[$distinct.string#41]
    |       |   |       |       +-input_scan=
    |       |   |       |       | +-TableScan(column_list=[SimpleTypes.string#42], table=SimpleTypes, column_index_list=[4])
    |       |   |       |       +-group_by_list=
    |       |   |       |         +-string#41 := ColumnRef(type=STRING, column=SimpleTypes.string#42)
    |       |   |       +-query=
    |       |   |         +-DifferentialPrivacyAggregateScan
    |       |   |           +-column_list=[$groupby.string#33, $aggregate.anon_users#32]
    |       |   |           +-input_scan=
    |       |   |           | +-JoinScan
    |       |   |           |   +-column_list=[$public_groups0.string#40, $aggregate.anon_users_partial#36, $groupby.string_partial#37, $group_by.$uid#38]
    |       |   |           |   +-join_type=RIGHT
    |       |   |           |   +-left_scan=
    |       |   |           |   | +-SampleScan
    |       |   |           |   |   +-column_list=[$aggregate.anon_users_partial#36, $groupby.string_partial#37, $group_by.$uid#38]
    |       |   |           |   |   +-input_scan=
    |       |   |           |   |   | +-AggregateScan
    |       |   |           |   |   |   +-column_list=[$aggregate.anon_users_partial#36, $groupby.string_partial#37, $group_by.$uid#38]
    |       |   |           |   |   |   +-input_scan=
    |       |   |           |   |   |   | +-JoinScan
    |       |   |           |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31, SimpleTypesWithAnonymizationUid.uid#34]
    |       |   |           |   |   |   |   +-left_scan=
    |       |   |           |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#34], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
    |       |   |           |   |   |   |   +-right_scan=
    |       |   |           |   |   |   |   | +-WithRefScan(column_list=[$distinct.string#31], with_query_name="$public_groups0")
    |       |   |           |   |   |   |   +-join_expr=
    |       |   |           |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |       |   |           |   |   |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
    |       |   |           |   |   |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
    |       |   |           |   |   |   |   +-has_using=TRUE
    |       |   |           |   |   |   +-group_by_list=
    |       |   |           |   |   |   | +-string_partial#37 := ColumnRef(type=STRING, column=$distinct.string#31)
    |       |   |           |   |   |   | +-$uid#38 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#34)
    |       |   |           |   |   |   +-aggregate_list=
    |       |   |           |   |   |     +-anon_users_partial#36 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    |       |   |           |   |   +-method="RESERVOIR"
    |       |   |           |   |   +-size=
    |       |   |           |   |   | +-Literal(type=INT64, value=3)
    |       |   |           |   |   +-unit=ROWS
    |       |   |           |   |   +-partition_by_list=
    |       |   |           |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#38)
    |       |   |           |   +-right_scan=
    |       |   |           |   | +-WithRefScan(column_list=[$public_groups0.string#40], with_query_name="$public_groups0")
    |       |   |           |   +-join_expr=
    |       |   |           |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |       |   |           |       +-ColumnRef(type=STRING, column=$groupby.string_partial#37)
    |       |   |           |       +-ColumnRef(type=STRING, column=$public_groups0.string#40)
    |       |   |           +-group_by_list=
    |       |   |           | +-string#33 := ColumnRef(type=STRING, column=$public_groups0.string#40)
    |       |   |           +-aggregate_list=
    |       |   |           | +-anon_users#32 :=
    |       |   |           |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    |       |   |           |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |       |   |           |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
    |       |   |           |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#38)
    |       |   |           |     | +-Literal(type=INT64, value=NULL)
    |       |   |           |     | +-ColumnRef(type=INT64, column=$aggregate.anon_users_partial#36)
    |       |   |           |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
    |       |   |           +-option_list=
    |       |   |             +-max_groups_contributed := Literal(type=INT64, value=3)
    |       |   |             +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
    |       |   +-method="bernoulli"
    |       |   +-size=
    |       |   | +-Literal(type=INT64, value=1)
    |       |   +-unit=PERCENT
    |       +-filter_expr=
    |         +-FunctionCall(ZetaSQL:$greater(INT64, INT64) -> BOOL)
    |           +-ColumnRef(type=INT64, column=$aggregate.anon_users#32)
    |           +-Literal(type=INT64, value=10)
    +-limit=
      +-Literal(type=INT64, value=11)
==

# Multiple dp aggregate scans.
WITH
  with1 AS (
    SELECT
      WITH DIFFERENTIAL_PRIVACY OPTIONS (max_groups_contributed=3)
      int64
    FROM SimpleTypesWithAnonymizationUid
    GROUP BY int64),
  with2 AS (
    SELECT WITH DIFFERENTIAL_PRIVACY
      int64
    FROM SimpleTypesWithAnonymizationUid
    GROUP BY int64)
SELECT
  WITH DIFFERENTIAL_PRIVACY OPTIONS (
    max_groups_contributed = 5,
    group_selection_strategy = PUBLIC_GROUPS)
  string,
  COUNT(*)
FROM SimpleTypesWithAnonymizationUid
RIGHT OUTER JOIN (SELECT DISTINCT string FROM SimpleTypes)
  USING (string)
GROUP BY string
--


QueryStmt
+-output_column_list=
| +-$groupby.string#59 AS string [STRING]
| +-$aggregate.$agg1#58 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.string#59, $aggregate.$agg1#58]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="with1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[$groupby.int64#13]
    | |     +-input_scan=
    | |       +-DifferentialPrivacyAggregateScan
    | |         +-column_list=[$groupby.int64#13]
    | |         +-input_scan=
    | |         | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
    | |         +-group_by_list=
    | |         | +-int64#13 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
    | |         +-option_list=
    | |           +-max_groups_contributed := Literal(type=INT64, value=3)
    | +-WithEntry
    |   +-with_query_name="with2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[$groupby.int64#26]
    |       +-input_scan=
    |         +-DifferentialPrivacyAggregateScan
    |           +-column_list=[$groupby.int64#26]
    |           +-input_scan=
    |           | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
    |           +-group_by_list=
    |             +-int64#26 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#15)
    +-query=
      +-ProjectScan
        +-column_list=[$groupby.string#59, $aggregate.$agg1#58]
        +-input_scan=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$groupby.string#59, $aggregate.$agg1#58]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[SimpleTypesWithAnonymizationUid.string#31, $distinct.string#57]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.string#31], table=SimpleTypesWithAnonymizationUid, column_index_list=[4])
            |   +-right_scan=
            |   | +-AggregateScan
            |   |   +-column_list=[$distinct.string#57]
            |   |   +-input_scan=
            |   |   | +-TableScan(column_list=[SimpleTypes.string#43], table=SimpleTypes, column_index_list=[4])
            |   |   +-group_by_list=
            |   |     +-string#57 := ColumnRef(type=STRING, column=SimpleTypes.string#43)
            |   +-join_expr=
            |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#31)
            |   |   +-ColumnRef(type=STRING, column=$distinct.string#57)
            |   +-has_using=TRUE
            +-group_by_list=
            | +-string#59 := ColumnRef(type=STRING, column=$distinct.string#57)
            +-aggregate_list=
            | +-$agg1#58 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-max_groups_contributed := Literal(type=INT64, value=5)
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#59 AS string [STRING]
| +-$aggregate.$agg1#58 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.string#59, $aggregate.$agg1#58]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="with1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[$groupby.int64#13]
    | |     +-input_scan=
    | |       +-DifferentialPrivacyAggregateScan
    | |         +-column_list=[$groupby.int64#13]
    | |         +-input_scan=
    | |         | +-SampleScan
    | |         |   +-column_list=[$groupby.int64_partial#70, $group_by.$uid#71]
    | |         |   +-input_scan=
    | |         |   | +-AggregateScan
    | |         |   |   +-column_list=[$groupby.int64_partial#70, $group_by.$uid#71]
    | |         |   |   +-input_scan=
    | |         |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#69], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
    | |         |   |   +-group_by_list=
    | |         |   |     +-int64_partial#70 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
    | |         |   |     +-$uid#71 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#69)
    | |         |   +-method="RESERVOIR"
    | |         |   +-size=
    | |         |   | +-Literal(type=INT64, value=3)
    | |         |   +-unit=ROWS
    | |         |   +-partition_by_list=
    | |         |     +-ColumnRef(type=INT64, column=$group_by.$uid#71)
    | |         +-group_by_list=
    | |         | +-int64#13 := ColumnRef(type=INT64, column=$groupby.int64_partial#70)
    | |         +-aggregate_list=
    | |         | +-$group_selection_threshold_col#73 :=
    | |         |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    | |         |     +-Literal(type=INT64, value=1)
    | |         |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
    | |         +-group_selection_threshold_expr=
    | |         | +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#73)
    | |         +-option_list=
    | |           +-max_groups_contributed := Literal(type=INT64, value=3)
    | |           +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=LAPLACE_THRESHOLD)
    | +-WithEntry
    |   +-with_query_name="with2"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[$groupby.int64#26]
    |       +-input_scan=
    |         +-DifferentialPrivacyAggregateScan
    |           +-column_list=[$groupby.int64#26]
    |           +-input_scan=
    |           | +-AggregateScan
    |           |   +-column_list=[$groupby.int64_partial#75, $group_by.$uid#76]
    |           |   +-input_scan=
    |           |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#15, uid#74], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
    |           |   +-group_by_list=
    |           |     +-int64_partial#75 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#15)
    |           |     +-$uid#76 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#74)
    |           +-group_by_list=
    |           | +-int64#26 := ColumnRef(type=INT64, column=$groupby.int64_partial#75)
    |           +-aggregate_list=
    |           | +-$group_selection_threshold_col#78 :=
    |           |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    |           |     +-Literal(type=INT64, value=1)
    |           |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
    |           +-group_selection_threshold_expr=
    |           | +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#78)
    |           +-option_list=
    |             +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=LAPLACE_THRESHOLD)
    +-query=
      +-ProjectScan
        +-column_list=[$groupby.string#59, $aggregate.$agg1#58]
        +-input_scan=
          +-WithScan
            +-column_list=[$groupby.string#59, $aggregate.$agg1#58]
            +-with_entry_list=
            | +-WithEntry
            |   +-with_query_name="$public_groups0"
            |   +-with_subquery=
            |     +-AggregateScan
            |       +-column_list=[$distinct.string#67]
            |       +-input_scan=
            |       | +-TableScan(column_list=[SimpleTypes.string#68], table=SimpleTypes, column_index_list=[4])
            |       +-group_by_list=
            |         +-string#67 := ColumnRef(type=STRING, column=SimpleTypes.string#68)
            +-query=
              +-DifferentialPrivacyAggregateScan
                +-column_list=[$groupby.string#59, $aggregate.$agg1#58]
                +-input_scan=
                | +-JoinScan
                |   +-column_list=[$public_groups0.string#66, $aggregate.$agg1_partial#62, $groupby.string_partial#63, $group_by.$uid#64]
                |   +-join_type=RIGHT
                |   +-left_scan=
                |   | +-SampleScan
                |   |   +-column_list=[$aggregate.$agg1_partial#62, $groupby.string_partial#63, $group_by.$uid#64]
                |   |   +-input_scan=
                |   |   | +-AggregateScan
                |   |   |   +-column_list=[$aggregate.$agg1_partial#62, $groupby.string_partial#63, $group_by.$uid#64]
                |   |   |   +-input_scan=
                |   |   |   | +-JoinScan
                |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.string#31, $distinct.string#57, SimpleTypesWithAnonymizationUid.uid#60]
                |   |   |   |   +-left_scan=
                |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#31, uid#60], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
                |   |   |   |   +-right_scan=
                |   |   |   |   | +-WithRefScan(column_list=[$distinct.string#57], with_query_name="$public_groups0")
                |   |   |   |   +-join_expr=
                |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
                |   |   |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#31)
                |   |   |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#57)
                |   |   |   |   +-has_using=TRUE
                |   |   |   +-group_by_list=
                |   |   |   | +-string_partial#63 := ColumnRef(type=STRING, column=$distinct.string#57)
                |   |   |   | +-$uid#64 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#60)
                |   |   |   +-aggregate_list=
                |   |   |     +-$agg1_partial#62 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                |   |   +-method="RESERVOIR"
                |   |   +-size=
                |   |   | +-Literal(type=INT64, value=5)
                |   |   +-unit=ROWS
                |   |   +-partition_by_list=
                |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#64)
                |   +-right_scan=
                |   | +-WithRefScan(column_list=[$public_groups0.string#66], with_query_name="$public_groups0")
                |   +-join_expr=
                |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
                |       +-ColumnRef(type=STRING, column=$groupby.string_partial#63)
                |       +-ColumnRef(type=STRING, column=$public_groups0.string#66)
                +-group_by_list=
                | +-string#59 := ColumnRef(type=STRING, column=$public_groups0.string#66)
                +-aggregate_list=
                | +-$agg1#58 :=
                |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
                |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
                |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
                |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#64)
                |     | +-Literal(type=INT64, value=NULL)
                |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#62)
                |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
                +-option_list=
                  +-max_groups_contributed := Literal(type=INT64, value=5)
                  +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
==

# Multiple dp aggregate scans when the public groups query is in a with entry.
WITH
  with1 AS (
    SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (max_groups_contributed=3)
      int64
    FROM SimpleTypesWithAnonymizationUid
    GROUP BY int64
  ),
  with2 AS (
    SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
      max_groups_contributed=4,
      group_selection_strategy=PUBLIC_GROUPS)
      int64, COUNT(*)
    FROM SimpleTypesWithAnonymizationUid
      RIGHT OUTER JOIN (
        SELECT DISTINCT int64 FROM SimpleTypes
      ) USING (int64)
    GROUP BY int64
  ),
  with3 AS (
    SELECT WITH DIFFERENTIAL_PRIVACY
      int64
    FROM SimpleTypesWithAnonymizationUid
    GROUP BY int64)
SELECT
  WITH DIFFERENTIAL_PRIVACY OPTIONS (
    max_groups_contributed = 5)
  string,
  COUNT(*)
FROM SimpleTypesWithAnonymizationUid
GROUP BY string
--
QueryStmt
+-output_column_list=
| +-$groupby.string#73 AS string [STRING]
| +-$aggregate.$agg1#72 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.string#73, $aggregate.$agg1#72]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="with1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[$groupby.int64#13]
    | |     +-input_scan=
    | |       +-DifferentialPrivacyAggregateScan
    | |         +-column_list=[$groupby.int64#13]
    | |         +-input_scan=
    | |         | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#2], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
    | |         +-group_by_list=
    | |         | +-int64#13 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
    | |         +-option_list=
    | |           +-max_groups_contributed := Literal(type=INT64, value=3)
    | +-WithEntry
    | | +-with_query_name="with2"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[$groupby.int64#46, $aggregate.$agg1#45]
    | |     +-input_scan=
    | |       +-DifferentialPrivacyAggregateScan
    | |         +-column_list=[$groupby.int64#46, $aggregate.$agg1#45]
    | |         +-input_scan=
    | |         | +-JoinScan
    | |         |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#15, $distinct.int64#44]
    | |         |   +-join_type=RIGHT
    | |         |   +-left_scan=
    | |         |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#15], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
    | |         |   +-right_scan=
    | |         |   | +-AggregateScan
    | |         |   |   +-column_list=[$distinct.int64#44]
    | |         |   |   +-input_scan=
    | |         |   |   | +-TableScan(column_list=[SimpleTypes.int64#27], table=SimpleTypes, column_index_list=[1])
    | |         |   |   +-group_by_list=
    | |         |   |     +-int64#44 := ColumnRef(type=INT64, column=SimpleTypes.int64#27)
    | |         |   +-join_expr=
    | |         |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    | |         |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#15)
    | |         |   |   +-ColumnRef(type=INT64, column=$distinct.int64#44)
    | |         |   +-has_using=TRUE
    | |         +-group_by_list=
    | |         | +-int64#46 := ColumnRef(type=INT64, column=$distinct.int64#44)
    | |         +-aggregate_list=
    | |         | +-$agg1#45 :=
    | |         |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    | |         |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
    | |         +-option_list=
    | |           +-max_groups_contributed := Literal(type=INT64, value=4)
    | |           +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
    | +-WithEntry
    |   +-with_query_name="with3"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[$groupby.int64#59]
    |       +-input_scan=
    |         +-DifferentialPrivacyAggregateScan
    |           +-column_list=[$groupby.int64#59]
    |           +-input_scan=
    |           | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#48], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
    |           +-group_by_list=
    |             +-int64#59 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#48)
    +-query=
      +-ProjectScan
        +-column_list=[$groupby.string#73, $aggregate.$agg1#72]
        +-input_scan=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$groupby.string#73, $aggregate.$agg1#72]
            +-input_scan=
            | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.string#64], table=SimpleTypesWithAnonymizationUid, column_index_list=[4])
            +-group_by_list=
            | +-string#73 := ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#64)
            +-aggregate_list=
            | +-$agg1#72 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-max_groups_contributed := Literal(type=INT64, value=5)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#73 AS string [STRING]
| +-$aggregate.$agg1#72 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.string#73, $aggregate.$agg1#72]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="with1"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[$groupby.int64#13]
    | |     +-input_scan=
    | |       +-DifferentialPrivacyAggregateScan
    | |         +-column_list=[$groupby.int64#13]
    | |         +-input_scan=
    | |         | +-SampleScan
    | |         |   +-column_list=[$groupby.int64_partial#83, $group_by.$uid#84]
    | |         |   +-input_scan=
    | |         |   | +-AggregateScan
    | |         |   |   +-column_list=[$groupby.int64_partial#83, $group_by.$uid#84]
    | |         |   |   +-input_scan=
    | |         |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#2, uid#82], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
    | |         |   |   +-group_by_list=
    | |         |   |     +-int64_partial#83 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#2)
    | |         |   |     +-$uid#84 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#82)
    | |         |   +-method="RESERVOIR"
    | |         |   +-size=
    | |         |   | +-Literal(type=INT64, value=3)
    | |         |   +-unit=ROWS
    | |         |   +-partition_by_list=
    | |         |     +-ColumnRef(type=INT64, column=$group_by.$uid#84)
    | |         +-group_by_list=
    | |         | +-int64#13 := ColumnRef(type=INT64, column=$groupby.int64_partial#83)
    | |         +-aggregate_list=
    | |         | +-$group_selection_threshold_col#86 :=
    | |         |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    | |         |     +-Literal(type=INT64, value=1)
    | |         |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
    | |         +-group_selection_threshold_expr=
    | |         | +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#86)
    | |         +-option_list=
    | |           +-max_groups_contributed := Literal(type=INT64, value=3)
    | |           +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=LAPLACE_THRESHOLD)
    | +-WithEntry
    | | +-with_query_name="with2"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[$groupby.int64#46, $aggregate.$agg1#45]
    | |     +-input_scan=
    | |       +-WithScan
    | |         +-column_list=[$groupby.int64#46, $aggregate.$agg1#45]
    | |         +-with_entry_list=
    | |         | +-WithEntry
    | |         |   +-with_query_name="$public_groups0"
    | |         |   +-with_subquery=
    | |         |     +-AggregateScan
    | |         |       +-column_list=[$distinct.int64#94]
    | |         |       +-input_scan=
    | |         |       | +-TableScan(column_list=[SimpleTypes.int64#95], table=SimpleTypes, column_index_list=[1])
    | |         |       +-group_by_list=
    | |         |         +-int64#94 := ColumnRef(type=INT64, column=SimpleTypes.int64#95)
    | |         +-query=
    | |           +-DifferentialPrivacyAggregateScan
    | |             +-column_list=[$groupby.int64#46, $aggregate.$agg1#45]
    | |             +-input_scan=
    | |             | +-JoinScan
    | |             |   +-column_list=[$public_groups0.int64#93, $aggregate.$agg1_partial#89, $groupby.int64_partial#90, $group_by.$uid#91]
    | |             |   +-join_type=RIGHT
    | |             |   +-left_scan=
    | |             |   | +-SampleScan
    | |             |   |   +-column_list=[$aggregate.$agg1_partial#89, $groupby.int64_partial#90, $group_by.$uid#91]
    | |             |   |   +-input_scan=
    | |             |   |   | +-AggregateScan
    | |             |   |   |   +-column_list=[$aggregate.$agg1_partial#89, $groupby.int64_partial#90, $group_by.$uid#91]
    | |             |   |   |   +-input_scan=
    | |             |   |   |   | +-JoinScan
    | |             |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#15, $distinct.int64#44, SimpleTypesWithAnonymizationUid.uid#87]
    | |             |   |   |   |   +-left_scan=
    | |             |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#15, uid#87], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
    | |             |   |   |   |   +-right_scan=
    | |             |   |   |   |   | +-WithRefScan(column_list=[$distinct.int64#44], with_query_name="$public_groups0")
    | |             |   |   |   |   +-join_expr=
    | |             |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    | |             |   |   |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#15)
    | |             |   |   |   |   |   +-ColumnRef(type=INT64, column=$distinct.int64#44)
    | |             |   |   |   |   +-has_using=TRUE
    | |             |   |   |   +-group_by_list=
    | |             |   |   |   | +-int64_partial#90 := ColumnRef(type=INT64, column=$distinct.int64#44)
    | |             |   |   |   | +-$uid#91 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#87)
    | |             |   |   |   +-aggregate_list=
    | |             |   |   |     +-$agg1_partial#89 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    | |             |   |   +-method="RESERVOIR"
    | |             |   |   +-size=
    | |             |   |   | +-Literal(type=INT64, value=4)
    | |             |   |   +-unit=ROWS
    | |             |   |   +-partition_by_list=
    | |             |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#91)
    | |             |   +-right_scan=
    | |             |   | +-WithRefScan(column_list=[$public_groups0.int64#93], with_query_name="$public_groups0")
    | |             |   +-join_expr=
    | |             |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
    | |             |       +-ColumnRef(type=INT64, column=$groupby.int64_partial#90)
    | |             |       +-ColumnRef(type=INT64, column=$public_groups0.int64#93)
    | |             +-group_by_list=
    | |             | +-int64#46 := ColumnRef(type=INT64, column=$public_groups0.int64#93)
    | |             +-aggregate_list=
    | |             | +-$agg1#45 :=
    | |             |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    | |             |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    | |             |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
    | |             |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#91)
    | |             |     | +-Literal(type=INT64, value=NULL)
    | |             |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#89)
    | |             |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
    | |             +-option_list=
    | |               +-max_groups_contributed := Literal(type=INT64, value=4)
    | |               +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
    | +-WithEntry
    |   +-with_query_name="with3"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[$groupby.int64#59]
    |       +-input_scan=
    |         +-DifferentialPrivacyAggregateScan
    |           +-column_list=[$groupby.int64#59]
    |           +-input_scan=
    |           | +-AggregateScan
    |           |   +-column_list=[$groupby.int64_partial#97, $group_by.$uid#98]
    |           |   +-input_scan=
    |           |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#48, uid#96], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
    |           |   +-group_by_list=
    |           |     +-int64_partial#97 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#48)
    |           |     +-$uid#98 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#96)
    |           +-group_by_list=
    |           | +-int64#59 := ColumnRef(type=INT64, column=$groupby.int64_partial#97)
    |           +-aggregate_list=
    |           | +-$group_selection_threshold_col#100 :=
    |           |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    |           |     +-Literal(type=INT64, value=1)
    |           |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
    |           +-group_selection_threshold_expr=
    |           | +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#100)
    |           +-option_list=
    |             +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=LAPLACE_THRESHOLD)
    +-query=
      +-ProjectScan
        +-column_list=[$groupby.string#73, $aggregate.$agg1#72]
        +-input_scan=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$groupby.string#73, $aggregate.$agg1#72]
            +-input_scan=
            | +-SampleScan
            |   +-column_list=[$aggregate.$agg1_partial#76, $groupby.string_partial#77, $group_by.$uid#78]
            |   +-input_scan=
            |   | +-AggregateScan
            |   |   +-column_list=[$aggregate.$agg1_partial#76, $groupby.string_partial#77, $group_by.$uid#78]
            |   |   +-input_scan=
            |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#64, uid#74], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
            |   |   +-group_by_list=
            |   |   | +-string_partial#77 := ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#64)
            |   |   | +-$uid#78 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#74)
            |   |   +-aggregate_list=
            |   |     +-$agg1_partial#76 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   +-method="RESERVOIR"
            |   +-size=
            |   | +-Literal(type=INT64, value=5)
            |   +-unit=ROWS
            |   +-partition_by_list=
            |     +-ColumnRef(type=INT64, column=$group_by.$uid#78)
            +-group_by_list=
            | +-string#73 := ColumnRef(type=STRING, column=$groupby.string_partial#77)
            +-aggregate_list=
            | +-$agg1#72 :=
            | | +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            | |   +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#76)
            | |   +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            | +-$group_selection_threshold_col#81 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-Literal(type=INT64, value=1)
            |     +-Literal(type=STRUCT<INT64, INT64>, value={0, 1})
            +-group_selection_threshold_expr=
            | +-ColumnRef(type=INT64, column=$differential_privacy.$group_selection_threshold_col#81)
            +-option_list=
              +-max_groups_contributed := Literal(type=INT64, value=5)
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=LAPLACE_THRESHOLD)
==

# WithEntry names added by public groups are unique across multiple dp
# aggregate scans
WITH
  withString AS (
    SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
      max_groups_contributed=3,
      group_selection_strategy=PUBLIC_GROUPS)
      string, COUNT(*)
    FROM SimpleTypesWithAnonymizationUid
      RIGHT OUTER JOIN (
        SELECT DISTINCT string FROM SimpleTypes
      ) USING (string)
    GROUP BY string
  ),
  withInt32 AS (
    SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
      max_groups_contributed=4,
      group_selection_strategy=PUBLIC_GROUPS)
      int32, COUNT(*)
    FROM SimpleTypesWithAnonymizationUid
      RIGHT OUTER JOIN (
        SELECT DISTINCT int32 FROM SimpleTypes
      ) USING (int32)
    GROUP BY int32
  )
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
  max_groups_contributed=5,
  group_selection_strategy=PUBLIC_GROUPS)
  int64, COUNT(*)
FROM SimpleTypesWithAnonymizationUid
  RIGHT OUTER JOIN (
    SELECT DISTINCT int64 FROM SimpleTypes
  ) USING (int64)
GROUP BY int64
--
QueryStmt
+-output_column_list=
| +-$groupby.int64#99 AS int64 [INT64]
| +-$aggregate.$agg1#98 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.int64#99, $aggregate.$agg1#98]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="withString"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[$groupby.string#33, $aggregate.$agg1#32]
    | |     +-input_scan=
    | |       +-DifferentialPrivacyAggregateScan
    | |         +-column_list=[$groupby.string#33, $aggregate.$agg1#32]
    | |         +-input_scan=
    | |         | +-JoinScan
    | |         |   +-column_list=[SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
    | |         |   +-join_type=RIGHT
    | |         |   +-left_scan=
    | |         |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[4])
    | |         |   +-right_scan=
    | |         |   | +-AggregateScan
    | |         |   |   +-column_list=[$distinct.string#31]
    | |         |   |   +-input_scan=
    | |         |   |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
    | |         |   |   +-group_by_list=
    | |         |   |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
    | |         |   +-join_expr=
    | |         |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    | |         |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
    | |         |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
    | |         |   +-has_using=TRUE
    | |         +-group_by_list=
    | |         | +-string#33 := ColumnRef(type=STRING, column=$distinct.string#31)
    | |         +-aggregate_list=
    | |         | +-$agg1#32 :=
    | |         |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    | |         |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
    | |         +-option_list=
    | |           +-max_groups_contributed := Literal(type=INT64, value=3)
    | |           +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
    | +-WithEntry
    |   +-with_query_name="withInt32"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[$groupby.int32#66, $aggregate.$agg1#65]
    |       +-input_scan=
    |         +-DifferentialPrivacyAggregateScan
    |           +-column_list=[$groupby.int32#66, $aggregate.$agg1#65]
    |           +-input_scan=
    |           | +-JoinScan
    |           |   +-column_list=[SimpleTypesWithAnonymizationUid.int32#34, $distinct.int32#64]
    |           |   +-join_type=RIGHT
    |           |   +-left_scan=
    |           |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int32#34], table=SimpleTypesWithAnonymizationUid, column_index_list=[0])
    |           |   +-right_scan=
    |           |   | +-AggregateScan
    |           |   |   +-column_list=[$distinct.int32#64]
    |           |   |   +-input_scan=
    |           |   |   | +-TableScan(column_list=[SimpleTypes.int32#46], table=SimpleTypes, column_index_list=[0])
    |           |   |   +-group_by_list=
    |           |   |     +-int32#64 := ColumnRef(type=INT32, column=SimpleTypes.int32#46)
    |           |   +-join_expr=
    |           |   | +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
    |           |   |   +-ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#34)
    |           |   |   +-ColumnRef(type=INT32, column=$distinct.int32#64)
    |           |   +-has_using=TRUE
    |           +-group_by_list=
    |           | +-int32#66 := ColumnRef(type=INT32, column=$distinct.int32#64)
    |           +-aggregate_list=
    |           | +-$agg1#65 :=
    |           |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    |           |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
    |           +-option_list=
    |             +-max_groups_contributed := Literal(type=INT64, value=4)
    |             +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
    +-query=
      +-ProjectScan
        +-column_list=[$groupby.int64#99, $aggregate.$agg1#98]
        +-input_scan=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$groupby.int64#99, $aggregate.$agg1#98]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#68, $distinct.int64#97]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.int64#68], table=SimpleTypesWithAnonymizationUid, column_index_list=[1])
            |   +-right_scan=
            |   | +-AggregateScan
            |   |   +-column_list=[$distinct.int64#97]
            |   |   +-input_scan=
            |   |   | +-TableScan(column_list=[SimpleTypes.int64#80], table=SimpleTypes, column_index_list=[1])
            |   |   +-group_by_list=
            |   |     +-int64#97 := ColumnRef(type=INT64, column=SimpleTypes.int64#80)
            |   +-join_expr=
            |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
            |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#68)
            |   |   +-ColumnRef(type=INT64, column=$distinct.int64#97)
            |   +-has_using=TRUE
            +-group_by_list=
            | +-int64#99 := ColumnRef(type=INT64, column=$distinct.int64#97)
            +-aggregate_list=
            | +-$agg1#98 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-max_groups_contributed := Literal(type=INT64, value=5)
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.int64#99 AS int64 [INT64]
| +-$aggregate.$agg1#98 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=[$groupby.int64#99, $aggregate.$agg1#98]
    +-with_entry_list=
    | +-WithEntry
    | | +-with_query_name="withString"
    | | +-with_subquery=
    | |   +-ProjectScan
    | |     +-column_list=[$groupby.string#33, $aggregate.$agg1#32]
    | |     +-input_scan=
    | |       +-WithScan
    | |         +-column_list=[$groupby.string#33, $aggregate.$agg1#32]
    | |         +-with_entry_list=
    | |         | +-WithEntry
    | |         |   +-with_query_name="$public_groups1"
    | |         |   +-with_subquery=
    | |         |     +-AggregateScan
    | |         |       +-column_list=[$distinct.string#116]
    | |         |       +-input_scan=
    | |         |       | +-TableScan(column_list=[SimpleTypes.string#117], table=SimpleTypes, column_index_list=[4])
    | |         |       +-group_by_list=
    | |         |         +-string#116 := ColumnRef(type=STRING, column=SimpleTypes.string#117)
    | |         +-query=
    | |           +-DifferentialPrivacyAggregateScan
    | |             +-column_list=[$groupby.string#33, $aggregate.$agg1#32]
    | |             +-input_scan=
    | |             | +-JoinScan
    | |             |   +-column_list=[$public_groups1.string#115, $aggregate.$agg1_partial#111, $groupby.string_partial#112, $group_by.$uid#113]
    | |             |   +-join_type=RIGHT
    | |             |   +-left_scan=
    | |             |   | +-SampleScan
    | |             |   |   +-column_list=[$aggregate.$agg1_partial#111, $groupby.string_partial#112, $group_by.$uid#113]
    | |             |   |   +-input_scan=
    | |             |   |   | +-AggregateScan
    | |             |   |   |   +-column_list=[$aggregate.$agg1_partial#111, $groupby.string_partial#112, $group_by.$uid#113]
    | |             |   |   |   +-input_scan=
    | |             |   |   |   | +-JoinScan
    | |             |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31, SimpleTypesWithAnonymizationUid.uid#109]
    | |             |   |   |   |   +-left_scan=
    | |             |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#109], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
    | |             |   |   |   |   +-right_scan=
    | |             |   |   |   |   | +-WithRefScan(column_list=[$distinct.string#31], with_query_name="$public_groups1")
    | |             |   |   |   |   +-join_expr=
    | |             |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    | |             |   |   |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
    | |             |   |   |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
    | |             |   |   |   |   +-has_using=TRUE
    | |             |   |   |   +-group_by_list=
    | |             |   |   |   | +-string_partial#112 := ColumnRef(type=STRING, column=$distinct.string#31)
    | |             |   |   |   | +-$uid#113 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#109)
    | |             |   |   |   +-aggregate_list=
    | |             |   |   |     +-$agg1_partial#111 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    | |             |   |   +-method="RESERVOIR"
    | |             |   |   +-size=
    | |             |   |   | +-Literal(type=INT64, value=3)
    | |             |   |   +-unit=ROWS
    | |             |   |   +-partition_by_list=
    | |             |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#113)
    | |             |   +-right_scan=
    | |             |   | +-WithRefScan(column_list=[$public_groups1.string#115], with_query_name="$public_groups1")
    | |             |   +-join_expr=
    | |             |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    | |             |       +-ColumnRef(type=STRING, column=$groupby.string_partial#112)
    | |             |       +-ColumnRef(type=STRING, column=$public_groups1.string#115)
    | |             +-group_by_list=
    | |             | +-string#33 := ColumnRef(type=STRING, column=$public_groups1.string#115)
    | |             +-aggregate_list=
    | |             | +-$agg1#32 :=
    | |             |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    | |             |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    | |             |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
    | |             |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#113)
    | |             |     | +-Literal(type=INT64, value=NULL)
    | |             |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#111)
    | |             |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
    | |             +-option_list=
    | |               +-max_groups_contributed := Literal(type=INT64, value=3)
    | |               +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
    | +-WithEntry
    |   +-with_query_name="withInt32"
    |   +-with_subquery=
    |     +-ProjectScan
    |       +-column_list=[$groupby.int32#66, $aggregate.$agg1#65]
    |       +-input_scan=
    |         +-WithScan
    |           +-column_list=[$groupby.int32#66, $aggregate.$agg1#65]
    |           +-with_entry_list=
    |           | +-WithEntry
    |           |   +-with_query_name="$public_groups2"
    |           |   +-with_subquery=
    |           |     +-AggregateScan
    |           |       +-column_list=[$distinct.int32#125]
    |           |       +-input_scan=
    |           |       | +-TableScan(column_list=[SimpleTypes.int32#126], table=SimpleTypes, column_index_list=[0])
    |           |       +-group_by_list=
    |           |         +-int32#125 := ColumnRef(type=INT32, column=SimpleTypes.int32#126)
    |           +-query=
    |             +-DifferentialPrivacyAggregateScan
    |               +-column_list=[$groupby.int32#66, $aggregate.$agg1#65]
    |               +-input_scan=
    |               | +-JoinScan
    |               |   +-column_list=[$public_groups2.int32#124, $aggregate.$agg1_partial#120, $groupby.int32_partial#121, $group_by.$uid#122]
    |               |   +-join_type=RIGHT
    |               |   +-left_scan=
    |               |   | +-SampleScan
    |               |   |   +-column_list=[$aggregate.$agg1_partial#120, $groupby.int32_partial#121, $group_by.$uid#122]
    |               |   |   +-input_scan=
    |               |   |   | +-AggregateScan
    |               |   |   |   +-column_list=[$aggregate.$agg1_partial#120, $groupby.int32_partial#121, $group_by.$uid#122]
    |               |   |   |   +-input_scan=
    |               |   |   |   | +-JoinScan
    |               |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int32#34, $distinct.int32#64, SimpleTypesWithAnonymizationUid.uid#118]
    |               |   |   |   |   +-left_scan=
    |               |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int32#34, uid#118], table=SimpleTypesWithAnonymizationUid, column_index_list=[0, 10])
    |               |   |   |   |   +-right_scan=
    |               |   |   |   |   | +-WithRefScan(column_list=[$distinct.int32#64], with_query_name="$public_groups2")
    |               |   |   |   |   +-join_expr=
    |               |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
    |               |   |   |   |   |   +-ColumnRef(type=INT32, column=SimpleTypesWithAnonymizationUid.int32#34)
    |               |   |   |   |   |   +-ColumnRef(type=INT32, column=$distinct.int32#64)
    |               |   |   |   |   +-has_using=TRUE
    |               |   |   |   +-group_by_list=
    |               |   |   |   | +-int32_partial#121 := ColumnRef(type=INT32, column=$distinct.int32#64)
    |               |   |   |   | +-$uid#122 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#118)
    |               |   |   |   +-aggregate_list=
    |               |   |   |     +-$agg1_partial#120 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    |               |   |   +-method="RESERVOIR"
    |               |   |   +-size=
    |               |   |   | +-Literal(type=INT64, value=4)
    |               |   |   +-unit=ROWS
    |               |   |   +-partition_by_list=
    |               |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#122)
    |               |   +-right_scan=
    |               |   | +-WithRefScan(column_list=[$public_groups2.int32#124], with_query_name="$public_groups2")
    |               |   +-join_expr=
    |               |     +-FunctionCall(ZetaSQL:$equal(INT32, INT32) -> BOOL)
    |               |       +-ColumnRef(type=INT32, column=$groupby.int32_partial#121)
    |               |       +-ColumnRef(type=INT32, column=$public_groups2.int32#124)
    |               +-group_by_list=
    |               | +-int32#66 := ColumnRef(type=INT32, column=$public_groups2.int32#124)
    |               +-aggregate_list=
    |               | +-$agg1#65 :=
    |               |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    |               |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |               |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
    |               |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#122)
    |               |     | +-Literal(type=INT64, value=NULL)
    |               |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#120)
    |               |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
    |               +-option_list=
    |                 +-max_groups_contributed := Literal(type=INT64, value=4)
    |                 +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
    +-query=
      +-ProjectScan
        +-column_list=[$groupby.int64#99, $aggregate.$agg1#98]
        +-input_scan=
          +-WithScan
            +-column_list=[$groupby.int64#99, $aggregate.$agg1#98]
            +-with_entry_list=
            | +-WithEntry
            |   +-with_query_name="$public_groups0"
            |   +-with_subquery=
            |     +-AggregateScan
            |       +-column_list=[$distinct.int64#107]
            |       +-input_scan=
            |       | +-TableScan(column_list=[SimpleTypes.int64#108], table=SimpleTypes, column_index_list=[1])
            |       +-group_by_list=
            |         +-int64#107 := ColumnRef(type=INT64, column=SimpleTypes.int64#108)
            +-query=
              +-DifferentialPrivacyAggregateScan
                +-column_list=[$groupby.int64#99, $aggregate.$agg1#98]
                +-input_scan=
                | +-JoinScan
                |   +-column_list=[$public_groups0.int64#106, $aggregate.$agg1_partial#102, $groupby.int64_partial#103, $group_by.$uid#104]
                |   +-join_type=RIGHT
                |   +-left_scan=
                |   | +-SampleScan
                |   |   +-column_list=[$aggregate.$agg1_partial#102, $groupby.int64_partial#103, $group_by.$uid#104]
                |   |   +-input_scan=
                |   |   | +-AggregateScan
                |   |   |   +-column_list=[$aggregate.$agg1_partial#102, $groupby.int64_partial#103, $group_by.$uid#104]
                |   |   |   +-input_scan=
                |   |   |   | +-JoinScan
                |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.int64#68, $distinct.int64#97, SimpleTypesWithAnonymizationUid.uid#100]
                |   |   |   |   +-left_scan=
                |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[int64#68, uid#100], table=SimpleTypesWithAnonymizationUid, column_index_list=[1, 10])
                |   |   |   |   +-right_scan=
                |   |   |   |   | +-WithRefScan(column_list=[$distinct.int64#97], with_query_name="$public_groups0")
                |   |   |   |   +-join_expr=
                |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                |   |   |   |   |   +-ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.int64#68)
                |   |   |   |   |   +-ColumnRef(type=INT64, column=$distinct.int64#97)
                |   |   |   |   +-has_using=TRUE
                |   |   |   +-group_by_list=
                |   |   |   | +-int64_partial#103 := ColumnRef(type=INT64, column=$distinct.int64#97)
                |   |   |   | +-$uid#104 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#100)
                |   |   |   +-aggregate_list=
                |   |   |     +-$agg1_partial#102 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
                |   |   +-method="RESERVOIR"
                |   |   +-size=
                |   |   | +-Literal(type=INT64, value=5)
                |   |   +-unit=ROWS
                |   |   +-partition_by_list=
                |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#104)
                |   +-right_scan=
                |   | +-WithRefScan(column_list=[$public_groups0.int64#106], with_query_name="$public_groups0")
                |   +-join_expr=
                |     +-FunctionCall(ZetaSQL:$equal(INT64, INT64) -> BOOL)
                |       +-ColumnRef(type=INT64, column=$groupby.int64_partial#103)
                |       +-ColumnRef(type=INT64, column=$public_groups0.int64#106)
                +-group_by_list=
                | +-int64#99 := ColumnRef(type=INT64, column=$public_groups0.int64#106)
                +-aggregate_list=
                | +-$agg1#98 :=
                |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
                |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
                |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
                |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#104)
                |     | +-Literal(type=INT64, value=NULL)
                |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#102)
                |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
                +-option_list=
                  +-max_groups_contributed := Literal(type=INT64, value=5)
                  +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
==

# Nested WithScan for public groups input.
WITH
  res1 AS (
    WITH
      public1 AS (
        SELECT string FROM SimpleTypes
      )
      SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
        group_selection_strategy=PUBLIC_GROUPS,
        max_groups_contributed=2)
        string, COUNT(*)
      FROM SimpleTypesWithAnonymizationUid
        RIGHT OUTER JOIN (
          SELECT DISTINCT string FROM public1
        ) USING (string)
      GROUP BY string
  )
SELECT *
FROM res1;
--
QueryStmt
+-output_column_list=
| +-res1.string#35 AS string [STRING]
| +-res1.$col2#36 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=res1.[string#35, $col2#36]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="res1"
    |   +-with_subquery=
    |     +-WithScan
    |       +-column_list=[$groupby.string#34, $aggregate.$agg1#33]
    |       +-with_entry_list=
    |       | +-WithEntry
    |       |   +-with_query_name="public1"
    |       |   +-with_subquery=
    |       |     +-ProjectScan
    |       |       +-column_list=[SimpleTypes.string#5]
    |       |       +-input_scan=
    |       |         +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
    |       +-query=
    |         +-ProjectScan
    |           +-column_list=[$groupby.string#34, $aggregate.$agg1#33]
    |           +-input_scan=
    |             +-DifferentialPrivacyAggregateScan
    |               +-column_list=[$groupby.string#34, $aggregate.$agg1#33]
    |               +-input_scan=
    |               | +-JoinScan
    |               |   +-column_list=[SimpleTypesWithAnonymizationUid.string#23, $distinct.string#32]
    |               |   +-join_type=RIGHT
    |               |   +-left_scan=
    |               |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.string#23], table=SimpleTypesWithAnonymizationUid, column_index_list=[4])
    |               |   +-right_scan=
    |               |   | +-AggregateScan
    |               |   |   +-column_list=[$distinct.string#32]
    |               |   |   +-input_scan=
    |               |   |   | +-WithRefScan(column_list=[public1.string#31], with_query_name="public1")
    |               |   |   +-group_by_list=
    |               |   |     +-string#32 := ColumnRef(type=STRING, column=public1.string#31)
    |               |   +-join_expr=
    |               |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |               |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#23)
    |               |   |   +-ColumnRef(type=STRING, column=$distinct.string#32)
    |               |   +-has_using=TRUE
    |               +-group_by_list=
    |               | +-string#34 := ColumnRef(type=STRING, column=$distinct.string#32)
    |               +-aggregate_list=
    |               | +-$agg1#33 :=
    |               |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    |               |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
    |               +-option_list=
    |                 +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
    |                 +-max_groups_contributed := Literal(type=INT64, value=2)
    +-query=
      +-ProjectScan
        +-column_list=res1.[string#35, $col2#36]
        +-input_scan=
          +-WithRefScan(column_list=res1.[string#35, $col2#36], with_query_name="res1")


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-res1.string#35 AS string [STRING]
| +-res1.$col2#36 AS `$col2` [INT64]
+-query=
  +-WithScan
    +-column_list=res1.[string#35, $col2#36]
    +-with_entry_list=
    | +-WithEntry
    |   +-with_query_name="res1"
    |   +-with_subquery=
    |     +-WithScan
    |       +-column_list=[$groupby.string#34, $aggregate.$agg1#33]
    |       +-with_entry_list=
    |       | +-WithEntry
    |       |   +-with_query_name="public1"
    |       |   +-with_subquery=
    |       |     +-ProjectScan
    |       |       +-column_list=[SimpleTypes.string#5]
    |       |       +-input_scan=
    |       |         +-TableScan(column_list=[SimpleTypes.string#5], table=SimpleTypes, column_index_list=[4])
    |       +-query=
    |         +-ProjectScan
    |           +-column_list=[$groupby.string#34, $aggregate.$agg1#33]
    |           +-input_scan=
    |             +-WithScan
    |               +-column_list=[$groupby.string#34, $aggregate.$agg1#33]
    |               +-with_entry_list=
    |               | +-WithEntry
    |               |   +-with_query_name="$public_groups0"
    |               |   +-with_subquery=
    |               |     +-AggregateScan
    |               |       +-column_list=[$distinct.string#44]
    |               |       +-input_scan=
    |               |       | +-WithRefScan(column_list=[public1.string#45], with_query_name="public1")
    |               |       +-group_by_list=
    |               |         +-string#44 := ColumnRef(type=STRING, column=public1.string#45)
    |               +-query=
    |                 +-DifferentialPrivacyAggregateScan
    |                   +-column_list=[$groupby.string#34, $aggregate.$agg1#33]
    |                   +-input_scan=
    |                   | +-JoinScan
    |                   |   +-column_list=[$public_groups0.string#43, $aggregate.$agg1_partial#39, $groupby.string_partial#40, $group_by.$uid#41]
    |                   |   +-join_type=RIGHT
    |                   |   +-left_scan=
    |                   |   | +-SampleScan
    |                   |   |   +-column_list=[$aggregate.$agg1_partial#39, $groupby.string_partial#40, $group_by.$uid#41]
    |                   |   |   +-input_scan=
    |                   |   |   | +-AggregateScan
    |                   |   |   |   +-column_list=[$aggregate.$agg1_partial#39, $groupby.string_partial#40, $group_by.$uid#41]
    |                   |   |   |   +-input_scan=
    |                   |   |   |   | +-JoinScan
    |                   |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.string#23, $distinct.string#32, SimpleTypesWithAnonymizationUid.uid#37]
    |                   |   |   |   |   +-left_scan=
    |                   |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#23, uid#37], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
    |                   |   |   |   |   +-right_scan=
    |                   |   |   |   |   | +-WithRefScan(column_list=[$distinct.string#32], with_query_name="$public_groups0")
    |                   |   |   |   |   +-join_expr=
    |                   |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |                   |   |   |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#23)
    |                   |   |   |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#32)
    |                   |   |   |   |   +-has_using=TRUE
    |                   |   |   |   +-group_by_list=
    |                   |   |   |   | +-string_partial#40 := ColumnRef(type=STRING, column=$distinct.string#32)
    |                   |   |   |   | +-$uid#41 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#37)
    |                   |   |   |   +-aggregate_list=
    |                   |   |   |     +-$agg1_partial#39 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
    |                   |   |   +-method="RESERVOIR"
    |                   |   |   +-size=
    |                   |   |   | +-Literal(type=INT64, value=2)
    |                   |   |   +-unit=ROWS
    |                   |   |   +-partition_by_list=
    |                   |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#41)
    |                   |   +-right_scan=
    |                   |   | +-WithRefScan(column_list=[$public_groups0.string#43], with_query_name="$public_groups0")
    |                   |   +-join_expr=
    |                   |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
    |                   |       +-ColumnRef(type=STRING, column=$groupby.string_partial#40)
    |                   |       +-ColumnRef(type=STRING, column=$public_groups0.string#43)
    |                   +-group_by_list=
    |                   | +-string#34 := ColumnRef(type=STRING, column=$public_groups0.string#43)
    |                   +-aggregate_list=
    |                   | +-$agg1#33 :=
    |                   |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
    |                   |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
    |                   |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
    |                   |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#41)
    |                   |     | +-Literal(type=INT64, value=NULL)
    |                   |     | +-ColumnRef(type=INT64, column=$aggregate.$agg1_partial#39)
    |                   |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
    |                   +-option_list=
    |                     +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
    |                     +-max_groups_contributed := Literal(type=INT64, value=2)
    +-query=
      +-ProjectScan
        +-column_list=res1.[string#35, $col2#36]
        +-input_scan=
          +-WithRefScan(column_list=res1.[string#35, $col2#36], with_query_name="res1")
==

# UNION ALL of multiple public group queries.
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
  max_groups_contributed=2,
  group_selection_strategy=PUBLIC_GROUPS)
    string, COUNT(*) AS anon_count
FROM SimpleTypesWithAnonymizationUid
  RIGHT OUTER JOIN (SELECT DISTINCT string FROM SimpleTypes) USING (string)
GROUP BY string
UNION ALL
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
  max_groups_contributed=3,
  group_selection_strategy=PUBLIC_GROUPS)
    string, COUNT(*) AS anon_count
FROM SimpleTypesWithAnonymizationUid
  RIGHT OUTER JOIN (SELECT DISTINCT string FROM SimpleTypes) USING (string)
GROUP BY STRING;
--
QueryStmt
+-output_column_list=
| +-$union_all.string#67 AS string [STRING]
| +-$union_all.anon_count#68 AS anon_count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=$union_all.[string#67, anon_count#68]
    +-op_type=UNION_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$groupby.string#33, $aggregate.anon_count#32]
      | |   +-input_scan=
      | |     +-DifferentialPrivacyAggregateScan
      | |       +-column_list=[$groupby.string#33, $aggregate.anon_count#32]
      | |       +-input_scan=
      | |       | +-JoinScan
      | |       |   +-column_list=[SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31]
      | |       |   +-join_type=RIGHT
      | |       |   +-left_scan=
      | |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.string#5], table=SimpleTypesWithAnonymizationUid, column_index_list=[4])
      | |       |   +-right_scan=
      | |       |   | +-AggregateScan
      | |       |   |   +-column_list=[$distinct.string#31]
      | |       |   |   +-input_scan=
      | |       |   |   | +-TableScan(column_list=[SimpleTypes.string#17], table=SimpleTypes, column_index_list=[4])
      | |       |   |   +-group_by_list=
      | |       |   |     +-string#31 := ColumnRef(type=STRING, column=SimpleTypes.string#17)
      | |       |   +-join_expr=
      | |       |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
      | |       |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
      | |       |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
      | |       |   +-has_using=TRUE
      | |       +-group_by_list=
      | |       | +-string#33 := ColumnRef(type=STRING, column=$distinct.string#31)
      | |       +-aggregate_list=
      | |       | +-anon_count#32 :=
      | |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |       |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
      | |       +-option_list=
      | |         +-max_groups_contributed := Literal(type=INT64, value=2)
      | |         +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
      | +-output_column_list=[$groupby.string#33, $aggregate.anon_count#32]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$groupby.string#66, $aggregate.anon_count#65]
        |   +-input_scan=
        |     +-DifferentialPrivacyAggregateScan
        |       +-column_list=[$groupby.string#66, $aggregate.anon_count#65]
        |       +-input_scan=
        |       | +-JoinScan
        |       |   +-column_list=[SimpleTypesWithAnonymizationUid.string#38, $distinct.string#64]
        |       |   +-join_type=RIGHT
        |       |   +-left_scan=
        |       |   | +-TableScan(column_list=[SimpleTypesWithAnonymizationUid.string#38], table=SimpleTypesWithAnonymizationUid, column_index_list=[4])
        |       |   +-right_scan=
        |       |   | +-AggregateScan
        |       |   |   +-column_list=[$distinct.string#64]
        |       |   |   +-input_scan=
        |       |   |   | +-TableScan(column_list=[SimpleTypes.string#50], table=SimpleTypes, column_index_list=[4])
        |       |   |   +-group_by_list=
        |       |   |     +-string#64 := ColumnRef(type=STRING, column=SimpleTypes.string#50)
        |       |   +-join_expr=
        |       |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |       |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#38)
        |       |   |   +-ColumnRef(type=STRING, column=$distinct.string#64)
        |       |   +-has_using=TRUE
        |       +-group_by_list=
        |       | +-string#66 := ColumnRef(type=STRING, column=$distinct.string#64)
        |       +-aggregate_list=
        |       | +-anon_count#65 :=
        |       |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |       |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        |       +-option_list=
        |         +-max_groups_contributed := Literal(type=INT64, value=3)
        |         +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
        +-output_column_list=[$groupby.string#66, $aggregate.anon_count#65]


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$union_all.string#67 AS string [STRING]
| +-$union_all.anon_count#68 AS anon_count [INT64]
+-query=
  +-SetOperationScan
    +-column_list=$union_all.[string#67, anon_count#68]
    +-op_type=UNION_ALL
    +-input_item_list=
      +-SetOperationItem
      | +-scan=
      | | +-ProjectScan
      | |   +-column_list=[$groupby.string#33, $aggregate.anon_count#32]
      | |   +-input_scan=
      | |     +-WithScan
      | |       +-column_list=[$groupby.string#33, $aggregate.anon_count#32]
      | |       +-with_entry_list=
      | |       | +-WithEntry
      | |       |   +-with_query_name="$public_groups0"
      | |       |   +-with_subquery=
      | |       |     +-AggregateScan
      | |       |       +-column_list=[$distinct.string#76]
      | |       |       +-input_scan=
      | |       |       | +-TableScan(column_list=[SimpleTypes.string#77], table=SimpleTypes, column_index_list=[4])
      | |       |       +-group_by_list=
      | |       |         +-string#76 := ColumnRef(type=STRING, column=SimpleTypes.string#77)
      | |       +-query=
      | |         +-DifferentialPrivacyAggregateScan
      | |           +-column_list=[$groupby.string#33, $aggregate.anon_count#32]
      | |           +-input_scan=
      | |           | +-JoinScan
      | |           |   +-column_list=[$public_groups0.string#75, $aggregate.anon_count_partial#71, $groupby.string_partial#72, $group_by.$uid#73]
      | |           |   +-join_type=RIGHT
      | |           |   +-left_scan=
      | |           |   | +-SampleScan
      | |           |   |   +-column_list=[$aggregate.anon_count_partial#71, $groupby.string_partial#72, $group_by.$uid#73]
      | |           |   |   +-input_scan=
      | |           |   |   | +-AggregateScan
      | |           |   |   |   +-column_list=[$aggregate.anon_count_partial#71, $groupby.string_partial#72, $group_by.$uid#73]
      | |           |   |   |   +-input_scan=
      | |           |   |   |   | +-JoinScan
      | |           |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.string#5, $distinct.string#31, SimpleTypesWithAnonymizationUid.uid#69]
      | |           |   |   |   |   +-left_scan=
      | |           |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#5, uid#69], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
      | |           |   |   |   |   +-right_scan=
      | |           |   |   |   |   | +-WithRefScan(column_list=[$distinct.string#31], with_query_name="$public_groups0")
      | |           |   |   |   |   +-join_expr=
      | |           |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
      | |           |   |   |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#5)
      | |           |   |   |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#31)
      | |           |   |   |   |   +-has_using=TRUE
      | |           |   |   |   +-group_by_list=
      | |           |   |   |   | +-string_partial#72 := ColumnRef(type=STRING, column=$distinct.string#31)
      | |           |   |   |   | +-$uid#73 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#69)
      | |           |   |   |   +-aggregate_list=
      | |           |   |   |     +-anon_count_partial#71 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
      | |           |   |   +-method="RESERVOIR"
      | |           |   |   +-size=
      | |           |   |   | +-Literal(type=INT64, value=2)
      | |           |   |   +-unit=ROWS
      | |           |   |   +-partition_by_list=
      | |           |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#73)
      | |           |   +-right_scan=
      | |           |   | +-WithRefScan(column_list=[$public_groups0.string#75], with_query_name="$public_groups0")
      | |           |   +-join_expr=
      | |           |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
      | |           |       +-ColumnRef(type=STRING, column=$groupby.string_partial#72)
      | |           |       +-ColumnRef(type=STRING, column=$public_groups0.string#75)
      | |           +-group_by_list=
      | |           | +-string#33 := ColumnRef(type=STRING, column=$public_groups0.string#75)
      | |           +-aggregate_list=
      | |           | +-anon_count#32 :=
      | |           |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
      | |           |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
      | |           |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
      | |           |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#73)
      | |           |     | +-Literal(type=INT64, value=NULL)
      | |           |     | +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#71)
      | |           |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
      | |           +-option_list=
      | |             +-max_groups_contributed := Literal(type=INT64, value=2)
      | |             +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
      | +-output_column_list=[$groupby.string#33, $aggregate.anon_count#32]
      +-SetOperationItem
        +-scan=
        | +-ProjectScan
        |   +-column_list=[$groupby.string#66, $aggregate.anon_count#65]
        |   +-input_scan=
        |     +-WithScan
        |       +-column_list=[$groupby.string#66, $aggregate.anon_count#65]
        |       +-with_entry_list=
        |       | +-WithEntry
        |       |   +-with_query_name="$public_groups1"
        |       |   +-with_subquery=
        |       |     +-AggregateScan
        |       |       +-column_list=[$distinct.string#85]
        |       |       +-input_scan=
        |       |       | +-TableScan(column_list=[SimpleTypes.string#86], table=SimpleTypes, column_index_list=[4])
        |       |       +-group_by_list=
        |       |         +-string#85 := ColumnRef(type=STRING, column=SimpleTypes.string#86)
        |       +-query=
        |         +-DifferentialPrivacyAggregateScan
        |           +-column_list=[$groupby.string#66, $aggregate.anon_count#65]
        |           +-input_scan=
        |           | +-JoinScan
        |           |   +-column_list=[$public_groups1.string#84, $aggregate.anon_count_partial#80, $groupby.string_partial#81, $group_by.$uid#82]
        |           |   +-join_type=RIGHT
        |           |   +-left_scan=
        |           |   | +-SampleScan
        |           |   |   +-column_list=[$aggregate.anon_count_partial#80, $groupby.string_partial#81, $group_by.$uid#82]
        |           |   |   +-input_scan=
        |           |   |   | +-AggregateScan
        |           |   |   |   +-column_list=[$aggregate.anon_count_partial#80, $groupby.string_partial#81, $group_by.$uid#82]
        |           |   |   |   +-input_scan=
        |           |   |   |   | +-JoinScan
        |           |   |   |   |   +-column_list=[SimpleTypesWithAnonymizationUid.string#38, $distinct.string#64, SimpleTypesWithAnonymizationUid.uid#78]
        |           |   |   |   |   +-left_scan=
        |           |   |   |   |   | +-TableScan(column_list=SimpleTypesWithAnonymizationUid.[string#38, uid#78], table=SimpleTypesWithAnonymizationUid, column_index_list=[4, 10])
        |           |   |   |   |   +-right_scan=
        |           |   |   |   |   | +-WithRefScan(column_list=[$distinct.string#64], with_query_name="$public_groups1")
        |           |   |   |   |   +-join_expr=
        |           |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |           |   |   |   |   |   +-ColumnRef(type=STRING, column=SimpleTypesWithAnonymizationUid.string#38)
        |           |   |   |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#64)
        |           |   |   |   |   +-has_using=TRUE
        |           |   |   |   +-group_by_list=
        |           |   |   |   | +-string_partial#81 := ColumnRef(type=STRING, column=$distinct.string#64)
        |           |   |   |   | +-$uid#82 := ColumnRef(type=INT64, column=SimpleTypesWithAnonymizationUid.uid#78)
        |           |   |   |   +-aggregate_list=
        |           |   |   |     +-anon_count_partial#80 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        |           |   |   +-method="RESERVOIR"
        |           |   |   +-size=
        |           |   |   | +-Literal(type=INT64, value=3)
        |           |   |   +-unit=ROWS
        |           |   |   +-partition_by_list=
        |           |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#82)
        |           |   +-right_scan=
        |           |   | +-WithRefScan(column_list=[$public_groups1.string#84], with_query_name="$public_groups1")
        |           |   +-join_expr=
        |           |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |           |       +-ColumnRef(type=STRING, column=$groupby.string_partial#81)
        |           |       +-ColumnRef(type=STRING, column=$public_groups1.string#84)
        |           +-group_by_list=
        |           | +-string#66 := ColumnRef(type=STRING, column=$public_groups1.string#84)
        |           +-aggregate_list=
        |           | +-anon_count#65 :=
        |           |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |           |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
        |           |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
        |           |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#82)
        |           |     | +-Literal(type=INT64, value=NULL)
        |           |     | +-ColumnRef(type=INT64, column=$aggregate.anon_count_partial#80)
        |           |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        |           +-option_list=
        |             +-max_groups_contributed := Literal(type=INT64, value=3)
        |             +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
        +-output_column_list=[$groupby.string#66, $aggregate.anon_count#65]
==

# privacy_unit_column is supported with max_groups_contributed = NULL.
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
  privacy_unit_column = `int64`,
  max_groups_contributed = NULL,
  group_selection_strategy = PUBLIC_GROUPS
) string, COUNT(*) AS anon_users
FROM
  SimpleTypes
  RIGHT OUTER JOIN
  (SELECT DISTINCT string FROM SimpleTypes)
    USING (string)
GROUP BY string
--
QueryStmt
+-output_column_list=
| +-$groupby.string#39 AS string [STRING]
| +-$aggregate.anon_users#38 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#39, $aggregate.anon_users#38]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.string#39, $aggregate.anon_users#38]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypes.int64#2, SimpleTypes.string#5, $distinct.string#37]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=SimpleTypes.[int64#2, string#5], table=SimpleTypes, column_index_list=[1, 4])
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.string#37]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.string#23], table=SimpleTypes, column_index_list=[4])
        |   |   +-group_by_list=
        |   |     +-string#37 := ColumnRef(type=STRING, column=SimpleTypes.string#23)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
        |   |   +-ColumnRef(type=STRING, column=$distinct.string#37)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-string#39 := ColumnRef(type=STRING, column=$distinct.string#37)
        +-aggregate_list=
        | +-anon_users#38 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-privacy_unit_column := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
          +-max_groups_contributed := Literal(type=INT64, value=NULL)
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#39 AS string [STRING]
| +-$aggregate.anon_users#38 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#39, $aggregate.anon_users#38]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.string#39, $aggregate.anon_users#38]
        +-input_scan=
        | +-AggregateScan
        |   +-column_list=[$aggregate.anon_users_partial#41, $groupby.string_partial#42, $group_by.$uid#43]
        |   +-input_scan=
        |   | +-JoinScan
        |   |   +-column_list=[SimpleTypes.int64#2, SimpleTypes.string#5, $distinct.string#37]
        |   |   +-join_type=RIGHT
        |   |   +-left_scan=
        |   |   | +-TableScan(column_list=SimpleTypes.[int64#2, string#5], table=SimpleTypes, column_index_list=[1, 4])
        |   |   +-right_scan=
        |   |   | +-AggregateScan
        |   |   |   +-column_list=[$distinct.string#37]
        |   |   |   +-input_scan=
        |   |   |   | +-TableScan(column_list=[SimpleTypes.string#23], table=SimpleTypes, column_index_list=[4])
        |   |   |   +-group_by_list=
        |   |   |     +-string#37 := ColumnRef(type=STRING, column=SimpleTypes.string#23)
        |   |   +-join_expr=
        |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
        |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#37)
        |   |   +-has_using=TRUE
        |   +-group_by_list=
        |   | +-string_partial#42 := ColumnRef(type=STRING, column=$distinct.string#37)
        |   | +-$uid#43 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
        |   +-aggregate_list=
        |     +-anon_users_partial#41 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
        +-group_by_list=
        | +-string#39 := ColumnRef(type=STRING, column=$groupby.string_partial#42)
        +-aggregate_list=
        | +-anon_users#38 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
        |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
        |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#43)
        |     | +-Literal(type=INT64, value=NULL)
        |     | +-ColumnRef(type=INT64, column=$aggregate.anon_users_partial#41)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-max_groups_contributed := Literal(type=INT64, value=NULL)
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
==

# privacy_unit_column is supported with max_groups_contributed > 0.
SELECT WITH DIFFERENTIAL_PRIVACY OPTIONS (
  privacy_unit_column = `int64`,
  max_groups_contributed = 3,
  group_selection_strategy = PUBLIC_GROUPS
) string, COUNT(*) AS anon_users
FROM
  SimpleTypes
  RIGHT OUTER JOIN
  (SELECT DISTINCT string FROM SimpleTypes)
    USING (string)
GROUP BY string
--
QueryStmt
+-output_column_list=
| +-$groupby.string#39 AS string [STRING]
| +-$aggregate.anon_users#38 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#39, $aggregate.anon_users#38]
    +-input_scan=
      +-DifferentialPrivacyAggregateScan
        +-column_list=[$groupby.string#39, $aggregate.anon_users#38]
        +-input_scan=
        | +-JoinScan
        |   +-column_list=[SimpleTypes.int64#2, SimpleTypes.string#5, $distinct.string#37]
        |   +-join_type=RIGHT
        |   +-left_scan=
        |   | +-TableScan(column_list=SimpleTypes.[int64#2, string#5], table=SimpleTypes, column_index_list=[1, 4])
        |   +-right_scan=
        |   | +-AggregateScan
        |   |   +-column_list=[$distinct.string#37]
        |   |   +-input_scan=
        |   |   | +-TableScan(column_list=[SimpleTypes.string#23], table=SimpleTypes, column_index_list=[4])
        |   |   +-group_by_list=
        |   |     +-string#37 := ColumnRef(type=STRING, column=SimpleTypes.string#23)
        |   +-join_expr=
        |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
        |   |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
        |   |   +-ColumnRef(type=STRING, column=$distinct.string#37)
        |   +-has_using=TRUE
        +-group_by_list=
        | +-string#39 := ColumnRef(type=STRING, column=$distinct.string#37)
        +-aggregate_list=
        | +-anon_users#38 :=
        |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_count_star(optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
        |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
        +-option_list=
          +-privacy_unit_column := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
          +-max_groups_contributed := Literal(type=INT64, value=3)
          +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)


[REWRITTEN AST]
QueryStmt
+-output_column_list=
| +-$groupby.string#39 AS string [STRING]
| +-$aggregate.anon_users#38 AS anon_users [INT64]
+-query=
  +-ProjectScan
    +-column_list=[$groupby.string#39, $aggregate.anon_users#38]
    +-input_scan=
      +-WithScan
        +-column_list=[$groupby.string#39, $aggregate.anon_users#38]
        +-with_entry_list=
        | +-WithEntry
        |   +-with_query_name="$public_groups0"
        |   +-with_subquery=
        |     +-AggregateScan
        |       +-column_list=[$distinct.string#46]
        |       +-input_scan=
        |       | +-TableScan(column_list=[SimpleTypes.string#47], table=SimpleTypes, column_index_list=[4])
        |       +-group_by_list=
        |         +-string#46 := ColumnRef(type=STRING, column=SimpleTypes.string#47)
        +-query=
          +-DifferentialPrivacyAggregateScan
            +-column_list=[$groupby.string#39, $aggregate.anon_users#38]
            +-input_scan=
            | +-JoinScan
            |   +-column_list=[$public_groups0.string#45, $aggregate.anon_users_partial#41, $groupby.string_partial#42, $group_by.$uid#43]
            |   +-join_type=RIGHT
            |   +-left_scan=
            |   | +-SampleScan
            |   |   +-column_list=[$aggregate.anon_users_partial#41, $groupby.string_partial#42, $group_by.$uid#43]
            |   |   +-input_scan=
            |   |   | +-AggregateScan
            |   |   |   +-column_list=[$aggregate.anon_users_partial#41, $groupby.string_partial#42, $group_by.$uid#43]
            |   |   |   +-input_scan=
            |   |   |   | +-JoinScan
            |   |   |   |   +-column_list=[SimpleTypes.int64#2, SimpleTypes.string#5, $distinct.string#37]
            |   |   |   |   +-left_scan=
            |   |   |   |   | +-TableScan(column_list=SimpleTypes.[int64#2, string#5], table=SimpleTypes, column_index_list=[1, 4])
            |   |   |   |   +-right_scan=
            |   |   |   |   | +-WithRefScan(column_list=[$distinct.string#37], with_query_name="$public_groups0")
            |   |   |   |   +-join_expr=
            |   |   |   |   | +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |   |   |   |   |   +-ColumnRef(type=STRING, column=SimpleTypes.string#5)
            |   |   |   |   |   +-ColumnRef(type=STRING, column=$distinct.string#37)
            |   |   |   |   +-has_using=TRUE
            |   |   |   +-group_by_list=
            |   |   |   | +-string_partial#42 := ColumnRef(type=STRING, column=$distinct.string#37)
            |   |   |   | +-$uid#43 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
            |   |   |   +-aggregate_list=
            |   |   |     +-anon_users_partial#41 := AggregateFunctionCall(ZetaSQL:$count_star() -> INT64)
            |   |   +-method="RESERVOIR"
            |   |   +-size=
            |   |   | +-Literal(type=INT64, value=3)
            |   |   +-unit=ROWS
            |   |   +-partition_by_list=
            |   |     +-ColumnRef(type=INT64, column=$group_by.$uid#43)
            |   +-right_scan=
            |   | +-WithRefScan(column_list=[$public_groups0.string#45], with_query_name="$public_groups0")
            |   +-join_expr=
            |     +-FunctionCall(ZetaSQL:$equal(STRING, STRING) -> BOOL)
            |       +-ColumnRef(type=STRING, column=$groupby.string_partial#42)
            |       +-ColumnRef(type=STRING, column=$public_groups0.string#45)
            +-group_by_list=
            | +-string#39 := ColumnRef(type=STRING, column=$public_groups0.string#45)
            +-aggregate_list=
            | +-anon_users#38 :=
            |   +-AggregateFunctionCall(ZetaSQL:$differential_privacy_sum(INT64, optional(1) STRUCT<INT64, INT64> contribution_bounds_per_group) -> INT64)
            |     +-FunctionCall(ZetaSQL:if(BOOL, INT64, INT64) -> INT64)
            |     | +-FunctionCall(ZetaSQL:$is_null(INT64) -> BOOL)
            |     | | +-ColumnRef(type=INT64, column=$group_by.$uid#43)
            |     | +-Literal(type=INT64, value=NULL)
            |     | +-ColumnRef(type=INT64, column=$aggregate.anon_users_partial#41)
            |     +-Literal(type=STRUCT<INT64, INT64>, value=NULL)
            +-option_list=
              +-max_groups_contributed := Literal(type=INT64, value=3)
              +-group_selection_strategy := Literal(type=ENUM<DIFFERENTIAL_PRIVACY_GROUP_SELECTION_STRATEGY>, value=PUBLIC_GROUPS)
