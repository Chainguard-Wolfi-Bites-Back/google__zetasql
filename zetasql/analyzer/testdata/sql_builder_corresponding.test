[default show_unparsed]
[default no_show_resolved_ast]
[default language_features=V_1_4_CORRESPONDING]

# CORRESPONDING: Simple CORRESPONDING
SELECT 1 AS a, 2 AS b
{{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
SELECT 2 AS b, 1 AS a
--
ALTERNATION GROUP: UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  1 AS a,
  2 AS b
) UNION ALL CORRESPONDING(
SELECT
  2 AS b,
  1 AS a
);
--
ALTERNATION GROUP: UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  1 AS a,
  2 AS b
) UNION DISTINCT CORRESPONDING(
SELECT
  2 AS b,
  1 AS a
);
--
ALTERNATION GROUP: EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  1 AS a,
  2 AS b
) EXCEPT ALL CORRESPONDING(
SELECT
  2 AS b,
  1 AS a
);
--
ALTERNATION GROUP: EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  1 AS a,
  2 AS b
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  2 AS b,
  1 AS a
);
--
ALTERNATION GROUP: INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  1 AS a,
  2 AS b
) INTERSECT ALL CORRESPONDING(
SELECT
  2 AS b,
  1 AS a
);
--
ALTERNATION GROUP: INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  1 AS a,
  2 AS b
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  2 AS b,
  1 AS a
);
==

# CORRESPONDING: Extra columns
SELECT 1 AS a, 2 AS extra_1
{{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
SELECT 2 AS extra_2, 1 AS a
--
ALTERNATION GROUP: UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  1 AS a,
  2 AS a_3
) UNION ALL CORRESPONDING(
SELECT
  2 AS a_4,
  1 AS a
);
--
ALTERNATION GROUP: UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  1 AS a,
  2 AS a_3
) UNION DISTINCT CORRESPONDING(
SELECT
  2 AS a_4,
  1 AS a
);
--
ALTERNATION GROUP: EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  1 AS a,
  2 AS a_3
) EXCEPT ALL CORRESPONDING(
SELECT
  2 AS a_4,
  1 AS a
);
--
ALTERNATION GROUP: EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  1 AS a,
  2 AS a_3
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  2 AS a_4,
  1 AS a
);
--
ALTERNATION GROUP: INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  1 AS a,
  2 AS a_3
) INTERSECT ALL CORRESPONDING(
SELECT
  2 AS a_4,
  1 AS a
);
--
ALTERNATION GROUP: INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  1 AS a,
  2 AS a_3
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  2 AS a_4,
  1 AS a
);
==

# CORRESPONDING: Column order is reserved for the first query, i.e. the last two
# columns are renamed.
SELECT a AS col1, a AS col2, b AS col3, a AS col4
FROM (
  SELECT 1 AS a, 2 AS b
)
{{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
SELECT 1 AS col4, 2 AS col3
--

ALTERNATION GROUP: UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  projectscan_5.a_3 AS a_3,
  projectscan_5.a_3 AS a_6,
  projectscan_5.a_4 AS col3,
  projectscan_5.a_3 AS col4
FROM
  (
    SELECT
      1 AS a_3,
      2 AS a_4
  ) AS projectscan_5
) UNION ALL CORRESPONDING(
SELECT
  1 AS col4,
  2 AS col3
);
--
ALTERNATION GROUP: UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  projectscan_5.a_3 AS a_3,
  projectscan_5.a_3 AS a_6,
  projectscan_5.a_4 AS col3,
  projectscan_5.a_3 AS col4
FROM
  (
    SELECT
      1 AS a_3,
      2 AS a_4
  ) AS projectscan_5
) UNION DISTINCT CORRESPONDING(
SELECT
  1 AS col4,
  2 AS col3
);
--
ALTERNATION GROUP: EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  projectscan_5.a_3 AS a_3,
  projectscan_5.a_3 AS a_6,
  projectscan_5.a_4 AS col3,
  projectscan_5.a_3 AS col4
FROM
  (
    SELECT
      1 AS a_3,
      2 AS a_4
  ) AS projectscan_5
) EXCEPT ALL CORRESPONDING(
SELECT
  1 AS col4,
  2 AS col3
);
--
ALTERNATION GROUP: EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  projectscan_5.a_3 AS a_3,
  projectscan_5.a_3 AS a_6,
  projectscan_5.a_4 AS col3,
  projectscan_5.a_3 AS col4
FROM
  (
    SELECT
      1 AS a_3,
      2 AS a_4
  ) AS projectscan_5
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  1 AS col4,
  2 AS col3
);
--
ALTERNATION GROUP: INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  projectscan_5.a_3 AS a_3,
  projectscan_5.a_3 AS a_6,
  projectscan_5.a_4 AS col3,
  projectscan_5.a_3 AS col4
FROM
  (
    SELECT
      1 AS a_3,
      2 AS a_4
  ) AS projectscan_5
) INTERSECT ALL CORRESPONDING(
SELECT
  1 AS col4,
  2 AS col3
);
--
ALTERNATION GROUP: INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  projectscan_5.a_3 AS a_3,
  projectscan_5.a_3 AS a_6,
  projectscan_5.a_4 AS col3,
  projectscan_5.a_3 AS col4
FROM
  (
    SELECT
      1 AS a_3,
      2 AS a_4
  ) AS projectscan_5
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  1 AS col4,
  2 AS col3
);
==

# CORRESPONDING: CORRESPONDING as an input query to BY_POSITION.
(
  SELECT int32, int64, float FROM SimpleTypes
  {{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
  SELECT int64, int32 FROM SimpleTypes
)
{{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}}
SELECT int32, int32 FROM SimpleTypes
--
ALTERNATION GROUP: UNION ALL,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) UNION ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: UNION ALL,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) UNION DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: UNION ALL,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) EXCEPT ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: UNION ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) EXCEPT DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: UNION ALL,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) INTERSECT ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: UNION ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) INTERSECT DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: UNION DISTINCT,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) UNION ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: UNION DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) UNION DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: UNION DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) EXCEPT ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: UNION DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) EXCEPT DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: UNION DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) INTERSECT ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: UNION DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) INTERSECT DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: EXCEPT ALL,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) UNION ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: EXCEPT ALL,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) UNION DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: EXCEPT ALL,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) EXCEPT ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: EXCEPT ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) EXCEPT DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: EXCEPT ALL,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) INTERSECT ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: EXCEPT ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) INTERSECT DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) UNION ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) UNION DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) EXCEPT ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) EXCEPT DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) INTERSECT ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) INTERSECT DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: INTERSECT ALL,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) UNION ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: INTERSECT ALL,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) UNION DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: INTERSECT ALL,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) EXCEPT ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: INTERSECT ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) EXCEPT DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: INTERSECT ALL,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) INTERSECT ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: INTERSECT ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) INTERSECT DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) UNION ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) UNION DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) EXCEPT ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) EXCEPT DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) INTERSECT ALL(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS int64,
  SimpleTypes.float AS a_5
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_8.a_7 AS int64,
  simpletypes_8.a_6 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7
    FROM
      SimpleTypes
  ) AS simpletypes_8
)) INTERSECT DISTINCT(
SELECT
  projectscan_12.a_9 AS a_9,
  CAST(projectscan_12.a_9 AS INT64) AS a_13
FROM
  (
    SELECT
      simpletypes_10.a_9 AS a_9,
      simpletypes_10.a_9 AS a_11
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9
        FROM
          SimpleTypes
      ) AS simpletypes_10
  ) AS projectscan_12
);
==

# CORRESPONDING: CORRESPONDING as an input query to CORRESPONDING, the selected
# columns should be renamed.
(
  SELECT int32, int64, float FROM SimpleTypes
  {{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
  SELECT int64, int32 FROM SimpleTypes
)
{{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
SELECT int32, float FROM SimpleTypes
--
ALTERNATION GROUP: UNION ALL,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION ALL,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION ALL,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION ALL,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION DISTINCT,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT ALL,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT ALL,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT ALL,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT ALL,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT ALL,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT ALL,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT ALL,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT ALL,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS int32
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
==

# CORRESPONDING: CORRESPONDING as a non-first input query to CORRESPONDING,
# the alias `int32` should be preserved.
SELECT int32, float FROM SimpleTypes
{{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
(
  SELECT int64, int32, float FROM SimpleTypes
  {{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
  SELECT int32, int64 FROM SimpleTypes
)
--
ALTERNATION GROUP: UNION ALL,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: UNION ALL,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: UNION ALL,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: UNION ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: UNION ALL,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: UNION ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: UNION DISTINCT,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: UNION DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: UNION DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: UNION DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: UNION DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: UNION DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: EXCEPT ALL,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: EXCEPT ALL,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: EXCEPT ALL,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: EXCEPT ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: EXCEPT ALL,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: EXCEPT ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: INTERSECT ALL,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: INTERSECT ALL,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: INTERSECT ALL,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: INTERSECT ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: INTERSECT ALL,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: INTERSECT ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  simpletypes_9.a_7 AS a_4,
  simpletypes_9.a_6 AS int32,
  simpletypes_9.a_8 AS a_8
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_6,
      SimpleTypes.int64 AS a_7,
      SimpleTypes.float AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS int32,
  SimpleTypes.int64 AS a_4
FROM
  SimpleTypes
));
==

# CORRESPONDING: CORRESPONDING as an input query to CORRESPONDING with custom
# aliases.
(
  SELECT int32 AS a, int64 AS b, float AS c FROM SimpleTypes
  {{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
  SELECT int64 AS b, int32 AS a FROM SimpleTypes
)
{{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
SELECT int32 AS a, float AS c FROM SimpleTypes
--
ALTERNATION GROUP: UNION ALL,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION ALL,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION ALL,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION ALL,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION DISTINCT,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: UNION DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT ALL,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT ALL,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT ALL,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT ALL,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT ALL,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT ALL,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT ALL,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT ALL,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) UNION DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT ALL CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_3,
  SimpleTypes.float AS a_6
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_9.a_8 AS a_3,
  simpletypes_9.a_7 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_7,
      SimpleTypes.int64 AS a_8
    FROM
      SimpleTypes
  ) AS simpletypes_9
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_11
FROM
  SimpleTypes
);
==

# CORRESPONDING: CORRESPONDING as a non-first input query to CORRESPONDING with
# custom aliases.
SELECT int32 AS a, float AS c FROM SimpleTypes
{{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
(
  SELECT int32 AS a, int64 AS b, float AS c FROM SimpleTypes
  {{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
  SELECT int64 AS b, int32 AS a FROM SimpleTypes
)
--
ALTERNATION GROUP: UNION ALL,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: UNION ALL,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: UNION ALL,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: UNION ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: UNION ALL,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: UNION ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: UNION DISTINCT,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: UNION DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: UNION DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: UNION DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: UNION DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: UNION DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: EXCEPT ALL,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: EXCEPT ALL,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: EXCEPT ALL,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: EXCEPT ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: EXCEPT ALL,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: EXCEPT ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: INTERSECT ALL,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: INTERSECT ALL,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: INTERSECT ALL,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: INTERSECT ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: INTERSECT ALL,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: INTERSECT ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) UNION ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) UNION DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) EXCEPT ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) INTERSECT ALL CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.float AS a_3
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  SimpleTypes.int32 AS a,
  SimpleTypes.int64 AS a_5,
  SimpleTypes.float AS a_8
FROM
  SimpleTypes
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_10 AS a_5,
  simpletypes_11.a_9 AS a
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
));
==

# CORRESPONDING: BY_POSITION as an input query to CORRESPONDING, the first query
# of BY_POSITION should have the correct aliases.
(
  SELECT int32, int64, float FROM SimpleTypes
  {{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}}
  SELECT int64, int32, int64 FROM SimpleTypes
)
{{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
SELECT float, int32 FROM SimpleTypes
--
ALTERNATION GROUP: UNION ALL,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) UNION ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) UNION ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: UNION ALL,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) UNION ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) UNION DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: UNION ALL,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) UNION ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) EXCEPT ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: UNION ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) UNION ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: UNION ALL,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) UNION ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) INTERSECT ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: UNION ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) UNION ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: UNION DISTINCT,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) UNION DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) UNION ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: UNION DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) UNION DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) UNION DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: UNION DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) UNION DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) EXCEPT ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: UNION DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) UNION DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: UNION DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) UNION DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) INTERSECT ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: UNION DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) UNION DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: EXCEPT ALL,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) EXCEPT ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) UNION ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: EXCEPT ALL,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) EXCEPT ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) UNION DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: EXCEPT ALL,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) EXCEPT ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) EXCEPT ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: EXCEPT ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) EXCEPT ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: EXCEPT ALL,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) EXCEPT ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) INTERSECT ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: EXCEPT ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) EXCEPT ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) EXCEPT DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) UNION ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) EXCEPT DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) UNION DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) EXCEPT DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) EXCEPT ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) EXCEPT DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) EXCEPT DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) INTERSECT ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: EXCEPT DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) EXCEPT DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: INTERSECT ALL,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) INTERSECT ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) UNION ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: INTERSECT ALL,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) INTERSECT ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) UNION DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: INTERSECT ALL,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) INTERSECT ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) EXCEPT ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: INTERSECT ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) INTERSECT ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: INTERSECT ALL,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) INTERSECT ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) INTERSECT ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: INTERSECT ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) INTERSECT ALL(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,UNION ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) INTERSECT DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) UNION ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) INTERSECT DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) UNION DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) INTERSECT DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) EXCEPT ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) INTERSECT DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) EXCEPT DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) INTERSECT DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) INTERSECT ALL CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
--
ALTERNATION GROUP: INTERSECT DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
((
SELECT
  CAST(projectscan_6.a_3 AS INT64) AS int32,
  projectscan_6.a_4 AS a_4,
  CAST(projectscan_6.a_5 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.int64 AS a_4,
      SimpleTypes.float AS a_5
    FROM
      SimpleTypes
  ) AS projectscan_6
) INTERSECT DISTINCT(
SELECT
  projectscan_13.a_10 AS a_10,
  CAST(projectscan_13.a_9 AS INT64) AS a_14,
  CAST(projectscan_13.a_10 AS DOUBLE) AS a_15
FROM
  (
    SELECT
      simpletypes_11.a_10 AS a_10,
      simpletypes_11.a_9 AS a_9,
      simpletypes_11.a_10 AS a_12
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_9,
          SimpleTypes.int64 AS a_10
        FROM
          SimpleTypes
      ) AS simpletypes_11
  ) AS projectscan_13
)) INTERSECT DISTINCT CORRESPONDING(
SELECT
  CAST(projectscan_19.a_17 AS DOUBLE) AS float,
  CAST(projectscan_19.a_16 AS INT64) AS int32
FROM
  (
    SELECT
      simpletypes_18.a_17 AS a_17,
      simpletypes_18.a_16 AS a_16
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_16,
          SimpleTypes.float AS a_17
        FROM
          SimpleTypes
      ) AS simpletypes_18
  ) AS projectscan_19
);
==

# CORRESPONDING: BY_POSITION as a non-first input query to CORRESPONDING, the
# first query of BY_POSITION should have the correct aliases.
SELECT int32, float FROM SimpleTypes
{{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
(
  SELECT int32, int64, float FROM SimpleTypes
  {{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}}
  SELECT int64, int32, int64 FROM SimpleTypes
)
--
ALTERNATION GROUP: UNION ALL,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) UNION ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) UNION ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: UNION ALL,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) UNION ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) UNION DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: UNION ALL,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) UNION ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) EXCEPT ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: UNION ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) UNION ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) EXCEPT DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: UNION ALL,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) UNION ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) INTERSECT ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: UNION ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) UNION ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) INTERSECT DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: UNION DISTINCT,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) UNION DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) UNION ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: UNION DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) UNION DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) UNION DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: UNION DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) UNION DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) EXCEPT ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: UNION DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) UNION DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) EXCEPT DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: UNION DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) UNION DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) INTERSECT ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: UNION DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) UNION DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) INTERSECT DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: EXCEPT ALL,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) EXCEPT ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) UNION ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: EXCEPT ALL,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) EXCEPT ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) UNION DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: EXCEPT ALL,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) EXCEPT ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) EXCEPT ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: EXCEPT ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) EXCEPT ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) EXCEPT DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: EXCEPT ALL,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) EXCEPT ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) INTERSECT ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: EXCEPT ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) EXCEPT ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) INTERSECT DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) UNION ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) UNION DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) EXCEPT ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) EXCEPT DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) INTERSECT ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: EXCEPT DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) EXCEPT DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) INTERSECT DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: INTERSECT ALL,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) INTERSECT ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) UNION ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: INTERSECT ALL,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) INTERSECT ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) UNION DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: INTERSECT ALL,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) INTERSECT ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) EXCEPT ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: INTERSECT ALL,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) INTERSECT ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) EXCEPT DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: INTERSECT ALL,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) INTERSECT ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) INTERSECT ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: INTERSECT ALL,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) INTERSECT ALL CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) INTERSECT DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) UNION ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) UNION DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) EXCEPT ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) EXCEPT DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) INTERSECT ALL(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
--
ALTERNATION GROUP: INTERSECT DISTINCT,INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  CAST(projectscan_5.a_3 AS INT64) AS int32,
  CAST(projectscan_5.a_4 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_3,
      SimpleTypes.float AS a_4
    FROM
      SimpleTypes
  ) AS projectscan_5
) INTERSECT DISTINCT CORRESPONDING((
SELECT
  CAST(projectscan_11.a_8 AS INT64) AS int32,
  projectscan_11.a_9 AS a_9,
  CAST(projectscan_11.a_10 AS DOUBLE) AS float
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_8,
      SimpleTypes.int64 AS a_9,
      SimpleTypes.float AS a_10
    FROM
      SimpleTypes
  ) AS projectscan_11
) INTERSECT DISTINCT(
SELECT
  projectscan_18.a_15 AS a_15,
  CAST(projectscan_18.a_14 AS INT64) AS a_19,
  CAST(projectscan_18.a_15 AS DOUBLE) AS a_20
FROM
  (
    SELECT
      simpletypes_16.a_15 AS a_15,
      simpletypes_16.a_14 AS a_14,
      simpletypes_16.a_15 AS a_17
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_14,
          SimpleTypes.int64 AS a_15
        FROM
          SimpleTypes
      ) AS simpletypes_16
  ) AS projectscan_18
));
==

# CORRESPONDING: The edge case of SELECT DISTINCT is handled correctly despite
# the missing ProjectScan issue mentioned in b/36095506.
[show_resolved_ast]
SELECT DISTINCT a AS col1, b AS col2, a AS col3
FROM (
  SELECT 1 AS a, 2 AS b
)
{{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
SELECT 1 AS col3, 1 AS col1, 2 AS col2
--
ALTERNATION GROUP: UNION ALL
--
QueryStmt
+-output_column_list=
| +-$union_all.col1#8 AS col1 [INT64]
| +-$union_all.col2#9 AS col2 [INT64]
| +-$union_all.col3#10 AS col3 [INT64]
+-query=
  +-SetOperationScan
    +-column_list=$union_all.[col1#8, col2#9, col3#10]
    +-op_type=UNION_ALL
    +-input_item_list=
    | +-SetOperationItem
    | | +-scan=
    | | | +-ProjectScan
    | | |   +-column_list=$distinct.[a#3, b#4, a#3]
    | | |   +-node_source="resolver_set_operation_corresponding"
    | | |   +-input_scan=
    | | |     +-AggregateScan
    | | |       +-column_list=$distinct.[a#3, b#4]
    | | |       +-input_scan=
    | | |       | +-ProjectScan
    | | |       |   +-column_list=$subquery1.[a#1, b#2]
    | | |       |   +-expr_list=
    | | |       |   | +-a#1 := Literal(type=INT64, value=1)
    | | |       |   | +-b#2 := Literal(type=INT64, value=2)
    | | |       |   +-input_scan=
    | | |       |     +-SingleRowScan
    | | |       +-group_by_list=
    | | |         +-a#3 := ColumnRef(type=INT64, column=$subquery1.a#1)
    | | |         +-b#4 := ColumnRef(type=INT64, column=$subquery1.b#2)
    | | +-output_column_list=$distinct.[a#3, b#4, a#3]
    | +-SetOperationItem
    |   +-scan=
    |   | +-ProjectScan
    |   |   +-column_list=$union_all2.[col1#6, col2#7, col3#5]
    |   |   +-node_source="resolver_set_operation_corresponding"
    |   |   +-input_scan=
    |   |     +-ProjectScan
    |   |       +-column_list=$union_all2.[col3#5, col1#6, col2#7]
    |   |       +-expr_list=
    |   |       | +-col3#5 := Literal(type=INT64, value=1)
    |   |       | +-col1#6 := Literal(type=INT64, value=1)
    |   |       | +-col2#7 := Literal(type=INT64, value=2)
    |   |       +-input_scan=
    |   |         +-SingleRowScan
    |   +-output_column_list=$union_all2.[col1#6, col2#7, col3#5]
    +-column_match_mode=CORRESPONDING
    +-column_propagation_mode=INNER

[UNPARSED_SQL]
(
SELECT
  aggregatescan_9.a_7 AS col1,
  aggregatescan_9.a_8 AS col2,
  aggregatescan_9.a_7 AS col3
FROM
  (
    SELECT
      projectscan_6.a_4 AS a_7,
      projectscan_6.a_5 AS a_8
    FROM
      (
        SELECT
          1 AS a_4,
          2 AS a_5
      ) AS projectscan_6
    GROUP BY 1, 2
  ) AS aggregatescan_9
) UNION ALL CORRESPONDING(
SELECT
  1 AS col3,
  1 AS col1,
  2 AS col2
);
--
ALTERNATION GROUP: UNION DISTINCT
--
QueryStmt
+-output_column_list=
| +-$union_distinct.col1#8 AS col1 [INT64]
| +-$union_distinct.col2#9 AS col2 [INT64]
| +-$union_distinct.col3#10 AS col3 [INT64]
+-query=
  +-SetOperationScan
    +-column_list=$union_distinct.[col1#8, col2#9, col3#10]
    +-op_type=UNION_DISTINCT
    +-input_item_list=
    | +-SetOperationItem
    | | +-scan=
    | | | +-ProjectScan
    | | |   +-column_list=$distinct.[a#3, b#4, a#3]
    | | |   +-node_source="resolver_set_operation_corresponding"
    | | |   +-input_scan=
    | | |     +-AggregateScan
    | | |       +-column_list=$distinct.[a#3, b#4]
    | | |       +-input_scan=
    | | |       | +-ProjectScan
    | | |       |   +-column_list=$subquery1.[a#1, b#2]
    | | |       |   +-expr_list=
    | | |       |   | +-a#1 := Literal(type=INT64, value=1)
    | | |       |   | +-b#2 := Literal(type=INT64, value=2)
    | | |       |   +-input_scan=
    | | |       |     +-SingleRowScan
    | | |       +-group_by_list=
    | | |         +-a#3 := ColumnRef(type=INT64, column=$subquery1.a#1)
    | | |         +-b#4 := ColumnRef(type=INT64, column=$subquery1.b#2)
    | | +-output_column_list=$distinct.[a#3, b#4, a#3]
    | +-SetOperationItem
    |   +-scan=
    |   | +-ProjectScan
    |   |   +-column_list=$union_distinct2.[col1#6, col2#7, col3#5]
    |   |   +-node_source="resolver_set_operation_corresponding"
    |   |   +-input_scan=
    |   |     +-ProjectScan
    |   |       +-column_list=$union_distinct2.[col3#5, col1#6, col2#7]
    |   |       +-expr_list=
    |   |       | +-col3#5 := Literal(type=INT64, value=1)
    |   |       | +-col1#6 := Literal(type=INT64, value=1)
    |   |       | +-col2#7 := Literal(type=INT64, value=2)
    |   |       +-input_scan=
    |   |         +-SingleRowScan
    |   +-output_column_list=$union_distinct2.[col1#6, col2#7, col3#5]
    +-column_match_mode=CORRESPONDING
    +-column_propagation_mode=INNER

[UNPARSED_SQL]
(
SELECT
  aggregatescan_9.a_7 AS col1,
  aggregatescan_9.a_8 AS col2,
  aggregatescan_9.a_7 AS col3
FROM
  (
    SELECT
      projectscan_6.a_4 AS a_7,
      projectscan_6.a_5 AS a_8
    FROM
      (
        SELECT
          1 AS a_4,
          2 AS a_5
      ) AS projectscan_6
    GROUP BY 1, 2
  ) AS aggregatescan_9
) UNION DISTINCT CORRESPONDING(
SELECT
  1 AS col3,
  1 AS col1,
  2 AS col2
);
--
ALTERNATION GROUP: EXCEPT ALL
--
QueryStmt
+-output_column_list=
| +-$except_all.col1#8 AS col1 [INT64]
| +-$except_all.col2#9 AS col2 [INT64]
| +-$except_all.col3#10 AS col3 [INT64]
+-query=
  +-SetOperationScan
    +-column_list=$except_all.[col1#8, col2#9, col3#10]
    +-op_type=EXCEPT_ALL
    +-input_item_list=
    | +-SetOperationItem
    | | +-scan=
    | | | +-ProjectScan
    | | |   +-column_list=$distinct.[a#3, b#4, a#3]
    | | |   +-node_source="resolver_set_operation_corresponding"
    | | |   +-input_scan=
    | | |     +-AggregateScan
    | | |       +-column_list=$distinct.[a#3, b#4]
    | | |       +-input_scan=
    | | |       | +-ProjectScan
    | | |       |   +-column_list=$subquery1.[a#1, b#2]
    | | |       |   +-expr_list=
    | | |       |   | +-a#1 := Literal(type=INT64, value=1)
    | | |       |   | +-b#2 := Literal(type=INT64, value=2)
    | | |       |   +-input_scan=
    | | |       |     +-SingleRowScan
    | | |       +-group_by_list=
    | | |         +-a#3 := ColumnRef(type=INT64, column=$subquery1.a#1)
    | | |         +-b#4 := ColumnRef(type=INT64, column=$subquery1.b#2)
    | | +-output_column_list=$distinct.[a#3, b#4, a#3]
    | +-SetOperationItem
    |   +-scan=
    |   | +-ProjectScan
    |   |   +-column_list=$except_all2.[col1#6, col2#7, col3#5]
    |   |   +-node_source="resolver_set_operation_corresponding"
    |   |   +-input_scan=
    |   |     +-ProjectScan
    |   |       +-column_list=$except_all2.[col3#5, col1#6, col2#7]
    |   |       +-expr_list=
    |   |       | +-col3#5 := Literal(type=INT64, value=1)
    |   |       | +-col1#6 := Literal(type=INT64, value=1)
    |   |       | +-col2#7 := Literal(type=INT64, value=2)
    |   |       +-input_scan=
    |   |         +-SingleRowScan
    |   +-output_column_list=$except_all2.[col1#6, col2#7, col3#5]
    +-column_match_mode=CORRESPONDING
    +-column_propagation_mode=INNER

[UNPARSED_SQL]
(
SELECT
  aggregatescan_9.a_7 AS col1,
  aggregatescan_9.a_8 AS col2,
  aggregatescan_9.a_7 AS col3
FROM
  (
    SELECT
      projectscan_6.a_4 AS a_7,
      projectscan_6.a_5 AS a_8
    FROM
      (
        SELECT
          1 AS a_4,
          2 AS a_5
      ) AS projectscan_6
    GROUP BY 1, 2
  ) AS aggregatescan_9
) EXCEPT ALL CORRESPONDING(
SELECT
  1 AS col3,
  1 AS col1,
  2 AS col2
);
--
ALTERNATION GROUP: EXCEPT DISTINCT
--
QueryStmt
+-output_column_list=
| +-$except_distinct.col1#8 AS col1 [INT64]
| +-$except_distinct.col2#9 AS col2 [INT64]
| +-$except_distinct.col3#10 AS col3 [INT64]
+-query=
  +-SetOperationScan
    +-column_list=$except_distinct.[col1#8, col2#9, col3#10]
    +-op_type=EXCEPT_DISTINCT
    +-input_item_list=
    | +-SetOperationItem
    | | +-scan=
    | | | +-ProjectScan
    | | |   +-column_list=$distinct.[a#3, b#4, a#3]
    | | |   +-node_source="resolver_set_operation_corresponding"
    | | |   +-input_scan=
    | | |     +-AggregateScan
    | | |       +-column_list=$distinct.[a#3, b#4]
    | | |       +-input_scan=
    | | |       | +-ProjectScan
    | | |       |   +-column_list=$subquery1.[a#1, b#2]
    | | |       |   +-expr_list=
    | | |       |   | +-a#1 := Literal(type=INT64, value=1)
    | | |       |   | +-b#2 := Literal(type=INT64, value=2)
    | | |       |   +-input_scan=
    | | |       |     +-SingleRowScan
    | | |       +-group_by_list=
    | | |         +-a#3 := ColumnRef(type=INT64, column=$subquery1.a#1)
    | | |         +-b#4 := ColumnRef(type=INT64, column=$subquery1.b#2)
    | | +-output_column_list=$distinct.[a#3, b#4, a#3]
    | +-SetOperationItem
    |   +-scan=
    |   | +-ProjectScan
    |   |   +-column_list=$except_distinct2.[col1#6, col2#7, col3#5]
    |   |   +-node_source="resolver_set_operation_corresponding"
    |   |   +-input_scan=
    |   |     +-ProjectScan
    |   |       +-column_list=$except_distinct2.[col3#5, col1#6, col2#7]
    |   |       +-expr_list=
    |   |       | +-col3#5 := Literal(type=INT64, value=1)
    |   |       | +-col1#6 := Literal(type=INT64, value=1)
    |   |       | +-col2#7 := Literal(type=INT64, value=2)
    |   |       +-input_scan=
    |   |         +-SingleRowScan
    |   +-output_column_list=$except_distinct2.[col1#6, col2#7, col3#5]
    +-column_match_mode=CORRESPONDING
    +-column_propagation_mode=INNER

[UNPARSED_SQL]
(
SELECT
  aggregatescan_9.a_7 AS col1,
  aggregatescan_9.a_8 AS col2,
  aggregatescan_9.a_7 AS col3
FROM
  (
    SELECT
      projectscan_6.a_4 AS a_7,
      projectscan_6.a_5 AS a_8
    FROM
      (
        SELECT
          1 AS a_4,
          2 AS a_5
      ) AS projectscan_6
    GROUP BY 1, 2
  ) AS aggregatescan_9
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  1 AS col3,
  1 AS col1,
  2 AS col2
);
--
ALTERNATION GROUP: INTERSECT ALL
--
QueryStmt
+-output_column_list=
| +-$intersect_all.col1#8 AS col1 [INT64]
| +-$intersect_all.col2#9 AS col2 [INT64]
| +-$intersect_all.col3#10 AS col3 [INT64]
+-query=
  +-SetOperationScan
    +-column_list=$intersect_all.[col1#8, col2#9, col3#10]
    +-op_type=INTERSECT_ALL
    +-input_item_list=
    | +-SetOperationItem
    | | +-scan=
    | | | +-ProjectScan
    | | |   +-column_list=$distinct.[a#3, b#4, a#3]
    | | |   +-node_source="resolver_set_operation_corresponding"
    | | |   +-input_scan=
    | | |     +-AggregateScan
    | | |       +-column_list=$distinct.[a#3, b#4]
    | | |       +-input_scan=
    | | |       | +-ProjectScan
    | | |       |   +-column_list=$subquery1.[a#1, b#2]
    | | |       |   +-expr_list=
    | | |       |   | +-a#1 := Literal(type=INT64, value=1)
    | | |       |   | +-b#2 := Literal(type=INT64, value=2)
    | | |       |   +-input_scan=
    | | |       |     +-SingleRowScan
    | | |       +-group_by_list=
    | | |         +-a#3 := ColumnRef(type=INT64, column=$subquery1.a#1)
    | | |         +-b#4 := ColumnRef(type=INT64, column=$subquery1.b#2)
    | | +-output_column_list=$distinct.[a#3, b#4, a#3]
    | +-SetOperationItem
    |   +-scan=
    |   | +-ProjectScan
    |   |   +-column_list=$intersect_all2.[col1#6, col2#7, col3#5]
    |   |   +-node_source="resolver_set_operation_corresponding"
    |   |   +-input_scan=
    |   |     +-ProjectScan
    |   |       +-column_list=$intersect_all2.[col3#5, col1#6, col2#7]
    |   |       +-expr_list=
    |   |       | +-col3#5 := Literal(type=INT64, value=1)
    |   |       | +-col1#6 := Literal(type=INT64, value=1)
    |   |       | +-col2#7 := Literal(type=INT64, value=2)
    |   |       +-input_scan=
    |   |         +-SingleRowScan
    |   +-output_column_list=$intersect_all2.[col1#6, col2#7, col3#5]
    +-column_match_mode=CORRESPONDING
    +-column_propagation_mode=INNER

[UNPARSED_SQL]
(
SELECT
  aggregatescan_9.a_7 AS col1,
  aggregatescan_9.a_8 AS col2,
  aggregatescan_9.a_7 AS col3
FROM
  (
    SELECT
      projectscan_6.a_4 AS a_7,
      projectscan_6.a_5 AS a_8
    FROM
      (
        SELECT
          1 AS a_4,
          2 AS a_5
      ) AS projectscan_6
    GROUP BY 1, 2
  ) AS aggregatescan_9
) INTERSECT ALL CORRESPONDING(
SELECT
  1 AS col3,
  1 AS col1,
  2 AS col2
);
--
ALTERNATION GROUP: INTERSECT DISTINCT
--
QueryStmt
+-output_column_list=
| +-$intersect_distinct.col1#8 AS col1 [INT64]
| +-$intersect_distinct.col2#9 AS col2 [INT64]
| +-$intersect_distinct.col3#10 AS col3 [INT64]
+-query=
  +-SetOperationScan
    +-column_list=$intersect_distinct.[col1#8, col2#9, col3#10]
    +-op_type=INTERSECT_DISTINCT
    +-input_item_list=
    | +-SetOperationItem
    | | +-scan=
    | | | +-ProjectScan
    | | |   +-column_list=$distinct.[a#3, b#4, a#3]
    | | |   +-node_source="resolver_set_operation_corresponding"
    | | |   +-input_scan=
    | | |     +-AggregateScan
    | | |       +-column_list=$distinct.[a#3, b#4]
    | | |       +-input_scan=
    | | |       | +-ProjectScan
    | | |       |   +-column_list=$subquery1.[a#1, b#2]
    | | |       |   +-expr_list=
    | | |       |   | +-a#1 := Literal(type=INT64, value=1)
    | | |       |   | +-b#2 := Literal(type=INT64, value=2)
    | | |       |   +-input_scan=
    | | |       |     +-SingleRowScan
    | | |       +-group_by_list=
    | | |         +-a#3 := ColumnRef(type=INT64, column=$subquery1.a#1)
    | | |         +-b#4 := ColumnRef(type=INT64, column=$subquery1.b#2)
    | | +-output_column_list=$distinct.[a#3, b#4, a#3]
    | +-SetOperationItem
    |   +-scan=
    |   | +-ProjectScan
    |   |   +-column_list=$intersect_distinct2.[col1#6, col2#7, col3#5]
    |   |   +-node_source="resolver_set_operation_corresponding"
    |   |   +-input_scan=
    |   |     +-ProjectScan
    |   |       +-column_list=$intersect_distinct2.[col3#5, col1#6, col2#7]
    |   |       +-expr_list=
    |   |       | +-col3#5 := Literal(type=INT64, value=1)
    |   |       | +-col1#6 := Literal(type=INT64, value=1)
    |   |       | +-col2#7 := Literal(type=INT64, value=2)
    |   |       +-input_scan=
    |   |         +-SingleRowScan
    |   +-output_column_list=$intersect_distinct2.[col1#6, col2#7, col3#5]
    +-column_match_mode=CORRESPONDING
    +-column_propagation_mode=INNER

[UNPARSED_SQL]
(
SELECT
  aggregatescan_9.a_7 AS col1,
  aggregatescan_9.a_8 AS col2,
  aggregatescan_9.a_7 AS col3
FROM
  (
    SELECT
      projectscan_6.a_4 AS a_7,
      projectscan_6.a_5 AS a_8
    FROM
      (
        SELECT
          1 AS a_4,
          2 AS a_5
      ) AS projectscan_6
    GROUP BY 1, 2
  ) AS aggregatescan_9
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  1 AS col3,
  1 AS col1,
  2 AS col2
);
==

# CORRESPONDING: The edge case of SELECT DISTINCT (non first query) is handled
# correctly despite the missing ProjectScan issue mentioned in b/36095506.
SELECT 1 AS col3, 1 AS col1, 2 AS col2
{{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
SELECT DISTINCT a AS col1, b AS col2, a AS col3
FROM (
  SELECT 1 AS a, 2 AS b
)
--
ALTERNATION GROUP: UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  1 AS col3,
  1 AS col1,
  2 AS col2
) UNION ALL CORRESPONDING(
SELECT
  aggregatescan_12.a_10 AS col3,
  aggregatescan_12.a_10 AS col1,
  aggregatescan_12.a_11 AS col2
FROM
  (
    SELECT
      projectscan_9.a_7 AS a_10,
      projectscan_9.a_8 AS a_11
    FROM
      (
        SELECT
          1 AS a_7,
          2 AS a_8
      ) AS projectscan_9
    GROUP BY 1, 2
  ) AS aggregatescan_12
);
--
ALTERNATION GROUP: UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  1 AS col3,
  1 AS col1,
  2 AS col2
) UNION DISTINCT CORRESPONDING(
SELECT
  aggregatescan_12.a_10 AS col3,
  aggregatescan_12.a_10 AS col1,
  aggregatescan_12.a_11 AS col2
FROM
  (
    SELECT
      projectscan_9.a_7 AS a_10,
      projectscan_9.a_8 AS a_11
    FROM
      (
        SELECT
          1 AS a_7,
          2 AS a_8
      ) AS projectscan_9
    GROUP BY 1, 2
  ) AS aggregatescan_12
);
--
ALTERNATION GROUP: EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  1 AS col3,
  1 AS col1,
  2 AS col2
) EXCEPT ALL CORRESPONDING(
SELECT
  aggregatescan_12.a_10 AS col3,
  aggregatescan_12.a_10 AS col1,
  aggregatescan_12.a_11 AS col2
FROM
  (
    SELECT
      projectscan_9.a_7 AS a_10,
      projectscan_9.a_8 AS a_11
    FROM
      (
        SELECT
          1 AS a_7,
          2 AS a_8
      ) AS projectscan_9
    GROUP BY 1, 2
  ) AS aggregatescan_12
);
--
ALTERNATION GROUP: EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  1 AS col3,
  1 AS col1,
  2 AS col2
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  aggregatescan_12.a_10 AS col3,
  aggregatescan_12.a_10 AS col1,
  aggregatescan_12.a_11 AS col2
FROM
  (
    SELECT
      projectscan_9.a_7 AS a_10,
      projectscan_9.a_8 AS a_11
    FROM
      (
        SELECT
          1 AS a_7,
          2 AS a_8
      ) AS projectscan_9
    GROUP BY 1, 2
  ) AS aggregatescan_12
);
--
ALTERNATION GROUP: INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  1 AS col3,
  1 AS col1,
  2 AS col2
) INTERSECT ALL CORRESPONDING(
SELECT
  aggregatescan_12.a_10 AS col3,
  aggregatescan_12.a_10 AS col1,
  aggregatescan_12.a_11 AS col2
FROM
  (
    SELECT
      projectscan_9.a_7 AS a_10,
      projectscan_9.a_8 AS a_11
    FROM
      (
        SELECT
          1 AS a_7,
          2 AS a_8
      ) AS projectscan_9
    GROUP BY 1, 2
  ) AS aggregatescan_12
);
--
ALTERNATION GROUP: INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  1 AS col3,
  1 AS col1,
  2 AS col2
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  aggregatescan_12.a_10 AS col3,
  aggregatescan_12.a_10 AS col1,
  aggregatescan_12.a_11 AS col2
FROM
  (
    SELECT
      projectscan_9.a_7 AS a_10,
      projectscan_9.a_8 AS a_11
    FROM
      (
        SELECT
          1 AS a_7,
          2 AS a_8
      ) AS projectscan_9
    GROUP BY 1, 2
  ) AS aggregatescan_12
);
==

# CORRESPONDING: If some columns of SELECT DISTINCT are not part of the common
# columns, we cannot restore the original SQL (note the unparsed sql only has 2
# columns for the SELECT DISTINCT query). We can, however, at least generate a
# sql so that the resolved ast is the same as before.
SELECT 1 AS col1, 1 AS col2
{{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
SELECT DISTINCT a AS col2, b AS col1, b AS extra_col
FROM (
  SELECT 1 AS a, 2 AS b
)
--
ALTERNATION GROUP: UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  1 AS col1,
  1 AS col2
) UNION ALL CORRESPONDING(
SELECT
  projectscan_7.a_5 AS col2,
  projectscan_7.a_6 AS col1
FROM
  (
    SELECT
      1 AS a_5,
      2 AS a_6
  ) AS projectscan_7
GROUP BY 1, 2
);
--
ALTERNATION GROUP: UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  1 AS col1,
  1 AS col2
) UNION DISTINCT CORRESPONDING(
SELECT
  projectscan_7.a_5 AS col2,
  projectscan_7.a_6 AS col1
FROM
  (
    SELECT
      1 AS a_5,
      2 AS a_6
  ) AS projectscan_7
GROUP BY 1, 2
);
--
ALTERNATION GROUP: EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  1 AS col1,
  1 AS col2
) EXCEPT ALL CORRESPONDING(
SELECT
  projectscan_7.a_5 AS col2,
  projectscan_7.a_6 AS col1
FROM
  (
    SELECT
      1 AS a_5,
      2 AS a_6
  ) AS projectscan_7
GROUP BY 1, 2
);
--
ALTERNATION GROUP: EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  1 AS col1,
  1 AS col2
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  projectscan_7.a_5 AS col2,
  projectscan_7.a_6 AS col1
FROM
  (
    SELECT
      1 AS a_5,
      2 AS a_6
  ) AS projectscan_7
GROUP BY 1, 2
);
--
ALTERNATION GROUP: INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  1 AS col1,
  1 AS col2
) INTERSECT ALL CORRESPONDING(
SELECT
  projectscan_7.a_5 AS col2,
  projectscan_7.a_6 AS col1
FROM
  (
    SELECT
      1 AS a_5,
      2 AS a_6
  ) AS projectscan_7
GROUP BY 1, 2
);
--
ALTERNATION GROUP: INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  1 AS col1,
  1 AS col2
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  projectscan_7.a_5 AS col2,
  projectscan_7.a_6 AS col1
FROM
  (
    SELECT
      1 AS a_5,
      2 AS a_6
  ) AS projectscan_7
GROUP BY 1, 2
);
==

# CORRESPONDING: Test the edge case where column names conflict with the
# column aliases assigned by sqlbuilder. Sqlbuilder assigns aliases in the form
# of `a_<num>`.
SELECT 1 AS a_2, 2 AS a_1
{{UNION ALL|UNION DISTINCT|EXCEPT ALL|EXCEPT DISTINCT|INTERSECT ALL|INTERSECT DISTINCT}} CORRESPONDING
SELECT 2 AS a_1, 1 AS a_2
--
ALTERNATION GROUP: UNION ALL
--
[UNPARSED_SQL]
(
SELECT
  1 AS a_2,
  2 AS a_1
) UNION ALL CORRESPONDING(
SELECT
  2 AS a_1,
  1 AS a_2
);
--
ALTERNATION GROUP: UNION DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  1 AS a_2,
  2 AS a_1
) UNION DISTINCT CORRESPONDING(
SELECT
  2 AS a_1,
  1 AS a_2
);
--
ALTERNATION GROUP: EXCEPT ALL
--
[UNPARSED_SQL]
(
SELECT
  1 AS a_2,
  2 AS a_1
) EXCEPT ALL CORRESPONDING(
SELECT
  2 AS a_1,
  1 AS a_2
);
--
ALTERNATION GROUP: EXCEPT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  1 AS a_2,
  2 AS a_1
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  2 AS a_1,
  1 AS a_2
);
--
ALTERNATION GROUP: INTERSECT ALL
--
[UNPARSED_SQL]
(
SELECT
  1 AS a_2,
  2 AS a_1
) INTERSECT ALL CORRESPONDING(
SELECT
  2 AS a_1,
  1 AS a_2
);
--
ALTERNATION GROUP: INTERSECT DISTINCT
--
[UNPARSED_SQL]
(
SELECT
  1 AS a_2,
  2 AS a_1
) INTERSECT DISTINCT CORRESPONDING(
SELECT
  2 AS a_1,
  1 AS a_2
);
==

# Edge case: SELECT DISTINCT. The first query's scan.column_list = [int64, int32],
# but the final column_list should be [int32, int64]. We handle this by wrapping
# a project scan.
[show_resolved_ast]
SELECT DISTINCT int64 AS a, int32 AS b, int64 AS c FROM SimpleTypes
EXCEPT DISTINCT CORRESPONDING
SELECT int32 AS b, int64 AS c FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$except_distinct.b#41 AS b [INT32]
| +-$except_distinct.c#42 AS c [INT64]
+-query=
  +-SetOperationScan
    +-column_list=$except_distinct.[b#41, c#42]
    +-op_type=EXCEPT_DISTINCT
    +-input_item_list=
    | +-SetOperationItem
    | | +-scan=
    | | | +-ProjectScan
    | | |   +-column_list=$distinct.[int32#21, int64#20]
    | | |   +-node_source="resolver_set_operation_corresponding"
    | | |   +-input_scan=
    | | |     +-AggregateScan
    | | |       +-column_list=$distinct.[int64#20, int32#21]
    | | |       +-input_scan=
    | | |       | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
    | | |       +-group_by_list=
    | | |         +-int64#20 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    | | |         +-int32#21 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    | | +-output_column_list=$distinct.[int32#21, int64#20]
    | +-SetOperationItem
    |   +-scan=
    |   | +-ProjectScan
    |   |   +-column_list=SimpleTypes.[int32#22, int64#23]
    |   |   +-input_scan=
    |   |     +-TableScan(column_list=SimpleTypes.[int32#22, int64#23], table=SimpleTypes, column_index_list=[0, 1])
    |   +-output_column_list=SimpleTypes.[int32#22, int64#23]
    +-column_match_mode=CORRESPONDING
    +-column_propagation_mode=INNER

[UNPARSED_SQL]
(
SELECT
  aggregatescan_8.a_7 AS b,
  aggregatescan_8.a_6 AS c
FROM
  (
    SELECT
      simpletypes_5.a_4 AS a_6,
      simpletypes_5.a_3 AS a_7
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_3,
          SimpleTypes.int64 AS a_4
        FROM
          SimpleTypes
      ) AS simpletypes_5
    GROUP BY 1, 2
  ) AS aggregatescan_8
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  SimpleTypes.int32 AS b,
  SimpleTypes.int64 AS c
FROM
  SimpleTypes
);
==

# Edge case: Both queries are SELECT DISINCT.
[show_resolved_ast]
SELECT DISTINCT int64 AS a, int32 AS b, int64 AS c FROM SimpleTypes
EXCEPT DISTINCT CORRESPONDING
SELECT DISTINCT int32 AS b, int64 AS c, int64 AS d FROM SimpleTypes
--
QueryStmt
+-output_column_list=
| +-$except_distinct.b#43 AS b [INT32]
| +-$except_distinct.c#44 AS c [INT64]
+-query=
  +-SetOperationScan
    +-column_list=$except_distinct.[b#43, c#44]
    +-op_type=EXCEPT_DISTINCT
    +-input_item_list=
    | +-SetOperationItem
    | | +-scan=
    | | | +-ProjectScan
    | | |   +-column_list=$distinct.[int32#21, int64#20]
    | | |   +-node_source="resolver_set_operation_corresponding"
    | | |   +-input_scan=
    | | |     +-AggregateScan
    | | |       +-column_list=$distinct.[int64#20, int32#21]
    | | |       +-input_scan=
    | | |       | +-TableScan(column_list=SimpleTypes.[int32#1, int64#2], table=SimpleTypes, column_index_list=[0, 1])
    | | |       +-group_by_list=
    | | |         +-int64#20 := ColumnRef(type=INT64, column=SimpleTypes.int64#2)
    | | |         +-int32#21 := ColumnRef(type=INT32, column=SimpleTypes.int32#1)
    | | +-output_column_list=$distinct.[int32#21, int64#20]
    | +-SetOperationItem
    |   +-scan=
    |   | +-AggregateScan
    |   |   +-column_list=$distinct.[int32#41, int64#42]
    |   |   +-input_scan=
    |   |   | +-TableScan(column_list=SimpleTypes.[int32#22, int64#23], table=SimpleTypes, column_index_list=[0, 1])
    |   |   +-group_by_list=
    |   |     +-int32#41 := ColumnRef(type=INT32, column=SimpleTypes.int32#22)
    |   |     +-int64#42 := ColumnRef(type=INT64, column=SimpleTypes.int64#23)
    |   +-output_column_list=$distinct.[int32#41, int64#42]
    +-column_match_mode=CORRESPONDING
    +-column_propagation_mode=INNER

[UNPARSED_SQL]
(
SELECT
  aggregatescan_8.a_7 AS b,
  aggregatescan_8.a_6 AS c
FROM
  (
    SELECT
      simpletypes_5.a_4 AS a_6,
      simpletypes_5.a_3 AS a_7
    FROM
      (
        SELECT
          SimpleTypes.int32 AS a_3,
          SimpleTypes.int64 AS a_4
        FROM
          SimpleTypes
      ) AS simpletypes_5
    GROUP BY 1, 2
  ) AS aggregatescan_8
) EXCEPT DISTINCT CORRESPONDING(
SELECT
  simpletypes_11.a_9 AS b,
  simpletypes_11.a_10 AS c
FROM
  (
    SELECT
      SimpleTypes.int32 AS a_9,
      SimpleTypes.int64 AS a_10
    FROM
      SimpleTypes
  ) AS simpletypes_11
GROUP BY 1, 2
);
