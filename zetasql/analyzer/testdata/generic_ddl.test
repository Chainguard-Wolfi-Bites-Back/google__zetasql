[default supported_generic_entity_types=RESERVATION,EXPLORE]

CREATE RESERVATION myProject.myReservation
--
CreateEntityStmt(name_path=myProject.myReservation, entity_type="RESERVATION")
==

CREATE OR REPLACE RESERVATION myProject.myReservation
OPTIONS(a=b, c=d)
AS JSON '{"key": "value"}'
--
CreateEntityStmt
+-name_path=myProject.myReservation
+-create_mode=CREATE_OR_REPLACE
+-entity_type="RESERVATION"
+-entity_body_json='{"key":"value"}'
+-option_list=
  +-a := Literal(type=STRING, value="b")
  +-c := Literal(type=STRING, value="d")
==

CREATE OR REPLACE EXPLORE myProject.myExplore
OPTIONS(a=b, c=d)
AS """ explore: test_explore { } """
--
CreateEntityStmt
+-name_path=myProject.myExplore
+-create_mode=CREATE_OR_REPLACE
+-entity_type="EXPLORE"
+-entity_body_text=" explore: test_explore { } "
+-option_list=
  +-a := Literal(type=STRING, value="b")
  +-c := Literal(type=STRING, value="d")
==

CREATE RESERVATION IF NOT EXISTS myProject.myReservation
OPTIONS(a=b, c=d)
AS JSON
"""
{
  "key": "value"
}
"""
--
CreateEntityStmt
+-name_path=myProject.myReservation
+-create_mode=CREATE_IF_NOT_EXISTS
+-entity_type="RESERVATION"
+-entity_body_json='{"key":"value"}'
+-option_list=
  +-a := Literal(type=STRING, value="b")
  +-c := Literal(type=STRING, value="d")
==

ALTER RESERVATION myProject.myReservation SET OPTIONS (a="b")
--
AlterEntityStmt
+-name_path=myProject.myReservation
+-alter_action_list=
| +-SetOptionsAction
|   +-option_list=
|     +-a := Literal(type=STRING, value="b")
+-entity_type="RESERVATION"
==

[language_features=JSON_NO_VALIDATION]
ALTER RESERVATION myProject.myReservation
  SET AS JSON '{key: "value"}';
--
AlterEntityStmt
+-name_path=myProject.myReservation
+-alter_action_list=
| +-SetAsAction(entity_body_json='{key: "value"}')
+-entity_type="RESERVATION"
==

ALTER RESERVATION myProject.myReservation SET AS JSON '{"key": "value"}';
--
AlterEntityStmt
+-name_path=myProject.myReservation
+-alter_action_list=
| +-SetAsAction(entity_body_json='{"key":"value"}')
+-entity_type="RESERVATION"
==

[language_features=JSON_NO_VALIDATION]
CREATE RESERVATION IF NOT EXISTS myProject.myReservation
AS JSON
"""
{
  key: "value"
}
"""
--
CreateEntityStmt(name_path=myProject.myReservation, create_mode=CREATE_IF_NOT_EXISTS, entity_type="RESERVATION", entity_body_json='\n{\n  key: "value"\n}\n')
==

CREATE RESERVATION IF NOT EXISTS myProject.myReservation
OPTIONS(a=b, c=d)
AS JSON
"""
{
  "key": "value"
}
"""
--
CreateEntityStmt
+-name_path=myProject.myReservation
+-create_mode=CREATE_IF_NOT_EXISTS
+-entity_type="RESERVATION"
+-entity_body_json='{"key":"value"}'
+-option_list=
  +-a := Literal(type=STRING, value="b")
  +-c := Literal(type=STRING, value="d")
==

# Only JSON literal is supported
ALTER RESERVATION myProject.myReservation
  SET OPTIONS (a="b"),
  SET AS JSON_QUERY(JSON '{"config": {"key": "value"}}', '$.config');
--
ERROR: Syntax error: Expected keyword JSON or string literal but got identifier "JSON_QUERY" [at 3:10]
  SET AS JSON_QUERY(JSON '{"config": {"key": "value"}}', '$.config');
         ^
==

# Json keys must be quoted
CREATE OR REPLACE RESERVATION myProject.myReservation
OPTIONS(a=b, c=d)
AS JSON '{key: "value"}'
--
ERROR: Invalid JSON literal: parse error at line 1, column 2: syntax error while parsing object key - invalid literal; last read: '{k'; expected string literal [at 3:4]
AS JSON '{key: "value"}'
   ^
==

ALTER EXPLORE myProject.myExplore SET AS " explore: test_explore { } "
--
AlterEntityStmt
+-name_path=myProject.myExplore
+-alter_action_list=
| +-SetAsAction(entity_body_text=" explore: test_explore { } ")
+-entity_type="EXPLORE"
==

ALTER EXPLORE myProject.myExplore SET AS ""
--
ERROR: ALTER SET AS requires JSON or TEXT body literal [at 1:35]
ALTER EXPLORE myProject.myExplore SET AS ""
                                  ^
==

# SET AS is not supported by other ALTER statement
ALTER {{TABLE|VIEW}} myProject.myReservation
  SET AS JSON '{"key": "value"}';
--
ALTERNATION GROUP: TABLE
--
ERROR: ALTER TABLE does not support SET AS [at 2:3]
  SET AS JSON '{"key": "value"}';
  ^
--
ALTERNATION GROUP: VIEW
--
ERROR: ALTER VIEW does not support SET AS [at 2:3]
  SET AS JSON '{"key": "value"}';
  ^
==

DROP RESERVATION myProject.myReservation
--
DropStmt(object_type="RESERVATION", is_if_exists=FALSE, name_path=myProject.myReservation)
==

DROP RESERVATION IF EXISTS myProject.myReservation
--
DropStmt(object_type="RESERVATION", is_if_exists=TRUE, name_path=myProject.myReservation)

==

[supported_generic_entity_types=PROJECT]
[language_features=ALLOW_MISSING_PATH_EXPRESSION_IN_ALTER_DDL]

ALTER PROJECT SET OPTIONS (foo='bar')
--
AlterEntityStmt
+-alter_action_list=
| +-SetOptionsAction
|   +-option_list=
|     +-foo := Literal(type=STRING, value="bar")
+-entity_type="PROJECT"

==

[supported_generic_entity_types=PROJECT]
[language_features=ALLOW_MISSING_PATH_EXPRESSION_IN_ALTER_DDL]

ALTER PROJECT SET OPTIONS (foo='bar'), SET OPTIONS (baz='bat')
--
AlterEntityStmt
+-alter_action_list=
| +-SetOptionsAction
| | +-option_list=
| |   +-foo := Literal(type=STRING, value="bar")
| +-SetOptionsAction
|   +-option_list=
|     +-baz := Literal(type=STRING, value="bat")
+-entity_type="PROJECT"

==

[supported_generic_entity_types=PROJECT]
[language_features=ALLOW_MISSING_PATH_EXPRESSION_IN_ALTER_DDL]

ALTER PROJECT SET AS JSON '{}'
--
AlterEntityStmt
+-alter_action_list=
| +-SetAsAction(entity_body_json="{}")
+-entity_type="PROJECT"

==

# ALTER ENTITY grammar paths that can parse but not analyze successfully without
# a path expression.
#
# Not exhaustive since language options influence parsability and analyzability.
[supported_generic_entity_types=PROJECT]
[language_features=ALLOW_MISSING_PATH_EXPRESSION_IN_ALTER_DDL]

ALTER PROJECT {{ADD CHECK (true)|ADD PRIMARY KEY ()|ADD CONSTRAINT foo CHECK (true)|DROP CONSTRAINT foo|DROP PRIMARY KEY|ALTER CONSTRAINT foo ENFORCED|ALTER CONSTRAINT foo SET OPTIONS (foo='bar')|ADD COLUMN foo INTERVAL|DROP COLUMN foo|RENAME COLUMN foo TO bar|ALTER COLUMN foo SET DATA TYPE INTERVAL|ALTER COLUMN foo SET OPTIONS (foo='bar')|ALTER COLUMN foo SET DEFAULT true|ALTER COLUMN foo DROP DEFAULT|ALTER COLUMN foo DROP NOT NULL|RENAME TO foo|SET DEFAULT COLLATE "foo"}}
--
ALTERNATION GROUP: ADD CHECK (true)
--
ERROR: ALTER PROJECT statements must have a path expression between PROJECT and the first alter action. [at 1:1]
ALTER PROJECT ADD CHECK (true)
^
--
ALTERNATION GROUP: ADD PRIMARY KEY ()
--
ERROR: ALTER PROJECT statements must have a path expression between PROJECT and the first alter action. [at 1:1]
ALTER PROJECT ADD PRIMARY KEY ()
^
--
ALTERNATION GROUP: ADD CONSTRAINT foo CHECK (true)
--
ERROR: ALTER PROJECT statements must have a path expression between PROJECT and the first alter action. [at 1:1]
ALTER PROJECT ADD CONSTRAINT foo CHECK (true)
^
--
ALTERNATION GROUP: DROP CONSTRAINT foo
--
ERROR: ALTER PROJECT statements must have a path expression between PROJECT and the first alter action. [at 1:1]
ALTER PROJECT DROP CONSTRAINT foo
^
--
ALTERNATION GROUP: DROP PRIMARY KEY
--
ERROR: ALTER PROJECT statements must have a path expression between PROJECT and the first alter action. [at 1:1]
ALTER PROJECT DROP PRIMARY KEY
^
--
ALTERNATION GROUP: ALTER CONSTRAINT foo ENFORCED
--
ERROR: ALTER CONSTRAINT ENFORCED/NOT ENFORCED is not supported [at 1:15]
ALTER PROJECT ALTER CONSTRAINT foo ENFORCED
              ^
--
ALTERNATION GROUP: ALTER CONSTRAINT foo SET OPTIONS (foo='bar')
--
ERROR: ALTER CONSTRAINT SET OPTIONS is not supported [at 1:15]
ALTER PROJECT ALTER CONSTRAINT foo SET OPTIONS (foo='bar')
              ^
--
ALTERNATION GROUP: ADD COLUMN foo INTERVAL
--
ERROR: ALTER PROJECT does not support ADD COLUMN [at 1:15]
ALTER PROJECT ADD COLUMN foo INTERVAL
              ^
--
ALTERNATION GROUP: DROP COLUMN foo
--
ERROR: ALTER PROJECT does not support DROP COLUMN [at 1:15]
ALTER PROJECT DROP COLUMN foo
              ^
--
ALTERNATION GROUP: RENAME COLUMN foo TO bar
--
ERROR: ALTER PROJECT does not support RENAME COLUMN [at 1:15]
ALTER PROJECT RENAME COLUMN foo TO bar
              ^
--
ALTERNATION GROUP: ALTER COLUMN foo SET DATA TYPE INTERVAL
--
ERROR: ALTER PROJECT does not support ALTER COLUMN SET DATA TYPE [at 1:15]
ALTER PROJECT ALTER COLUMN foo SET DATA TYPE INTERVAL
              ^
--
ALTERNATION GROUP: ALTER COLUMN foo SET OPTIONS (foo='bar')
--
ERROR: ALTER PROJECT does not support ALTER COLUMN SET OPTIONS [at 1:15]
ALTER PROJECT ALTER COLUMN foo SET OPTIONS (foo='bar')
              ^
--
ALTERNATION GROUP: ALTER COLUMN foo SET DEFAULT true
--
ERROR: Column default value is not supported [at 1:15]
ALTER PROJECT ALTER COLUMN foo SET DEFAULT true
              ^
--
ALTERNATION GROUP: ALTER COLUMN foo DROP DEFAULT
--
ERROR: Column default value is not supported [at 1:15]
ALTER PROJECT ALTER COLUMN foo DROP DEFAULT
              ^
--
ALTERNATION GROUP: ALTER COLUMN foo DROP NOT NULL
--
ERROR: ALTER PROJECT does not support ALTER COLUMN DROP NOT NULL [at 1:15]
ALTER PROJECT ALTER COLUMN foo DROP NOT NULL
              ^
--
ALTERNATION GROUP: RENAME TO foo
--
ERROR: ALTER PROJECT does not support RENAME TO [at 1:15]
ALTER PROJECT RENAME TO foo
              ^
--
ALTERNATION GROUP: SET DEFAULT COLLATE "foo"
--
ERROR: ALTER PROJECT does not support SET DEFAULT COLLATE [at 1:15]
ALTER PROJECT SET DEFAULT COLLATE "foo"
              ^
